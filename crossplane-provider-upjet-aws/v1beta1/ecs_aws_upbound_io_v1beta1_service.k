"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Service:
    r"""
    Service is the Schema for the Services API. Provides an ECS service.

    Attributes
    ----------
    apiVersion : str, default is "ecs.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Service", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : EcsAwsUpboundIoV1beta1ServiceSpec, default is Undefined, required
        spec
    status : EcsAwsUpboundIoV1beta1ServiceStatus, default is Undefined, optional
        status
    """


    apiVersion: "ecs.aws.upbound.io/v1beta1" = "ecs.aws.upbound.io/v1beta1"

    kind: "Service" = "Service"

    metadata?: v1.ObjectMeta

    spec: EcsAwsUpboundIoV1beta1ServiceSpec

    status?: EcsAwsUpboundIoV1beta1ServiceStatus


schema EcsAwsUpboundIoV1beta1ServiceSpec:
    r"""
    ServiceSpec defines the desired state of Service

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : EcsAwsUpboundIoV1beta1ServiceSpecForProvider, default is Undefined, required
        for provider
    initProvider : EcsAwsUpboundIoV1beta1ServiceSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : EcsAwsUpboundIoV1beta1ServiceSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : EcsAwsUpboundIoV1beta1ServiceSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: EcsAwsUpboundIoV1beta1ServiceSpecForProvider

    initProvider?: EcsAwsUpboundIoV1beta1ServiceSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: EcsAwsUpboundIoV1beta1ServiceSpecProviderConfigRef

    publishConnectionDetailsTo?: EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: EcsAwsUpboundIoV1beta1ServiceSpecWriteConnectionSecretToRef


schema EcsAwsUpboundIoV1beta1ServiceSpecForProvider:
    r"""
    ecs aws upbound io v1beta1 service spec for provider

    Attributes
    ----------
    alarms : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderAlarmsItems0], default is Undefined, optional
        Information about the CloudWatch alarms. See below.
    availabilityZoneRebalancing : str, default is Undefined, optional
        ECS automatically redistributes tasks within a service across Availability Zones (AZs) to mitigate the risk of impaired application availability due to underlying infrastructure failures and task lifecycle activities. The valid values are ENABLED and DISABLED. Defaults to DISABLED.
    capacityProviderStrategy : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderCapacityProviderStrategyItems0], default is Undefined, optional
        Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if force_new_deployment = true and not changing from 0 capacity_provider_strategy blocks to greater than 0, or vice versa. See below. Conflicts with launch_type.
    cluster : str, default is Undefined, optional
        Name of an ECS cluster.
    clusterRef : EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterRef, default is Undefined, optional
        cluster ref
    clusterSelector : EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterSelector, default is Undefined, optional
        cluster selector
    deploymentCircuitBreaker : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderDeploymentCircuitBreakerItems0], default is Undefined, optional
        Configuration block for deployment circuit breaker. See below.
    deploymentController : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderDeploymentControllerItems0], default is Undefined, optional
        Configuration block for deployment controller configuration. See below.
    deploymentMaximumPercent : float, default is Undefined, optional
        Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the DAEMON scheduling strategy.
    deploymentMinimumHealthyPercent : float, default is Undefined, optional
        Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
    desiredCount : float, default is Undefined, optional
        Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the DAEMON scheduling strategy.
    enableEcsManagedTags : bool, default is Undefined, optional
        Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
    enableExecuteCommand : bool, default is Undefined, optional
        Specifies whether to enable Amazon ECS Exec for the tasks within the service.
    forceDelete : bool, default is Undefined, optional
        Enable to delete a service even if it wasn't scaled down to zero tasks. It's only necessary to use this if the service uses the REPLICA scheduling strategy.
    forceNewDeployment : bool, default is Undefined, optional
        Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., myimage:latest), roll Fargate tasks onto a newer platform version, or immediately deploy ordered_placement_strategy and placement_constraints updates.
    healthCheckGracePeriodSeconds : float, default is Undefined, optional
        Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
    iamRole : str, default is Undefined, optional
        ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the awsvpc network mode. If using awsvpc network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
    iamRoleRef : EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleRef, default is Undefined, optional
        iam role ref
    iamRoleSelector : EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleSelector, default is Undefined, optional
        iam role selector
    launchType : str, default is Undefined, optional
        Launch type on which to run your service. The valid values are EC2, FARGATE, and EXTERNAL. Defaults to EC2. Conflicts with capacity_provider_strategy.
    loadBalancer : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0], default is Undefined, optional
        Configuration block for load balancers. See below.
    networkConfiguration : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0], default is Undefined, optional
        Network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
    orderedPlacementStrategy : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderOrderedPlacementStrategyItems0], default is Undefined, optional
        Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. The maximum number of ordered_placement_strategy blocks is 5. See below.
    placementConstraints : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderPlacementConstraintsItems0], default is Undefined, optional
        Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. Maximum number of placement_constraints is 10. See below.
    platformVersion : str, default is Undefined, optional
        Platform version on which to run your service. Only applicable for launch_type set to FARGATE. Defaults to LATEST. More information about Fargate platform versions can be found in the AWS ECS User Guide.
    propagateTags : str, default is Undefined, optional
        Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are SERVICE and TASK_DEFINITION.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    schedulingStrategy : str, default is Undefined, optional
        Scheduling strategy to use for the service. The valid values are REPLICA and DAEMON. Defaults to REPLICA. Note that Tasks using the Fargate launch type or the .
    serviceConnectConfiguration : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0], default is Undefined, optional
        The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.
    serviceRegistries : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceRegistriesItems0], default is Undefined, optional
        Service discovery registries for the service. The maximum number of service_registries blocks is 1. See below.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    taskDefinition : str, default is Undefined, optional
        Family and revision (family:revision) or full ARN of the task definition that you want to run in your service. Required unless using the EXTERNAL deployment controller. If a revision is not specified, the latest ACTIVE revision is used.
    taskDefinitionRef : EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionRef, default is Undefined, optional
        task definition ref
    taskDefinitionSelector : EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionSelector, default is Undefined, optional
        task definition selector
    triggers : {str:str}, default is Undefined, optional
        Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with plantimestamp(). See example above.
    volumeConfiguration : EcsAwsUpboundIoV1beta1ServiceSpecForProviderVolumeConfiguration, default is Undefined, optional
        volume configuration
    vpcLatticeConfigurations : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderVpcLatticeConfigurationsItems0], default is Undefined, optional
        The VPC Lattice configuration for your service that allows Lattice to connect, secure, and monitor your service across multiple accounts and VPCs. See below.
    waitForSteadyState : bool, default is Undefined, optional
        Default false.
    """


    alarms?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderAlarmsItems0]

    availabilityZoneRebalancing?: str

    capacityProviderStrategy?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderCapacityProviderStrategyItems0]

    cluster?: str

    clusterRef?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterRef

    clusterSelector?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterSelector

    deploymentCircuitBreaker?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderDeploymentCircuitBreakerItems0]

    deploymentController?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderDeploymentControllerItems0]

    deploymentMaximumPercent?: float

    deploymentMinimumHealthyPercent?: float

    desiredCount?: float

    enableEcsManagedTags?: bool

    enableExecuteCommand?: bool

    forceDelete?: bool

    forceNewDeployment?: bool

    healthCheckGracePeriodSeconds?: float

    iamRole?: str

    iamRoleRef?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleRef

    iamRoleSelector?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleSelector

    launchType?: str

    loadBalancer?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0]

    networkConfiguration?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0]

    orderedPlacementStrategy?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderOrderedPlacementStrategyItems0]

    placementConstraints?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderPlacementConstraintsItems0]

    platformVersion?: str

    propagateTags?: str

    region: str

    schedulingStrategy?: str

    serviceConnectConfiguration?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0]

    serviceRegistries?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceRegistriesItems0]

    tags?: {str:str}

    taskDefinition?: str

    taskDefinitionRef?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionRef

    taskDefinitionSelector?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionSelector

    triggers?: {str:str}

    volumeConfiguration?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderVolumeConfiguration

    vpcLatticeConfigurations?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderVpcLatticeConfigurationsItems0]

    waitForSteadyState?: bool


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderAlarmsItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider alarms items0

    Attributes
    ----------
    alarmNames : [str], default is Undefined, optional
        One or more CloudWatch alarm names.
    enable : bool, default is Undefined, optional
        Determines whether to use the CloudWatch alarm option in the service deployment process.
    rollback : bool, default is Undefined, optional
        Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
    """


    alarmNames?: [str]

    enable?: bool

    rollback?: bool


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderCapacityProviderStrategyItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider capacity provider strategy items0

    Attributes
    ----------
    base : float, default is Undefined, optional
        Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
    capacityProvider : str, default is Undefined, optional
        Short name of the capacity provider.
    weight : float, default is Undefined, optional
        Relative percentage of the total number of launched tasks that should use the specified capacity provider.
    """


    base?: float

    capacityProvider?: str

    weight?: float


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterRef:
    r"""
    Reference to a Cluster in ecs to populate cluster.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterRefPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterSelector:
    r"""
    Selector for a Cluster in ecs to populate cluster.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderClusterSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderDeploymentCircuitBreakerItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider deployment circuit breaker items0

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Whether to enable the deployment circuit breaker logic for the service.
    rollback : bool, default is Undefined, optional
        Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
    """


    enable?: bool

    rollback?: bool


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderDeploymentControllerItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider deployment controller items0

    Attributes
    ----------
    $type : str, default is Undefined, optional
        Type of deployment controller. Valid values: CODE_DEPLOY, ECS, EXTERNAL. Default: ECS.
    """


    $type?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleRef:
    r"""
    Reference to a Role in iam to populate iamRole.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleRefPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleSelector:
    r"""
    Selector for a Role in iam to populate iamRole.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderIamRoleSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider load balancer items0

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Name of the container to associate with the load balancer (as it appears in a container definition).
    containerPort : float, default is Undefined, optional
        Port on the container to associate with the load balancer.
    elbName : str, default is Undefined, optional
        Name of the ELB (Classic) to associate with the service.
    targetGroupArn : str, default is Undefined, optional
        ARN of the Load Balancer target group to associate with the service.
    targetGroupArnRef : EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnRef, default is Undefined, optional
        target group arn ref
    targetGroupArnSelector : EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnSelector, default is Undefined, optional
        target group arn selector
    """


    containerName?: str

    containerPort?: float

    elbName?: str

    targetGroupArn?: str

    targetGroupArnRef?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnRef

    targetGroupArnSelector?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnSelector


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnRef:
    r"""
    Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnRefPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnSelector:
    r"""
    Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderLoadBalancerItems0TargetGroupArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider network configuration items0

    Attributes
    ----------
    assignPublicIp : bool, default is Undefined, optional
        Assign a public IP address to the ENI (Fargate launch type only). Valid values are true or false. Default false.
    securityGroupRefs : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroups.
    securityGroupSelector : EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupSelector, default is Undefined, optional
        security group selector
    securityGroups : [str], default is Undefined, optional
        Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
    subnetRefs : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnets.
    subnetSelector : EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetSelector, default is Undefined, optional
        subnet selector
    subnets : [str], default is Undefined, optional
        Subnets associated with the task or service.
    """


    assignPublicIp?: bool

    securityGroupRefs?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupRefsItems0]

    securityGroupSelector?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupSelector

    securityGroups?: [str]

    subnetRefs?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetRefsItems0]

    subnetSelector?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetSelector

    subnets?: [str]


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupRefsItems0Policy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroups.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SecurityGroupSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetRefsItems0Policy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnets.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderNetworkConfigurationItems0SubnetSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderOrderedPlacementStrategyItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider ordered placement strategy items0

    Attributes
    ----------
    field : str, default is Undefined, optional
        For the spread placement strategy, valid values are instanceId (or host,
        which has the same effect), or any platform or custom attribute that is applied to a container instance.
        For the binpack type, valid values are memory and cpu. For the random type, this attribute is not
        needed. For more information, see Placement Strategy.
    $type : str, default is Undefined, optional
        Type of placement strategy. Must be one of: binpack, random, or spread
    """


    field?: str

    $type?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderPlacementConstraintsItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider placement constraints items0

    Attributes
    ----------
    expression : str, default is Undefined, optional
        Cluster Query Language expression to apply to the constraint. Does not need to be specified for the distinctInstance type. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.
    $type : str, default is Undefined, optional
        Type of constraint. The only valid values at this time are memberOf and distinctInstance.
    """


    expression?: str

    $type?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider service connect configuration items0

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Specifies whether to use Service Connect with this service.
    logConfiguration : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0LogConfigurationItems0], default is Undefined, optional
        The log configuration for the container. See below.
    namespace : str, default is Undefined, optional
        The namespace name or ARN of the aws_service_discovery_http_namespace for use with Service Connect.
    service : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0], default is Undefined, optional
        The list of Service Connect service objects. See below.
    """


    enabled?: bool

    logConfiguration?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0LogConfigurationItems0]

    namespace?: str

    service?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0]


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0LogConfigurationItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider service connect configuration items0 log configuration items0

    Attributes
    ----------
    logDriver : str, default is Undefined, optional
        The log driver to use for the container.
    options : {str:str}, default is Undefined, optional
        The configuration options to send to the log driver.
    secretOption : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0LogConfigurationItems0SecretOptionItems0], default is Undefined, optional
        The secrets to pass to the log configuration. See below.
    """


    logDriver?: str

    options?: {str:str}

    secretOption?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0LogConfigurationItems0SecretOptionItems0]


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0LogConfigurationItems0SecretOptionItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider service connect configuration items0 log configuration items0 secret option items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of the secret.
    valueFrom : str, default is Undefined, optional
        The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.
    """


    name?: str

    valueFrom?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider service connect configuration items0 service items0

    Attributes
    ----------
    clientAlias : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0ClientAliasItems0], default is Undefined, optional
        The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
    discoveryName : str, default is Undefined, optional
        The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
    ingressPortOverride : float, default is Undefined, optional
        The port number for the Service Connect proxy to listen on.
    portName : str, default is Undefined, optional
        The name of one of the portMappings from all the containers in the task definition of this Amazon ECS service.
    timeout : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0TimeoutItems0], default is Undefined, optional
        Configuration timeouts for Service Connect
    tls : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0], default is Undefined, optional
        The configuration for enabling Transport Layer Security (TLS)
    """


    clientAlias?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0ClientAliasItems0]

    discoveryName?: str

    ingressPortOverride?: float

    portName?: str

    timeout?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0TimeoutItems0]

    tls?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0]


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0ClientAliasItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider service connect configuration items0 service items0 client alias items0

    Attributes
    ----------
    dnsName : str, default is Undefined, optional
        The name that you use in the applications of client tasks to connect to this service.
    port : float, default is Undefined, optional
        The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
    """


    dnsName?: str

    port?: float


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider service connect configuration items0 service items0 TLS items0

    Attributes
    ----------
    issuerCertAuthority : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0IssuerCertAuthorityItems0], default is Undefined, optional
        The details of the certificate authority which will issue the certificate.
    kmsKey : str, default is Undefined, optional
        The KMS key used to encrypt the private key in Secrets Manager.
    roleArn : str, default is Undefined, optional
        The ARN of the IAM Role that's associated with the Service Connect TLS.
    """


    issuerCertAuthority?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0IssuerCertAuthorityItems0]

    kmsKey?: str

    roleArn?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0IssuerCertAuthorityItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider service connect configuration items0 service items0 TLS items0 issuer cert authority items0

    Attributes
    ----------
    awsPcaAuthorityArn : str, default is Undefined, optional
        The ARN of the aws_acmpca_certificate_authority used to create the TLS Certificates.
    """


    awsPcaAuthorityArn?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceConnectConfigurationItems0ServiceItems0TimeoutItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider service connect configuration items0 service items0 timeout items0

    Attributes
    ----------
    idleTimeoutSeconds : float, default is Undefined, optional
        The amount of time in seconds a connection will stay active while idle. A value of 0 can be set to disable idleTimeout.
    perRequestTimeoutSeconds : float, default is Undefined, optional
        The amount of time in seconds for the upstream to respond with a complete response per request. A value of 0 can be set to disable perRequestTimeout. Can only be set when appProtocol isn't TCP.
    """


    idleTimeoutSeconds?: float

    perRequestTimeoutSeconds?: float


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderServiceRegistriesItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider service registries items0

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name value, already specified in the task definition, to be used for your service discovery service.
    containerPort : float, default is Undefined, optional
        Port value, already specified in the task definition, to be used for your service discovery service.
    port : float, default is Undefined, optional
        Port value used if your Service Discovery service specified an SRV record.
    registryArn : str, default is Undefined, optional
        ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(aws_service_discovery_service). For more information, see Service
    """


    containerName?: str

    containerPort?: float

    port?: float

    registryArn?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionRef:
    r"""
    Reference to a TaskDefinition in ecs to populate taskDefinition.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionRefPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionSelector:
    r"""
    Selector for a TaskDefinition in ecs to populate taskDefinition.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderTaskDefinitionSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderVolumeConfiguration:
    r"""
    Configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume. See below.

    Attributes
    ----------
    managedEbsVolume : EcsAwsUpboundIoV1beta1ServiceSpecForProviderVolumeConfigurationManagedEbsVolume, default is Undefined, optional
        managed ebs volume
    name : str, default is Undefined, optional
        Name of the volume.
    """


    managedEbsVolume?: EcsAwsUpboundIoV1beta1ServiceSpecForProviderVolumeConfigurationManagedEbsVolume

    name?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderVolumeConfigurationManagedEbsVolume:
    r"""
    Configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. See below.

    Attributes
    ----------
    encrypted : bool, default is Undefined, optional
        Whether the volume should be encrypted. Default value is true.
    fileSystemType : str, default is Undefined, optional
        Linux filesystem type for the volume. For volumes created from a snapshot, same filesystem type must be specified that the volume was using when the snapshot was created. Valid values are ext3, ext4, xfs. Default value is xfs.
    iops : float, default is Undefined, optional
        Number of I/O operations per second (IOPS).
    kmsKeyId : str, default is Undefined, optional
        Amazon Resource Name (ARN) identifier of the Amazon Web Services Key Management Service key to use for Amazon EBS encryption.
    roleArn : str, default is Undefined, optional
        Amazon ECS infrastructure IAM role that is used to manage your Amazon Web Services infrastructure. Recommended using the Amazon ECS-managed AmazonECSInfrastructureRolePolicyForVolumes IAM policy with this role.
    sizeInGb : float, default is Undefined, optional
        Size of the volume in GiB. You must specify either a size_in_gb or a snapshot_id. You can optionally specify a volume size greater than or equal to the snapshot size.
    snapshotId : str, default is Undefined, optional
        Snapshot that Amazon ECS uses to create the volume. You must specify either a size_in_gb or a snapshot_id.
    tagSpecifications : [EcsAwsUpboundIoV1beta1ServiceSpecForProviderVolumeConfigurationManagedEbsVolumeTagSpecificationsItems0], default is Undefined, optional
        The tags to apply to the volume. See below.
    throughput : str, default is Undefined, optional
        Throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s.
    volumeType : str, default is Undefined, optional
        Volume type.
    """


    encrypted?: bool

    fileSystemType?: str

    iops?: float

    kmsKeyId?: str

    roleArn?: str

    sizeInGb?: float

    snapshotId?: str

    tagSpecifications?: [EcsAwsUpboundIoV1beta1ServiceSpecForProviderVolumeConfigurationManagedEbsVolumeTagSpecificationsItems0]

    throughput?: str

    volumeType?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderVolumeConfigurationManagedEbsVolumeTagSpecificationsItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider volume configuration managed ebs volume tag specifications items0

    Attributes
    ----------
    propagateTags : str, default is Undefined, optional
        Determines whether to propagate the tags from the task definition to the Amazon EBS volume.
    resourceType : str, default is Undefined, optional
        The type of volume resource. Valid values, volume.
    tags : {str:str}, default is Undefined, optional
        The tags applied to this Amazon EBS volume. AmazonECSCreated and AmazonECSManaged are reserved tags that can't be used.
    """


    propagateTags?: str

    resourceType?: str

    tags?: {str:str}


schema EcsAwsUpboundIoV1beta1ServiceSpecForProviderVpcLatticeConfigurationsItems0:
    r"""
    ecs aws upbound io v1beta1 service spec for provider vpc lattice configurations items0

    Attributes
    ----------
    portName : str, default is Undefined, optional
        The name of the port for a target group associated with the VPC Lattice configuration.
    roleArn : str, default is Undefined, optional
        The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure.
    targetGroupArn : str, default is Undefined, optional
        The full ARN of the target group or groups associated with the VPC Lattice configuration.
    """


    portName?: str

    roleArn?: str

    targetGroupArn?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    alarms : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderAlarmsItems0], default is Undefined, optional
        Information about the CloudWatch alarms. See below.
    availabilityZoneRebalancing : str, default is Undefined, optional
        ECS automatically redistributes tasks within a service across Availability Zones (AZs) to mitigate the risk of impaired application availability due to underlying infrastructure failures and task lifecycle activities. The valid values are ENABLED and DISABLED. Defaults to DISABLED.
    capacityProviderStrategy : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderCapacityProviderStrategyItems0], default is Undefined, optional
        Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if force_new_deployment = true and not changing from 0 capacity_provider_strategy blocks to greater than 0, or vice versa. See below. Conflicts with launch_type.
    cluster : str, default is Undefined, optional
        Name of an ECS cluster.
    clusterRef : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterRef, default is Undefined, optional
        cluster ref
    clusterSelector : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterSelector, default is Undefined, optional
        cluster selector
    deploymentCircuitBreaker : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderDeploymentCircuitBreakerItems0], default is Undefined, optional
        Configuration block for deployment circuit breaker. See below.
    deploymentController : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderDeploymentControllerItems0], default is Undefined, optional
        Configuration block for deployment controller configuration. See below.
    deploymentMaximumPercent : float, default is Undefined, optional
        Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the DAEMON scheduling strategy.
    deploymentMinimumHealthyPercent : float, default is Undefined, optional
        Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
    desiredCount : float, default is Undefined, optional
        Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the DAEMON scheduling strategy.
    enableEcsManagedTags : bool, default is Undefined, optional
        Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
    enableExecuteCommand : bool, default is Undefined, optional
        Specifies whether to enable Amazon ECS Exec for the tasks within the service.
    forceDelete : bool, default is Undefined, optional
        Enable to delete a service even if it wasn't scaled down to zero tasks. It's only necessary to use this if the service uses the REPLICA scheduling strategy.
    forceNewDeployment : bool, default is Undefined, optional
        Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., myimage:latest), roll Fargate tasks onto a newer platform version, or immediately deploy ordered_placement_strategy and placement_constraints updates.
    healthCheckGracePeriodSeconds : float, default is Undefined, optional
        Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
    iamRole : str, default is Undefined, optional
        ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the awsvpc network mode. If using awsvpc network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
    iamRoleRef : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleRef, default is Undefined, optional
        iam role ref
    iamRoleSelector : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleSelector, default is Undefined, optional
        iam role selector
    launchType : str, default is Undefined, optional
        Launch type on which to run your service. The valid values are EC2, FARGATE, and EXTERNAL. Defaults to EC2. Conflicts with capacity_provider_strategy.
    loadBalancer : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0], default is Undefined, optional
        Configuration block for load balancers. See below.
    networkConfiguration : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0], default is Undefined, optional
        Network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
    orderedPlacementStrategy : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderOrderedPlacementStrategyItems0], default is Undefined, optional
        Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. The maximum number of ordered_placement_strategy blocks is 5. See below.
    placementConstraints : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderPlacementConstraintsItems0], default is Undefined, optional
        Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. Maximum number of placement_constraints is 10. See below.
    platformVersion : str, default is Undefined, optional
        Platform version on which to run your service. Only applicable for launch_type set to FARGATE. Defaults to LATEST. More information about Fargate platform versions can be found in the AWS ECS User Guide.
    propagateTags : str, default is Undefined, optional
        Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are SERVICE and TASK_DEFINITION.
    schedulingStrategy : str, default is Undefined, optional
        Scheduling strategy to use for the service. The valid values are REPLICA and DAEMON. Defaults to REPLICA. Note that Tasks using the Fargate launch type or the .
    serviceConnectConfiguration : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0], default is Undefined, optional
        The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.
    serviceRegistries : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceRegistriesItems0], default is Undefined, optional
        Service discovery registries for the service. The maximum number of service_registries blocks is 1. See below.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    taskDefinition : str, default is Undefined, optional
        Family and revision (family:revision) or full ARN of the task definition that you want to run in your service. Required unless using the EXTERNAL deployment controller. If a revision is not specified, the latest ACTIVE revision is used.
    taskDefinitionRef : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionRef, default is Undefined, optional
        task definition ref
    taskDefinitionSelector : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionSelector, default is Undefined, optional
        task definition selector
    triggers : {str:str}, default is Undefined, optional
        Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with plantimestamp(). See example above.
    volumeConfiguration : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVolumeConfiguration, default is Undefined, optional
        volume configuration
    vpcLatticeConfigurations : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVpcLatticeConfigurationsItems0], default is Undefined, optional
        The VPC Lattice configuration for your service that allows Lattice to connect, secure, and monitor your service across multiple accounts and VPCs. See below.
    waitForSteadyState : bool, default is Undefined, optional
        Default false.
    """


    alarms?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderAlarmsItems0]

    availabilityZoneRebalancing?: str

    capacityProviderStrategy?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderCapacityProviderStrategyItems0]

    cluster?: str

    clusterRef?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterRef

    clusterSelector?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterSelector

    deploymentCircuitBreaker?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderDeploymentCircuitBreakerItems0]

    deploymentController?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderDeploymentControllerItems0]

    deploymentMaximumPercent?: float

    deploymentMinimumHealthyPercent?: float

    desiredCount?: float

    enableEcsManagedTags?: bool

    enableExecuteCommand?: bool

    forceDelete?: bool

    forceNewDeployment?: bool

    healthCheckGracePeriodSeconds?: float

    iamRole?: str

    iamRoleRef?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleRef

    iamRoleSelector?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleSelector

    launchType?: str

    loadBalancer?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0]

    networkConfiguration?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0]

    orderedPlacementStrategy?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderOrderedPlacementStrategyItems0]

    placementConstraints?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderPlacementConstraintsItems0]

    platformVersion?: str

    propagateTags?: str

    schedulingStrategy?: str

    serviceConnectConfiguration?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0]

    serviceRegistries?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceRegistriesItems0]

    tags?: {str:str}

    taskDefinition?: str

    taskDefinitionRef?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionRef

    taskDefinitionSelector?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionSelector

    triggers?: {str:str}

    volumeConfiguration?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVolumeConfiguration

    vpcLatticeConfigurations?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVpcLatticeConfigurationsItems0]

    waitForSteadyState?: bool


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderAlarmsItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider alarms items0

    Attributes
    ----------
    alarmNames : [str], default is Undefined, optional
        One or more CloudWatch alarm names.
    enable : bool, default is Undefined, optional
        Determines whether to use the CloudWatch alarm option in the service deployment process.
    rollback : bool, default is Undefined, optional
        Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
    """


    alarmNames?: [str]

    enable?: bool

    rollback?: bool


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderCapacityProviderStrategyItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider capacity provider strategy items0

    Attributes
    ----------
    base : float, default is Undefined, optional
        Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
    capacityProvider : str, default is Undefined, optional
        Short name of the capacity provider.
    weight : float, default is Undefined, optional
        Relative percentage of the total number of launched tasks that should use the specified capacity provider.
    """


    base?: float

    capacityProvider?: str

    weight?: float


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterRef:
    r"""
    Reference to a Cluster in ecs to populate cluster.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterRefPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterSelector:
    r"""
    Selector for a Cluster in ecs to populate cluster.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderClusterSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderDeploymentCircuitBreakerItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider deployment circuit breaker items0

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Whether to enable the deployment circuit breaker logic for the service.
    rollback : bool, default is Undefined, optional
        Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
    """


    enable?: bool

    rollback?: bool


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderDeploymentControllerItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider deployment controller items0

    Attributes
    ----------
    $type : str, default is Undefined, optional
        Type of deployment controller. Valid values: CODE_DEPLOY, ECS, EXTERNAL. Default: ECS.
    """


    $type?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleRef:
    r"""
    Reference to a Role in iam to populate iamRole.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleRefPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleSelector:
    r"""
    Selector for a Role in iam to populate iamRole.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderIamRoleSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider load balancer items0

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Name of the container to associate with the load balancer (as it appears in a container definition).
    containerPort : float, default is Undefined, optional
        Port on the container to associate with the load balancer.
    elbName : str, default is Undefined, optional
        Name of the ELB (Classic) to associate with the service.
    targetGroupArn : str, default is Undefined, optional
        ARN of the Load Balancer target group to associate with the service.
    targetGroupArnRef : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnRef, default is Undefined, optional
        target group arn ref
    targetGroupArnSelector : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnSelector, default is Undefined, optional
        target group arn selector
    """


    containerName?: str

    containerPort?: float

    elbName?: str

    targetGroupArn?: str

    targetGroupArnRef?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnRef

    targetGroupArnSelector?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnSelector


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnRef:
    r"""
    Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnRefPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnSelector:
    r"""
    Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderLoadBalancerItems0TargetGroupArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider network configuration items0

    Attributes
    ----------
    assignPublicIp : bool, default is Undefined, optional
        Assign a public IP address to the ENI (Fargate launch type only). Valid values are true or false. Default false.
    securityGroupRefs : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroups.
    securityGroupSelector : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupSelector, default is Undefined, optional
        security group selector
    securityGroups : [str], default is Undefined, optional
        Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
    subnetRefs : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnets.
    subnetSelector : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetSelector, default is Undefined, optional
        subnet selector
    subnets : [str], default is Undefined, optional
        Subnets associated with the task or service.
    """


    assignPublicIp?: bool

    securityGroupRefs?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupRefsItems0]

    securityGroupSelector?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupSelector

    securityGroups?: [str]

    subnetRefs?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetRefsItems0]

    subnetSelector?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetSelector

    subnets?: [str]


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupRefsItems0Policy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroups.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SecurityGroupSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetRefsItems0Policy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnets.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderNetworkConfigurationItems0SubnetSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderOrderedPlacementStrategyItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider ordered placement strategy items0

    Attributes
    ----------
    field : str, default is Undefined, optional
        For the spread placement strategy, valid values are instanceId (or host,
        which has the same effect), or any platform or custom attribute that is applied to a container instance.
        For the binpack type, valid values are memory and cpu. For the random type, this attribute is not
        needed. For more information, see Placement Strategy.
    $type : str, default is Undefined, optional
        Type of placement strategy. Must be one of: binpack, random, or spread
    """


    field?: str

    $type?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderPlacementConstraintsItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider placement constraints items0

    Attributes
    ----------
    expression : str, default is Undefined, optional
        Cluster Query Language expression to apply to the constraint. Does not need to be specified for the distinctInstance type. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.
    $type : str, default is Undefined, optional
        Type of constraint. The only valid values at this time are memberOf and distinctInstance.
    """


    expression?: str

    $type?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider service connect configuration items0

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Specifies whether to use Service Connect with this service.
    logConfiguration : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0LogConfigurationItems0], default is Undefined, optional
        The log configuration for the container. See below.
    namespace : str, default is Undefined, optional
        The namespace name or ARN of the aws_service_discovery_http_namespace for use with Service Connect.
    service : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0], default is Undefined, optional
        The list of Service Connect service objects. See below.
    """


    enabled?: bool

    logConfiguration?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0LogConfigurationItems0]

    namespace?: str

    service?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0]


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0LogConfigurationItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider service connect configuration items0 log configuration items0

    Attributes
    ----------
    logDriver : str, default is Undefined, optional
        The log driver to use for the container.
    options : {str:str}, default is Undefined, optional
        The configuration options to send to the log driver.
    secretOption : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0LogConfigurationItems0SecretOptionItems0], default is Undefined, optional
        The secrets to pass to the log configuration. See below.
    """


    logDriver?: str

    options?: {str:str}

    secretOption?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0LogConfigurationItems0SecretOptionItems0]


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0LogConfigurationItems0SecretOptionItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider service connect configuration items0 log configuration items0 secret option items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of the secret.
    valueFrom : str, default is Undefined, optional
        The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.
    """


    name?: str

    valueFrom?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider service connect configuration items0 service items0

    Attributes
    ----------
    clientAlias : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0ClientAliasItems0], default is Undefined, optional
        The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
    discoveryName : str, default is Undefined, optional
        The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
    ingressPortOverride : float, default is Undefined, optional
        The port number for the Service Connect proxy to listen on.
    portName : str, default is Undefined, optional
        The name of one of the portMappings from all the containers in the task definition of this Amazon ECS service.
    timeout : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0TimeoutItems0], default is Undefined, optional
        Configuration timeouts for Service Connect
    tls : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0], default is Undefined, optional
        The configuration for enabling Transport Layer Security (TLS)
    """


    clientAlias?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0ClientAliasItems0]

    discoveryName?: str

    ingressPortOverride?: float

    portName?: str

    timeout?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0TimeoutItems0]

    tls?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0]


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0ClientAliasItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider service connect configuration items0 service items0 client alias items0

    Attributes
    ----------
    dnsName : str, default is Undefined, optional
        The name that you use in the applications of client tasks to connect to this service.
    port : float, default is Undefined, optional
        The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
    """


    dnsName?: str

    port?: float


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider service connect configuration items0 service items0 TLS items0

    Attributes
    ----------
    issuerCertAuthority : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0IssuerCertAuthorityItems0], default is Undefined, optional
        The details of the certificate authority which will issue the certificate.
    kmsKey : str, default is Undefined, optional
        The KMS key used to encrypt the private key in Secrets Manager.
    roleArn : str, default is Undefined, optional
        The ARN of the IAM Role that's associated with the Service Connect TLS.
    """


    issuerCertAuthority?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0IssuerCertAuthorityItems0]

    kmsKey?: str

    roleArn?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0IssuerCertAuthorityItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider service connect configuration items0 service items0 TLS items0 issuer cert authority items0

    Attributes
    ----------
    awsPcaAuthorityArn : str, default is Undefined, optional
        The ARN of the aws_acmpca_certificate_authority used to create the TLS Certificates.
    """


    awsPcaAuthorityArn?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceConnectConfigurationItems0ServiceItems0TimeoutItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider service connect configuration items0 service items0 timeout items0

    Attributes
    ----------
    idleTimeoutSeconds : float, default is Undefined, optional
        The amount of time in seconds a connection will stay active while idle. A value of 0 can be set to disable idleTimeout.
    perRequestTimeoutSeconds : float, default is Undefined, optional
        The amount of time in seconds for the upstream to respond with a complete response per request. A value of 0 can be set to disable perRequestTimeout. Can only be set when appProtocol isn't TCP.
    """


    idleTimeoutSeconds?: float

    perRequestTimeoutSeconds?: float


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderServiceRegistriesItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider service registries items0

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name value, already specified in the task definition, to be used for your service discovery service.
    containerPort : float, default is Undefined, optional
        Port value, already specified in the task definition, to be used for your service discovery service.
    port : float, default is Undefined, optional
        Port value used if your Service Discovery service specified an SRV record.
    registryArn : str, default is Undefined, optional
        ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(aws_service_discovery_service). For more information, see Service
    """


    containerName?: str

    containerPort?: float

    port?: float

    registryArn?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionRef:
    r"""
    Reference to a TaskDefinition in ecs to populate taskDefinition.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionRefPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionSelector:
    r"""
    Selector for a TaskDefinition in ecs to populate taskDefinition.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionSelectorPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderTaskDefinitionSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVolumeConfiguration:
    r"""
    Configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume. See below.

    Attributes
    ----------
    managedEbsVolume : EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVolumeConfigurationManagedEbsVolume, default is Undefined, optional
        managed ebs volume
    name : str, default is Undefined, optional
        Name of the volume.
    """


    managedEbsVolume?: EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVolumeConfigurationManagedEbsVolume

    name?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVolumeConfigurationManagedEbsVolume:
    r"""
    Configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. See below.

    Attributes
    ----------
    encrypted : bool, default is Undefined, optional
        Whether the volume should be encrypted. Default value is true.
    fileSystemType : str, default is Undefined, optional
        Linux filesystem type for the volume. For volumes created from a snapshot, same filesystem type must be specified that the volume was using when the snapshot was created. Valid values are ext3, ext4, xfs. Default value is xfs.
    iops : float, default is Undefined, optional
        Number of I/O operations per second (IOPS).
    kmsKeyId : str, default is Undefined, optional
        Amazon Resource Name (ARN) identifier of the Amazon Web Services Key Management Service key to use for Amazon EBS encryption.
    roleArn : str, default is Undefined, optional
        Amazon ECS infrastructure IAM role that is used to manage your Amazon Web Services infrastructure. Recommended using the Amazon ECS-managed AmazonECSInfrastructureRolePolicyForVolumes IAM policy with this role.
    sizeInGb : float, default is Undefined, optional
        Size of the volume in GiB. You must specify either a size_in_gb or a snapshot_id. You can optionally specify a volume size greater than or equal to the snapshot size.
    snapshotId : str, default is Undefined, optional
        Snapshot that Amazon ECS uses to create the volume. You must specify either a size_in_gb or a snapshot_id.
    tagSpecifications : [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVolumeConfigurationManagedEbsVolumeTagSpecificationsItems0], default is Undefined, optional
        The tags to apply to the volume. See below.
    throughput : str, default is Undefined, optional
        Throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s.
    volumeType : str, default is Undefined, optional
        Volume type.
    """


    encrypted?: bool

    fileSystemType?: str

    iops?: float

    kmsKeyId?: str

    roleArn?: str

    sizeInGb?: float

    snapshotId?: str

    tagSpecifications?: [EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVolumeConfigurationManagedEbsVolumeTagSpecificationsItems0]

    throughput?: str

    volumeType?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVolumeConfigurationManagedEbsVolumeTagSpecificationsItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider volume configuration managed ebs volume tag specifications items0

    Attributes
    ----------
    propagateTags : str, default is Undefined, optional
        Determines whether to propagate the tags from the task definition to the Amazon EBS volume.
    resourceType : str, default is Undefined, optional
        The type of volume resource. Valid values, volume.
    tags : {str:str}, default is Undefined, optional
        The tags applied to this Amazon EBS volume. AmazonECSCreated and AmazonECSManaged are reserved tags that can't be used.
    """


    propagateTags?: str

    resourceType?: str

    tags?: {str:str}


schema EcsAwsUpboundIoV1beta1ServiceSpecInitProviderVpcLatticeConfigurationsItems0:
    r"""
    ecs aws upbound io v1beta1 service spec init provider vpc lattice configurations items0

    Attributes
    ----------
    portName : str, default is Undefined, optional
        The name of the port for a target group associated with the VPC Lattice configuration.
    roleArn : str, default is Undefined, optional
        The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure.
    targetGroupArn : str, default is Undefined, optional
        The full ARN of the target group or groups associated with the VPC Lattice configuration.
    """


    portName?: str

    roleArn?: str

    targetGroupArn?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecProviderConfigRefPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsToConfigRef

    metadata?: EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsToMetadata

    name: str


schema EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsToConfigRefPolicy


schema EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema EcsAwsUpboundIoV1beta1ServiceSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema EcsAwsUpboundIoV1beta1ServiceSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema EcsAwsUpboundIoV1beta1ServiceStatus:
    r"""
    ServiceStatus defines the observed state of Service.

    Attributes
    ----------
    atProvider : EcsAwsUpboundIoV1beta1ServiceStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [EcsAwsUpboundIoV1beta1ServiceStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: EcsAwsUpboundIoV1beta1ServiceStatusAtProvider

    conditions?: [EcsAwsUpboundIoV1beta1ServiceStatusConditionsItems0]

    observedGeneration?: int


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProvider:
    r"""
    ecs aws upbound io v1beta1 service status at provider

    Attributes
    ----------
    alarms : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderAlarmsItems0], default is Undefined, optional
        Information about the CloudWatch alarms. See below.
    availabilityZoneRebalancing : str, default is Undefined, optional
        ECS automatically redistributes tasks within a service across Availability Zones (AZs) to mitigate the risk of impaired application availability due to underlying infrastructure failures and task lifecycle activities. The valid values are ENABLED and DISABLED. Defaults to DISABLED.
    capacityProviderStrategy : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderCapacityProviderStrategyItems0], default is Undefined, optional
        Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if force_new_deployment = true and not changing from 0 capacity_provider_strategy blocks to greater than 0, or vice versa. See below. Conflicts with launch_type.
    cluster : str, default is Undefined, optional
        Name of an ECS cluster.
    deploymentCircuitBreaker : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderDeploymentCircuitBreakerItems0], default is Undefined, optional
        Configuration block for deployment circuit breaker. See below.
    deploymentController : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderDeploymentControllerItems0], default is Undefined, optional
        Configuration block for deployment controller configuration. See below.
    deploymentMaximumPercent : float, default is Undefined, optional
        Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the DAEMON scheduling strategy.
    deploymentMinimumHealthyPercent : float, default is Undefined, optional
        Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
    desiredCount : float, default is Undefined, optional
        Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the DAEMON scheduling strategy.
    enableEcsManagedTags : bool, default is Undefined, optional
        Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
    enableExecuteCommand : bool, default is Undefined, optional
        Specifies whether to enable Amazon ECS Exec for the tasks within the service.
    forceDelete : bool, default is Undefined, optional
        Enable to delete a service even if it wasn't scaled down to zero tasks. It's only necessary to use this if the service uses the REPLICA scheduling strategy.
    forceNewDeployment : bool, default is Undefined, optional
        Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., myimage:latest), roll Fargate tasks onto a newer platform version, or immediately deploy ordered_placement_strategy and placement_constraints updates.
    healthCheckGracePeriodSeconds : float, default is Undefined, optional
        Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
    iamRole : str, default is Undefined, optional
        ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the awsvpc network mode. If using awsvpc network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
    id : str, default is Undefined, optional
        ARN that identifies the service.
    launchType : str, default is Undefined, optional
        Launch type on which to run your service. The valid values are EC2, FARGATE, and EXTERNAL. Defaults to EC2. Conflicts with capacity_provider_strategy.
    loadBalancer : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderLoadBalancerItems0], default is Undefined, optional
        Configuration block for load balancers. See below.
    networkConfiguration : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderNetworkConfigurationItems0], default is Undefined, optional
        Network configuration for the service. This parameter is required for task definitions that use the awsvpc network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
    orderedPlacementStrategy : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderOrderedPlacementStrategyItems0], default is Undefined, optional
        Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. The maximum number of ordered_placement_strategy blocks is 5. See below.
    placementConstraints : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderPlacementConstraintsItems0], default is Undefined, optional
        Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. Maximum number of placement_constraints is 10. See below.
    platformVersion : str, default is Undefined, optional
        Platform version on which to run your service. Only applicable for launch_type set to FARGATE. Defaults to LATEST. More information about Fargate platform versions can be found in the AWS ECS User Guide.
    propagateTags : str, default is Undefined, optional
        Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are SERVICE and TASK_DEFINITION.
    schedulingStrategy : str, default is Undefined, optional
        Scheduling strategy to use for the service. The valid values are REPLICA and DAEMON. Defaults to REPLICA. Note that Tasks using the Fargate launch type or the .
    serviceConnectConfiguration : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0], default is Undefined, optional
        The ECS Service Connect configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace. See below.
    serviceRegistries : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceRegistriesItems0], default is Undefined, optional
        Service discovery registries for the service. The maximum number of service_registries blocks is 1. See below.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    taskDefinition : str, default is Undefined, optional
        Family and revision (family:revision) or full ARN of the task definition that you want to run in your service. Required unless using the EXTERNAL deployment controller. If a revision is not specified, the latest ACTIVE revision is used.
    triggers : {str:str}, default is Undefined, optional
        Map of arbitrary keys and values that, when changed, will trigger an in-place update (redeployment). Useful with plantimestamp(). See example above.
    volumeConfiguration : EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVolumeConfiguration, default is Undefined, optional
        volume configuration
    vpcLatticeConfigurations : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVpcLatticeConfigurationsItems0], default is Undefined, optional
        The VPC Lattice configuration for your service that allows Lattice to connect, secure, and monitor your service across multiple accounts and VPCs. See below.
    waitForSteadyState : bool, default is Undefined, optional
        Default false.
    """


    alarms?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderAlarmsItems0]

    availabilityZoneRebalancing?: str

    capacityProviderStrategy?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderCapacityProviderStrategyItems0]

    cluster?: str

    deploymentCircuitBreaker?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderDeploymentCircuitBreakerItems0]

    deploymentController?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderDeploymentControllerItems0]

    deploymentMaximumPercent?: float

    deploymentMinimumHealthyPercent?: float

    desiredCount?: float

    enableEcsManagedTags?: bool

    enableExecuteCommand?: bool

    forceDelete?: bool

    forceNewDeployment?: bool

    healthCheckGracePeriodSeconds?: float

    iamRole?: str

    id?: str

    launchType?: str

    loadBalancer?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderLoadBalancerItems0]

    networkConfiguration?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderNetworkConfigurationItems0]

    orderedPlacementStrategy?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderOrderedPlacementStrategyItems0]

    placementConstraints?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderPlacementConstraintsItems0]

    platformVersion?: str

    propagateTags?: str

    schedulingStrategy?: str

    serviceConnectConfiguration?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0]

    serviceRegistries?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceRegistriesItems0]

    tags?: {str:str}

    tagsAll?: {str:str}

    taskDefinition?: str

    triggers?: {str:str}

    volumeConfiguration?: EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVolumeConfiguration

    vpcLatticeConfigurations?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVpcLatticeConfigurationsItems0]

    waitForSteadyState?: bool


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderAlarmsItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider alarms items0

    Attributes
    ----------
    alarmNames : [str], default is Undefined, optional
        One or more CloudWatch alarm names.
    enable : bool, default is Undefined, optional
        Determines whether to use the CloudWatch alarm option in the service deployment process.
    rollback : bool, default is Undefined, optional
        Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
    """


    alarmNames?: [str]

    enable?: bool

    rollback?: bool


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderCapacityProviderStrategyItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider capacity provider strategy items0

    Attributes
    ----------
    base : float, default is Undefined, optional
        Number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
    capacityProvider : str, default is Undefined, optional
        Short name of the capacity provider.
    weight : float, default is Undefined, optional
        Relative percentage of the total number of launched tasks that should use the specified capacity provider.
    """


    base?: float

    capacityProvider?: str

    weight?: float


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderDeploymentCircuitBreakerItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider deployment circuit breaker items0

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Whether to enable the deployment circuit breaker logic for the service.
    rollback : bool, default is Undefined, optional
        Whether to enable Amazon ECS to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
    """


    enable?: bool

    rollback?: bool


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderDeploymentControllerItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider deployment controller items0

    Attributes
    ----------
    $type : str, default is Undefined, optional
        Type of deployment controller. Valid values: CODE_DEPLOY, ECS, EXTERNAL. Default: ECS.
    """


    $type?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderLoadBalancerItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider load balancer items0

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Name of the container to associate with the load balancer (as it appears in a container definition).
    containerPort : float, default is Undefined, optional
        Port on the container to associate with the load balancer.
    elbName : str, default is Undefined, optional
        Name of the ELB (Classic) to associate with the service.
    targetGroupArn : str, default is Undefined, optional
        ARN of the Load Balancer target group to associate with the service.
    """


    containerName?: str

    containerPort?: float

    elbName?: str

    targetGroupArn?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderNetworkConfigurationItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider network configuration items0

    Attributes
    ----------
    assignPublicIp : bool, default is Undefined, optional
        Assign a public IP address to the ENI (Fargate launch type only). Valid values are true or false. Default false.
    securityGroups : [str], default is Undefined, optional
        Security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
    subnets : [str], default is Undefined, optional
        Subnets associated with the task or service.
    """


    assignPublicIp?: bool

    securityGroups?: [str]

    subnets?: [str]


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderOrderedPlacementStrategyItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider ordered placement strategy items0

    Attributes
    ----------
    field : str, default is Undefined, optional
        For the spread placement strategy, valid values are instanceId (or host,
        which has the same effect), or any platform or custom attribute that is applied to a container instance.
        For the binpack type, valid values are memory and cpu. For the random type, this attribute is not
        needed. For more information, see Placement Strategy.
    $type : str, default is Undefined, optional
        Type of placement strategy. Must be one of: binpack, random, or spread
    """


    field?: str

    $type?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderPlacementConstraintsItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider placement constraints items0

    Attributes
    ----------
    expression : str, default is Undefined, optional
        Cluster Query Language expression to apply to the constraint. Does not need to be specified for the distinctInstance type. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.
    $type : str, default is Undefined, optional
        Type of constraint. The only valid values at this time are memberOf and distinctInstance.
    """


    expression?: str

    $type?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider service connect configuration items0

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Specifies whether to use Service Connect with this service.
    logConfiguration : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0LogConfigurationItems0], default is Undefined, optional
        The log configuration for the container. See below.
    namespace : str, default is Undefined, optional
        The namespace name or ARN of the aws_service_discovery_http_namespace for use with Service Connect.
    service : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0], default is Undefined, optional
        The list of Service Connect service objects. See below.
    """


    enabled?: bool

    logConfiguration?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0LogConfigurationItems0]

    namespace?: str

    service?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0]


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0LogConfigurationItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider service connect configuration items0 log configuration items0

    Attributes
    ----------
    logDriver : str, default is Undefined, optional
        The log driver to use for the container.
    options : {str:str}, default is Undefined, optional
        The configuration options to send to the log driver.
    secretOption : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0LogConfigurationItems0SecretOptionItems0], default is Undefined, optional
        The secrets to pass to the log configuration. See below.
    """


    logDriver?: str

    options?: {str:str}

    secretOption?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0LogConfigurationItems0SecretOptionItems0]


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0LogConfigurationItems0SecretOptionItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider service connect configuration items0 log configuration items0 secret option items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of the secret.
    valueFrom : str, default is Undefined, optional
        The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.
    """


    name?: str

    valueFrom?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider service connect configuration items0 service items0

    Attributes
    ----------
    clientAlias : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0ClientAliasItems0], default is Undefined, optional
        The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1. See below.
    discoveryName : str, default is Undefined, optional
        The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
    ingressPortOverride : float, default is Undefined, optional
        The port number for the Service Connect proxy to listen on.
    portName : str, default is Undefined, optional
        The name of one of the portMappings from all the containers in the task definition of this Amazon ECS service.
    timeout : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0TimeoutItems0], default is Undefined, optional
        Configuration timeouts for Service Connect
    tls : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0], default is Undefined, optional
        The configuration for enabling Transport Layer Security (TLS)
    """


    clientAlias?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0ClientAliasItems0]

    discoveryName?: str

    ingressPortOverride?: float

    portName?: str

    timeout?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0TimeoutItems0]

    tls?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0]


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0ClientAliasItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider service connect configuration items0 service items0 client alias items0

    Attributes
    ----------
    dnsName : str, default is Undefined, optional
        The name that you use in the applications of client tasks to connect to this service.
    port : float, default is Undefined, optional
        The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
    """


    dnsName?: str

    port?: float


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider service connect configuration items0 service items0 TLS items0

    Attributes
    ----------
    issuerCertAuthority : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0IssuerCertAuthorityItems0], default is Undefined, optional
        The details of the certificate authority which will issue the certificate.
    kmsKey : str, default is Undefined, optional
        The KMS key used to encrypt the private key in Secrets Manager.
    roleArn : str, default is Undefined, optional
        The ARN of the IAM Role that's associated with the Service Connect TLS.
    """


    issuerCertAuthority?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0IssuerCertAuthorityItems0]

    kmsKey?: str

    roleArn?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0TLSItems0IssuerCertAuthorityItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider service connect configuration items0 service items0 TLS items0 issuer cert authority items0

    Attributes
    ----------
    awsPcaAuthorityArn : str, default is Undefined, optional
        The ARN of the aws_acmpca_certificate_authority used to create the TLS Certificates.
    """


    awsPcaAuthorityArn?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceConnectConfigurationItems0ServiceItems0TimeoutItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider service connect configuration items0 service items0 timeout items0

    Attributes
    ----------
    idleTimeoutSeconds : float, default is Undefined, optional
        The amount of time in seconds a connection will stay active while idle. A value of 0 can be set to disable idleTimeout.
    perRequestTimeoutSeconds : float, default is Undefined, optional
        The amount of time in seconds for the upstream to respond with a complete response per request. A value of 0 can be set to disable perRequestTimeout. Can only be set when appProtocol isn't TCP.
    """


    idleTimeoutSeconds?: float

    perRequestTimeoutSeconds?: float


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderServiceRegistriesItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider service registries items0

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name value, already specified in the task definition, to be used for your service discovery service.
    containerPort : float, default is Undefined, optional
        Port value, already specified in the task definition, to be used for your service discovery service.
    port : float, default is Undefined, optional
        Port value used if your Service Discovery service specified an SRV record.
    registryArn : str, default is Undefined, optional
        ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(aws_service_discovery_service). For more information, see Service
    """


    containerName?: str

    containerPort?: float

    port?: float

    registryArn?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVolumeConfiguration:
    r"""
    Configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume. See below.

    Attributes
    ----------
    managedEbsVolume : EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVolumeConfigurationManagedEbsVolume, default is Undefined, optional
        managed ebs volume
    name : str, default is Undefined, optional
        Name of the volume.
    """


    managedEbsVolume?: EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVolumeConfigurationManagedEbsVolume

    name?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVolumeConfigurationManagedEbsVolume:
    r"""
    Configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. See below.

    Attributes
    ----------
    encrypted : bool, default is Undefined, optional
        Whether the volume should be encrypted. Default value is true.
    fileSystemType : str, default is Undefined, optional
        Linux filesystem type for the volume. For volumes created from a snapshot, same filesystem type must be specified that the volume was using when the snapshot was created. Valid values are ext3, ext4, xfs. Default value is xfs.
    iops : float, default is Undefined, optional
        Number of I/O operations per second (IOPS).
    kmsKeyId : str, default is Undefined, optional
        Amazon Resource Name (ARN) identifier of the Amazon Web Services Key Management Service key to use for Amazon EBS encryption.
    roleArn : str, default is Undefined, optional
        Amazon ECS infrastructure IAM role that is used to manage your Amazon Web Services infrastructure. Recommended using the Amazon ECS-managed AmazonECSInfrastructureRolePolicyForVolumes IAM policy with this role.
    sizeInGb : float, default is Undefined, optional
        Size of the volume in GiB. You must specify either a size_in_gb or a snapshot_id. You can optionally specify a volume size greater than or equal to the snapshot size.
    snapshotId : str, default is Undefined, optional
        Snapshot that Amazon ECS uses to create the volume. You must specify either a size_in_gb or a snapshot_id.
    tagSpecifications : [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVolumeConfigurationManagedEbsVolumeTagSpecificationsItems0], default is Undefined, optional
        The tags to apply to the volume. See below.
    throughput : str, default is Undefined, optional
        Throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s.
    volumeType : str, default is Undefined, optional
        Volume type.
    """


    encrypted?: bool

    fileSystemType?: str

    iops?: float

    kmsKeyId?: str

    roleArn?: str

    sizeInGb?: float

    snapshotId?: str

    tagSpecifications?: [EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVolumeConfigurationManagedEbsVolumeTagSpecificationsItems0]

    throughput?: str

    volumeType?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVolumeConfigurationManagedEbsVolumeTagSpecificationsItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider volume configuration managed ebs volume tag specifications items0

    Attributes
    ----------
    propagateTags : str, default is Undefined, optional
        Determines whether to propagate the tags from the task definition to the Amazon EBS volume.
    resourceType : str, default is Undefined, optional
        The type of volume resource. Valid values, volume.
    tags : {str:str}, default is Undefined, optional
        The tags applied to this Amazon EBS volume. AmazonECSCreated and AmazonECSManaged are reserved tags that can't be used.
    """


    propagateTags?: str

    resourceType?: str

    tags?: {str:str}


schema EcsAwsUpboundIoV1beta1ServiceStatusAtProviderVpcLatticeConfigurationsItems0:
    r"""
    ecs aws upbound io v1beta1 service status at provider vpc lattice configurations items0

    Attributes
    ----------
    portName : str, default is Undefined, optional
        The name of the port for a target group associated with the VPC Lattice configuration.
    roleArn : str, default is Undefined, optional
        The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure.
    targetGroupArn : str, default is Undefined, optional
        The full ARN of the target group or groups associated with the VPC Lattice configuration.
    """


    portName?: str

    roleArn?: str

    targetGroupArn?: str


schema EcsAwsUpboundIoV1beta1ServiceStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


