"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Permission:
    r"""
    Permission is the Schema for the Permissions API. Creates a Lambda function permission.

    Attributes
    ----------
    apiVersion : str, default is "lambda.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Permission", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : LambdaAwsUpboundIoV1beta1PermissionSpec, default is Undefined, required
        spec
    status : LambdaAwsUpboundIoV1beta1PermissionStatus, default is Undefined, optional
        status
    """


    apiVersion: "lambda.aws.upbound.io/v1beta1" = "lambda.aws.upbound.io/v1beta1"

    kind: "Permission" = "Permission"

    metadata?: v1.ObjectMeta

    spec: LambdaAwsUpboundIoV1beta1PermissionSpec

    status?: LambdaAwsUpboundIoV1beta1PermissionStatus


schema LambdaAwsUpboundIoV1beta1PermissionSpec:
    r"""
    PermissionSpec defines the desired state of Permission

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : LambdaAwsUpboundIoV1beta1PermissionSpecForProvider, default is Undefined, required
        for provider
    initProvider : LambdaAwsUpboundIoV1beta1PermissionSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : LambdaAwsUpboundIoV1beta1PermissionSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : LambdaAwsUpboundIoV1beta1PermissionSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: LambdaAwsUpboundIoV1beta1PermissionSpecForProvider

    initProvider?: LambdaAwsUpboundIoV1beta1PermissionSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: LambdaAwsUpboundIoV1beta1PermissionSpecProviderConfigRef

    publishConnectionDetailsTo?: LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: LambdaAwsUpboundIoV1beta1PermissionSpecWriteConnectionSecretToRef


schema LambdaAwsUpboundIoV1beta1PermissionSpecForProvider:
    r"""
    lambda aws upbound io v1beta1 permission spec for provider

    Attributes
    ----------
    action : str, default is Undefined, optional
        The AWS Lambda action you want to allow in this statement. (e.g., lambda:InvokeFunction)
    eventSourceToken : str, default is Undefined, optional
        The Event Source Token to validate.  Used with Alexa Skills.
    functionName : str, default is Undefined, optional
        Name of the Lambda function whose resource policy you are updating
    functionNameRef : LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameRef, default is Undefined, optional
        function name ref
    functionNameSelector : LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameSelector, default is Undefined, optional
        function name selector
    functionUrlAuthType : str, default is Undefined, optional
        Lambda Function URLs authentication type. Valid values are: AWS_IAM or NONE. Only supported for lambda:InvokeFunctionUrl action.
    principal : str, default is Undefined, optional
        The principal who is getting this permission e.g., s3.amazonaws.com, an AWS account ID, or AWS IAM principal, or AWS service principal such as events.amazonaws.com or sns.amazonaws.com.
    principalOrgId : str, default is Undefined, optional
        The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
    qualifier : str, default is Undefined, optional
        Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., arn:aws:lambda:aws-region:acct-id:function:function-name:2
    qualifierRef : LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierRef, default is Undefined, optional
        qualifier ref
    qualifierSelector : LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierSelector, default is Undefined, optional
        qualifier selector
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    sourceAccount : str, default is Undefined, optional
        This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
    sourceArn : str, default is Undefined, optional
        When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
        Without this, any resource from principal will be granted permission â€“ even if that resource is from another account.
        For S3, this should be the ARN of the S3 Bucket.
        For EventBridge events, this should be the ARN of the EventBridge Rule.
        For API Gateway, this should be the ARN of the API, as described here.
    statementId : str, default is Undefined, optional
        A unique statement identifier.
    statementIdPrefix : str, default is Undefined, optional
        A statement identifier prefix. Conflicts with statement_id.
    """


    action?: str

    eventSourceToken?: str

    functionName?: str

    functionNameRef?: LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameRef

    functionNameSelector?: LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameSelector

    functionUrlAuthType?: str

    principal?: str

    principalOrgId?: str

    qualifier?: str

    qualifierRef?: LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierRef

    qualifierSelector?: LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierSelector

    region: str

    sourceAccount?: str

    sourceArn?: str

    statementId?: str

    statementIdPrefix?: str


schema LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameRef:
    r"""
    Reference to a Function in lambda to populate functionName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameRefPolicy


schema LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameSelector:
    r"""
    Selector for a Function in lambda to populate functionName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameSelectorPolicy


schema LambdaAwsUpboundIoV1beta1PermissionSpecForProviderFunctionNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierRef:
    r"""
    Reference to a Alias in lambda to populate qualifier.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierRefPolicy


schema LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierSelector:
    r"""
    Selector for a Alias in lambda to populate qualifier.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierSelectorPolicy


schema LambdaAwsUpboundIoV1beta1PermissionSpecForProviderQualifierSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1PermissionSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    action : str, default is Undefined, optional
        The AWS Lambda action you want to allow in this statement. (e.g., lambda:InvokeFunction)
    eventSourceToken : str, default is Undefined, optional
        The Event Source Token to validate.  Used with Alexa Skills.
    functionName : str, default is Undefined, optional
        Name of the Lambda function whose resource policy you are updating
    functionNameRef : LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameRef, default is Undefined, optional
        function name ref
    functionNameSelector : LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameSelector, default is Undefined, optional
        function name selector
    functionUrlAuthType : str, default is Undefined, optional
        Lambda Function URLs authentication type. Valid values are: AWS_IAM or NONE. Only supported for lambda:InvokeFunctionUrl action.
    principal : str, default is Undefined, optional
        The principal who is getting this permission e.g., s3.amazonaws.com, an AWS account ID, or AWS IAM principal, or AWS service principal such as events.amazonaws.com or sns.amazonaws.com.
    principalOrgId : str, default is Undefined, optional
        The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
    qualifier : str, default is Undefined, optional
        Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., arn:aws:lambda:aws-region:acct-id:function:function-name:2
    qualifierRef : LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierRef, default is Undefined, optional
        qualifier ref
    qualifierSelector : LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierSelector, default is Undefined, optional
        qualifier selector
    sourceAccount : str, default is Undefined, optional
        This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
    sourceArn : str, default is Undefined, optional
        When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
        Without this, any resource from principal will be granted permission â€“ even if that resource is from another account.
        For S3, this should be the ARN of the S3 Bucket.
        For EventBridge events, this should be the ARN of the EventBridge Rule.
        For API Gateway, this should be the ARN of the API, as described here.
    statementId : str, default is Undefined, optional
        A unique statement identifier.
    statementIdPrefix : str, default is Undefined, optional
        A statement identifier prefix. Conflicts with statement_id.
    """


    action?: str

    eventSourceToken?: str

    functionName?: str

    functionNameRef?: LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameRef

    functionNameSelector?: LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameSelector

    functionUrlAuthType?: str

    principal?: str

    principalOrgId?: str

    qualifier?: str

    qualifierRef?: LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierRef

    qualifierSelector?: LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierSelector

    sourceAccount?: str

    sourceArn?: str

    statementId?: str

    statementIdPrefix?: str


schema LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameRef:
    r"""
    Reference to a Function in lambda to populate functionName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameRefPolicy


schema LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameSelector:
    r"""
    Selector for a Function in lambda to populate functionName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameSelectorPolicy


schema LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderFunctionNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierRef:
    r"""
    Reference to a Alias in lambda to populate qualifier.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierRefPolicy


schema LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierSelector:
    r"""
    Selector for a Alias in lambda to populate qualifier.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierSelectorPolicy


schema LambdaAwsUpboundIoV1beta1PermissionSpecInitProviderQualifierSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1PermissionSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1PermissionSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1PermissionSpecProviderConfigRefPolicy


schema LambdaAwsUpboundIoV1beta1PermissionSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsToConfigRef

    metadata?: LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsToMetadata

    name: str


schema LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsToConfigRefPolicy


schema LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1PermissionSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema LambdaAwsUpboundIoV1beta1PermissionSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema LambdaAwsUpboundIoV1beta1PermissionStatus:
    r"""
    PermissionStatus defines the observed state of Permission.

    Attributes
    ----------
    atProvider : LambdaAwsUpboundIoV1beta1PermissionStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [LambdaAwsUpboundIoV1beta1PermissionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: LambdaAwsUpboundIoV1beta1PermissionStatusAtProvider

    conditions?: [LambdaAwsUpboundIoV1beta1PermissionStatusConditionsItems0]

    observedGeneration?: int


schema LambdaAwsUpboundIoV1beta1PermissionStatusAtProvider:
    r"""
    lambda aws upbound io v1beta1 permission status at provider

    Attributes
    ----------
    action : str, default is Undefined, optional
        The AWS Lambda action you want to allow in this statement. (e.g., lambda:InvokeFunction)
    eventSourceToken : str, default is Undefined, optional
        The Event Source Token to validate.  Used with Alexa Skills.
    functionName : str, default is Undefined, optional
        Name of the Lambda function whose resource policy you are updating
    functionUrlAuthType : str, default is Undefined, optional
        Lambda Function URLs authentication type. Valid values are: AWS_IAM or NONE. Only supported for lambda:InvokeFunctionUrl action.
    id : str, default is Undefined, optional
        id
    principal : str, default is Undefined, optional
        The principal who is getting this permission e.g., s3.amazonaws.com, an AWS account ID, or AWS IAM principal, or AWS service principal such as events.amazonaws.com or sns.amazonaws.com.
    principalOrgId : str, default is Undefined, optional
        The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
    qualifier : str, default is Undefined, optional
        Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., arn:aws:lambda:aws-region:acct-id:function:function-name:2
    sourceAccount : str, default is Undefined, optional
        This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
    sourceArn : str, default is Undefined, optional
        When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
        Without this, any resource from principal will be granted permission â€“ even if that resource is from another account.
        For S3, this should be the ARN of the S3 Bucket.
        For EventBridge events, this should be the ARN of the EventBridge Rule.
        For API Gateway, this should be the ARN of the API, as described here.
    statementId : str, default is Undefined, optional
        A unique statement identifier.
    statementIdPrefix : str, default is Undefined, optional
        A statement identifier prefix. Conflicts with statement_id.
    """


    action?: str

    eventSourceToken?: str

    functionName?: str

    functionUrlAuthType?: str

    id?: str

    principal?: str

    principalOrgId?: str

    qualifier?: str

    sourceAccount?: str

    sourceArn?: str

    statementId?: str

    statementIdPrefix?: str


schema LambdaAwsUpboundIoV1beta1PermissionStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


