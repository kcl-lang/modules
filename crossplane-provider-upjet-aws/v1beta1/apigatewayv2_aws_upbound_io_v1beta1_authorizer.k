"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Authorizer:
    r"""
    Authorizer is the Schema for the Authorizers API. Manages an Amazon API Gateway Version 2 authorizer.

    Attributes
    ----------
    apiVersion : str, default is "apigatewayv2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Authorizer", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpec, default is Undefined, required
        spec
    status : Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatus, default is Undefined, optional
        status
    """


    apiVersion: "apigatewayv2.aws.upbound.io/v1beta1" = "apigatewayv2.aws.upbound.io/v1beta1"

    kind: "Authorizer" = "Authorizer"

    metadata?: v1.ObjectMeta

    spec: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpec

    status?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatus


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpec:
    r"""
    AuthorizerSpec defines the desired state of Authorizer

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProvider, default is Undefined, required
        for provider
    initProvider : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProvider

    initProvider?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecProviderConfigRef

    publishConnectionDetailsTo?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecWriteConnectionSecretToRef


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProvider:
    r"""
    apigatewayv2 aws upbound io v1beta1 authorizer spec for provider

    Attributes
    ----------
    apiId : str, default is Undefined, optional
        API identifier.
    apiIdRef : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDRef, default is Undefined, optional
        api Id ref
    apiIdSelector : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDSelector, default is Undefined, optional
        api Id selector
    authorizerCredentialsArn : str, default is Undefined, optional
        Required credentials as an IAM role for API Gateway to invoke the authorizer.
        Supported only for REQUEST authorizers.
    authorizerPayloadFormatVersion : str, default is Undefined, optional
        Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
        Valid values: 1.0, 2.0.
    authorizerResultTtlInSeconds : float, default is Undefined, optional
        Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
        If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to 300.
        Supported only for HTTP API Lambda authorizers.
    authorizerType : str, default is Undefined, optional
        Authorizer type. Valid values: JWT, REQUEST.
        Specify REQUEST for a Lambda function using incoming request parameters.
        For HTTP APIs, specify JWT to use JSON Web Tokens.
    authorizerUri : str, default is Undefined, optional
        Authorizer's Uniform Resource Identifier (URI).
        For REQUEST authorizers this must be a well-formed Lambda function URI, such as the invoke_arn attribute of the aws_lambda_function resource.
        Supported only for REQUEST authorizers. Must be between 1 and 2048 characters in length.
    authorizerUriRef : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRef, default is Undefined, optional
        authorizer Uri ref
    authorizerUriSelector : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelector, default is Undefined, optional
        authorizer Uri selector
    enableSimpleResponses : bool, default is Undefined, optional
        Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
        Supported only for HTTP APIs.
    identitySources : [str], default is Undefined, optional
        Identity sources for which authorization is requested.
        For REQUEST authorizers the value is a list of one or more mapping expressions of the specified request parameters.
        For JWT authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
    jwtConfiguration : [Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderJwtConfigurationItems0], default is Undefined, optional
        Configuration of a JWT authorizer. Required for the JWT authorizer type.
        Supported only for HTTP APIs.
    name : str, default is Undefined, optional
        Name of the authorizer. Must be between 1 and 128 characters in length.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    """


    apiId?: str

    apiIdRef?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDRef

    apiIdSelector?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDSelector

    authorizerCredentialsArn?: str

    authorizerPayloadFormatVersion?: str

    authorizerResultTtlInSeconds?: float

    authorizerType?: str

    authorizerUri?: str

    authorizerUriRef?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRef

    authorizerUriSelector?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelector

    enableSimpleResponses?: bool

    identitySources?: [str]

    jwtConfiguration?: [Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderJwtConfigurationItems0]

    name?: str

    region: str


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDRef:
    r"""
    Reference to a API in apigatewayv2 to populate apiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDSelector:
    r"""
    Selector for a API in apigatewayv2 to populate apiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDSelectorPolicy


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRef:
    r"""
    Reference to a Function in lambda to populate authorizerUri.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelector:
    r"""
    Selector for a Function in lambda to populate authorizerUri.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelectorPolicy


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecForProviderJwtConfigurationItems0:
    r"""
    apigatewayv2 aws upbound io v1beta1 authorizer spec for provider jwt configuration items0

    Attributes
    ----------
    audience : [str], default is Undefined, optional
        List of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
    issuer : str, default is Undefined, optional
        Base domain of the identity provider that issues JSON Web Tokens, such as the endpoint attribute of the aws_cognito_user_pool resource.
    """


    audience?: [str]

    issuer?: str


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    apiId : str, default is Undefined, optional
        API identifier.
    apiIdRef : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDRef, default is Undefined, optional
        api Id ref
    apiIdSelector : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDSelector, default is Undefined, optional
        api Id selector
    authorizerCredentialsArn : str, default is Undefined, optional
        Required credentials as an IAM role for API Gateway to invoke the authorizer.
        Supported only for REQUEST authorizers.
    authorizerPayloadFormatVersion : str, default is Undefined, optional
        Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
        Valid values: 1.0, 2.0.
    authorizerResultTtlInSeconds : float, default is Undefined, optional
        Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
        If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to 300.
        Supported only for HTTP API Lambda authorizers.
    authorizerType : str, default is Undefined, optional
        Authorizer type. Valid values: JWT, REQUEST.
        Specify REQUEST for a Lambda function using incoming request parameters.
        For HTTP APIs, specify JWT to use JSON Web Tokens.
    authorizerUri : str, default is Undefined, optional
        Authorizer's Uniform Resource Identifier (URI).
        For REQUEST authorizers this must be a well-formed Lambda function URI, such as the invoke_arn attribute of the aws_lambda_function resource.
        Supported only for REQUEST authorizers. Must be between 1 and 2048 characters in length.
    authorizerUriRef : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRef, default is Undefined, optional
        authorizer Uri ref
    authorizerUriSelector : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelector, default is Undefined, optional
        authorizer Uri selector
    enableSimpleResponses : bool, default is Undefined, optional
        Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
        Supported only for HTTP APIs.
    identitySources : [str], default is Undefined, optional
        Identity sources for which authorization is requested.
        For REQUEST authorizers the value is a list of one or more mapping expressions of the specified request parameters.
        For JWT authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
    jwtConfiguration : [Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderJwtConfigurationItems0], default is Undefined, optional
        Configuration of a JWT authorizer. Required for the JWT authorizer type.
        Supported only for HTTP APIs.
    name : str, default is Undefined, optional
        Name of the authorizer. Must be between 1 and 128 characters in length.
    """


    apiId?: str

    apiIdRef?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDRef

    apiIdSelector?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDSelector

    authorizerCredentialsArn?: str

    authorizerPayloadFormatVersion?: str

    authorizerResultTtlInSeconds?: float

    authorizerType?: str

    authorizerUri?: str

    authorizerUriRef?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRef

    authorizerUriSelector?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelector

    enableSimpleResponses?: bool

    identitySources?: [str]

    jwtConfiguration?: [Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderJwtConfigurationItems0]

    name?: str


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDRef:
    r"""
    Reference to a API in apigatewayv2 to populate apiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDSelector:
    r"""
    Selector for a API in apigatewayv2 to populate apiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDSelectorPolicy


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRef:
    r"""
    Reference to a Function in lambda to populate authorizerUri.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelector:
    r"""
    Selector for a Function in lambda to populate authorizerUri.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelectorPolicy


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecInitProviderJwtConfigurationItems0:
    r"""
    apigatewayv2 aws upbound io v1beta1 authorizer spec init provider jwt configuration items0

    Attributes
    ----------
    audience : [str], default is Undefined, optional
        List of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
    issuer : str, default is Undefined, optional
        Base domain of the identity provider that issues JSON Web Tokens, such as the endpoint attribute of the aws_cognito_user_pool resource.
    """


    audience?: [str]

    issuer?: str


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecProviderConfigRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRef

    metadata?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToMetadata

    name: str


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatus:
    r"""
    AuthorizerStatus defines the observed state of Authorizer.

    Attributes
    ----------
    atProvider : Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatusAtProvider

    conditions?: [Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatusConditionsItems0]

    observedGeneration?: int


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatusAtProvider:
    r"""
    apigatewayv2 aws upbound io v1beta1 authorizer status at provider

    Attributes
    ----------
    apiId : str, default is Undefined, optional
        API identifier.
    authorizerCredentialsArn : str, default is Undefined, optional
        Required credentials as an IAM role for API Gateway to invoke the authorizer.
        Supported only for REQUEST authorizers.
    authorizerPayloadFormatVersion : str, default is Undefined, optional
        Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
        Valid values: 1.0, 2.0.
    authorizerResultTtlInSeconds : float, default is Undefined, optional
        Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
        If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to 300.
        Supported only for HTTP API Lambda authorizers.
    authorizerType : str, default is Undefined, optional
        Authorizer type. Valid values: JWT, REQUEST.
        Specify REQUEST for a Lambda function using incoming request parameters.
        For HTTP APIs, specify JWT to use JSON Web Tokens.
    authorizerUri : str, default is Undefined, optional
        Authorizer's Uniform Resource Identifier (URI).
        For REQUEST authorizers this must be a well-formed Lambda function URI, such as the invoke_arn attribute of the aws_lambda_function resource.
        Supported only for REQUEST authorizers. Must be between 1 and 2048 characters in length.
    enableSimpleResponses : bool, default is Undefined, optional
        Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
        Supported only for HTTP APIs.
    id : str, default is Undefined, optional
        Authorizer identifier.
    identitySources : [str], default is Undefined, optional
        Identity sources for which authorization is requested.
        For REQUEST authorizers the value is a list of one or more mapping expressions of the specified request parameters.
        For JWT authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
    jwtConfiguration : [Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatusAtProviderJwtConfigurationItems0], default is Undefined, optional
        Configuration of a JWT authorizer. Required for the JWT authorizer type.
        Supported only for HTTP APIs.
    name : str, default is Undefined, optional
        Name of the authorizer. Must be between 1 and 128 characters in length.
    """


    apiId?: str

    authorizerCredentialsArn?: str

    authorizerPayloadFormatVersion?: str

    authorizerResultTtlInSeconds?: float

    authorizerType?: str

    authorizerUri?: str

    enableSimpleResponses?: bool

    id?: str

    identitySources?: [str]

    jwtConfiguration?: [Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatusAtProviderJwtConfigurationItems0]

    name?: str


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatusAtProviderJwtConfigurationItems0:
    r"""
    apigatewayv2 aws upbound io v1beta1 authorizer status at provider jwt configuration items0

    Attributes
    ----------
    audience : [str], default is Undefined, optional
        List of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
    issuer : str, default is Undefined, optional
        Base domain of the identity provider that issues JSON Web Tokens, such as the endpoint attribute of the aws_cognito_user_pool resource.
    """


    audience?: [str]

    issuer?: str


schema Apigatewayv2AwsUpboundIoV1beta1AuthorizerStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


