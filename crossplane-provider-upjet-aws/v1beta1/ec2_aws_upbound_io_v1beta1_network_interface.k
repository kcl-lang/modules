"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema NetworkInterface:
    r"""
    NetworkInterface is the Schema for the NetworkInterfaces API. Provides an Elastic network interface (ENI) resource.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "NetworkInterface", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1NetworkInterfaceStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "NetworkInterface" = "NetworkInterface"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpec

    status?: Ec2AwsUpboundIoV1beta1NetworkInterfaceStatus


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpec:
    r"""
    NetworkInterfaceSpec defines the desired state of NetworkInterface

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 network interface spec for provider

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description for the network interface.
    enablePrimaryIpv6 : bool, default is Undefined, optional
        Enables assigning a primary IPv6 Global Unicast Address (GUA) to the network interface (ENI) in dual-stack or IPv6-only subnets. This ensures the instance attached to the ENI retains a consistent IPv6 address. Once enabled, the first IPv6 GUA becomes the primary IPv6 address and cannot be disabled. The primary IPv6 address remains assigned until the instance is terminated or the ENI is detached. Enabling and subsequent disabling forces recreation of the ENI.
    interfaceType : str, default is Undefined, optional
        Type of network interface to create. Set to efa for Elastic Fabric Adapter. Changing interface_type will cause the resource to be destroyed and re-created.
    ipv4PrefixCount : float, default is Undefined, optional
        Number of IPv4 prefixes that AWS automatically assigns to the network interface.
    ipv4Prefixes : [str], default is Undefined, optional
        One or more IPv4 prefixes assigned to the network interface.
    ipv6AddressCount : float, default is Undefined, optional
        Number of IPv6 addresses to assign to a network interface. You can't use this option if specifying specific ipv6_addresses. If your subnet has the AssignIpv6AddressOnCreation attribute set to true, you can specify 0 to override this setting.
    ipv6AddressList : [str], default is Undefined, optional
        List of private IPs to assign to the ENI in sequential order.
    ipv6AddressListEnabled : bool, default is Undefined, optional
        Whether ipv6_address_list is allowed and controls the IPs to assign to the ENI and ipv6_addresses and ipv6_address_count become read-only. Default is false.
    ipv6Addresses : [str], default is Undefined, optional
        One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can't use this option if you're specifying ipv6_address_count.
    ipv6PrefixCount : float, default is Undefined, optional
        Number of IPv6 prefixes that AWS automatically assigns to the network interface.
    ipv6Prefixes : [str], default is Undefined, optional
        One or more IPv6 prefixes assigned to the network interface.
    privateIp : str, default is Undefined, optional
        private Ip
    privateIpList : [str], default is Undefined, optional
        List of private IPs to assign to the ENI in sequential order. Requires setting private_ip_list_enabled to true.
    privateIpListEnabled : bool, default is Undefined, optional
        Whether private_ip_list is allowed and controls the IPs to assign to the ENI and private_ips and private_ips_count become read-only. Default is false.
    privateIps : [str], default is Undefined, optional
        List of private IPs to assign to the ENI without regard to order.
    privateIpsCount : float, default is Undefined, optional
        Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    securityGroupRefs : [Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroups.
    securityGroupSelector : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupSelector, default is Undefined, optional
        security group selector
    securityGroups : [str], default is Undefined, optional
        List of security group IDs to assign to the ENI.
    sourceDestCheck : bool, default is Undefined, optional
        Whether to enable source destination checking for the ENI. Default true.
    subnetId : str, default is Undefined, optional
        Subnet ID to create the ENI in.
    subnetIdRef : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDRef, default is Undefined, optional
        subnet Id ref
    subnetIdSelector : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDSelector, default is Undefined, optional
        subnet Id selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    description?: str

    enablePrimaryIpv6?: bool

    interfaceType?: str

    ipv4PrefixCount?: float

    ipv4Prefixes?: [str]

    ipv6AddressCount?: float

    ipv6AddressList?: [str]

    ipv6AddressListEnabled?: bool

    ipv6Addresses?: [str]

    ipv6PrefixCount?: float

    ipv6Prefixes?: [str]

    privateIp?: str

    privateIpList?: [str]

    privateIpListEnabled?: bool

    privateIps?: [str]

    privateIpsCount?: float

    region: str

    securityGroupRefs?: [Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupRefsItems0]

    securityGroupSelector?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupSelector

    securityGroups?: [str]

    sourceDestCheck?: bool

    subnetId?: str

    subnetIdRef?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDRef

    subnetIdSelector?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDSelector

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroups.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupSelectorPolicy


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSecurityGroupSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDRef:
    r"""
    Reference to a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDRefPolicy


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDSelector:
    r"""
    Selector for a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecForProviderSubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description for the network interface.
    enablePrimaryIpv6 : bool, default is Undefined, optional
        Enables assigning a primary IPv6 Global Unicast Address (GUA) to the network interface (ENI) in dual-stack or IPv6-only subnets. This ensures the instance attached to the ENI retains a consistent IPv6 address. Once enabled, the first IPv6 GUA becomes the primary IPv6 address and cannot be disabled. The primary IPv6 address remains assigned until the instance is terminated or the ENI is detached. Enabling and subsequent disabling forces recreation of the ENI.
    interfaceType : str, default is Undefined, optional
        Type of network interface to create. Set to efa for Elastic Fabric Adapter. Changing interface_type will cause the resource to be destroyed and re-created.
    ipv4PrefixCount : float, default is Undefined, optional
        Number of IPv4 prefixes that AWS automatically assigns to the network interface.
    ipv4Prefixes : [str], default is Undefined, optional
        One or more IPv4 prefixes assigned to the network interface.
    ipv6AddressCount : float, default is Undefined, optional
        Number of IPv6 addresses to assign to a network interface. You can't use this option if specifying specific ipv6_addresses. If your subnet has the AssignIpv6AddressOnCreation attribute set to true, you can specify 0 to override this setting.
    ipv6AddressList : [str], default is Undefined, optional
        List of private IPs to assign to the ENI in sequential order.
    ipv6AddressListEnabled : bool, default is Undefined, optional
        Whether ipv6_address_list is allowed and controls the IPs to assign to the ENI and ipv6_addresses and ipv6_address_count become read-only. Default is false.
    ipv6Addresses : [str], default is Undefined, optional
        One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can't use this option if you're specifying ipv6_address_count.
    ipv6PrefixCount : float, default is Undefined, optional
        Number of IPv6 prefixes that AWS automatically assigns to the network interface.
    ipv6Prefixes : [str], default is Undefined, optional
        One or more IPv6 prefixes assigned to the network interface.
    privateIp : str, default is Undefined, optional
        private Ip
    privateIpList : [str], default is Undefined, optional
        List of private IPs to assign to the ENI in sequential order. Requires setting private_ip_list_enabled to true.
    privateIpListEnabled : bool, default is Undefined, optional
        Whether private_ip_list is allowed and controls the IPs to assign to the ENI and private_ips and private_ips_count become read-only. Default is false.
    privateIps : [str], default is Undefined, optional
        List of private IPs to assign to the ENI without regard to order.
    privateIpsCount : float, default is Undefined, optional
        Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default.
    securityGroupRefs : [Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroups.
    securityGroupSelector : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupSelector, default is Undefined, optional
        security group selector
    securityGroups : [str], default is Undefined, optional
        List of security group IDs to assign to the ENI.
    sourceDestCheck : bool, default is Undefined, optional
        Whether to enable source destination checking for the ENI. Default true.
    subnetId : str, default is Undefined, optional
        Subnet ID to create the ENI in.
    subnetIdRef : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDRef, default is Undefined, optional
        subnet Id ref
    subnetIdSelector : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDSelector, default is Undefined, optional
        subnet Id selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    description?: str

    enablePrimaryIpv6?: bool

    interfaceType?: str

    ipv4PrefixCount?: float

    ipv4Prefixes?: [str]

    ipv6AddressCount?: float

    ipv6AddressList?: [str]

    ipv6AddressListEnabled?: bool

    ipv6Addresses?: [str]

    ipv6PrefixCount?: float

    ipv6Prefixes?: [str]

    privateIp?: str

    privateIpList?: [str]

    privateIpListEnabled?: bool

    privateIps?: [str]

    privateIpsCount?: float

    securityGroupRefs?: [Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupRefsItems0]

    securityGroupSelector?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupSelector

    securityGroups?: [str]

    sourceDestCheck?: bool

    subnetId?: str

    subnetIdRef?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDRef

    subnetIdSelector?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDSelector

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroups.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupSelectorPolicy


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSecurityGroupSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDRef:
    r"""
    Reference to a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDRefPolicy


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDSelector:
    r"""
    Selector for a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecInitProviderSubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceStatus:
    r"""
    NetworkInterfaceStatus defines the observed state of NetworkInterface.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1NetworkInterfaceStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1NetworkInterfaceStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1NetworkInterfaceStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1NetworkInterfaceStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 network interface status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN of the network interface.
    attachment : [Ec2AwsUpboundIoV1beta1NetworkInterfaceStatusAtProviderAttachmentItems0], default is Undefined, optional
        Configuration block to define the attachment of the ENI. See Attachment below for more details!
    description : str, default is Undefined, optional
        Description for the network interface.
    enablePrimaryIpv6 : bool, default is Undefined, optional
        Enables assigning a primary IPv6 Global Unicast Address (GUA) to the network interface (ENI) in dual-stack or IPv6-only subnets. This ensures the instance attached to the ENI retains a consistent IPv6 address. Once enabled, the first IPv6 GUA becomes the primary IPv6 address and cannot be disabled. The primary IPv6 address remains assigned until the instance is terminated or the ENI is detached. Enabling and subsequent disabling forces recreation of the ENI.
    id : str, default is Undefined, optional
        ID of the network interface.
    interfaceType : str, default is Undefined, optional
        Type of network interface to create. Set to efa for Elastic Fabric Adapter. Changing interface_type will cause the resource to be destroyed and re-created.
    ipv4PrefixCount : float, default is Undefined, optional
        Number of IPv4 prefixes that AWS automatically assigns to the network interface.
    ipv4Prefixes : [str], default is Undefined, optional
        One or more IPv4 prefixes assigned to the network interface.
    ipv6AddressCount : float, default is Undefined, optional
        Number of IPv6 addresses to assign to a network interface. You can't use this option if specifying specific ipv6_addresses. If your subnet has the AssignIpv6AddressOnCreation attribute set to true, you can specify 0 to override this setting.
    ipv6AddressList : [str], default is Undefined, optional
        List of private IPs to assign to the ENI in sequential order.
    ipv6AddressListEnabled : bool, default is Undefined, optional
        Whether ipv6_address_list is allowed and controls the IPs to assign to the ENI and ipv6_addresses and ipv6_address_count become read-only. Default is false.
    ipv6Addresses : [str], default is Undefined, optional
        One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Addresses are assigned without regard to order. You can't use this option if you're specifying ipv6_address_count.
    ipv6PrefixCount : float, default is Undefined, optional
        Number of IPv6 prefixes that AWS automatically assigns to the network interface.
    ipv6Prefixes : [str], default is Undefined, optional
        One or more IPv6 prefixes assigned to the network interface.
    macAddress : str, default is Undefined, optional
        MAC address of the network interface.
    outpostArn : str, default is Undefined, optional
        ARN of the network interface.
    ownerId : str, default is Undefined, optional
        AWS account ID of the owner of the network interface.
    privateDnsName : str, default is Undefined, optional
        Private DNS name of the network interface (IPv4).
    privateIp : str, default is Undefined, optional
        private Ip
    privateIpList : [str], default is Undefined, optional
        List of private IPs to assign to the ENI in sequential order. Requires setting private_ip_list_enabled to true.
    privateIpListEnabled : bool, default is Undefined, optional
        Whether private_ip_list is allowed and controls the IPs to assign to the ENI and private_ips and private_ips_count become read-only. Default is false.
    privateIps : [str], default is Undefined, optional
        List of private IPs to assign to the ENI without regard to order.
    privateIpsCount : float, default is Undefined, optional
        Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default.
    securityGroups : [str], default is Undefined, optional
        List of security group IDs to assign to the ENI.
    sourceDestCheck : bool, default is Undefined, optional
        Whether to enable source destination checking for the ENI. Default true.
    subnetId : str, default is Undefined, optional
        Subnet ID to create the ENI in.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    """


    arn?: str

    attachment?: [Ec2AwsUpboundIoV1beta1NetworkInterfaceStatusAtProviderAttachmentItems0]

    description?: str

    enablePrimaryIpv6?: bool

    id?: str

    interfaceType?: str

    ipv4PrefixCount?: float

    ipv4Prefixes?: [str]

    ipv6AddressCount?: float

    ipv6AddressList?: [str]

    ipv6AddressListEnabled?: bool

    ipv6Addresses?: [str]

    ipv6PrefixCount?: float

    ipv6Prefixes?: [str]

    macAddress?: str

    outpostArn?: str

    ownerId?: str

    privateDnsName?: str

    privateIp?: str

    privateIpList?: [str]

    privateIpListEnabled?: bool

    privateIps?: [str]

    privateIpsCount?: float

    securityGroups?: [str]

    sourceDestCheck?: bool

    subnetId?: str

    tags?: {str:str}

    tagsAll?: {str:str}


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceStatusAtProviderAttachmentItems0:
    r"""
    ec2 aws upbound io v1beta1 network interface status at provider attachment items0

    Attributes
    ----------
    attachmentId : str, default is Undefined, optional
        ID of the network interface.
    deviceIndex : float, default is Undefined, optional
        Integer to define the devices index.
    instance : str, default is Undefined, optional
        ID of the instance to attach to.
    """


    attachmentId?: str

    deviceIndex?: float

    instance?: str


schema Ec2AwsUpboundIoV1beta1NetworkInterfaceStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


