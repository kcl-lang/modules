"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VPNConnection:
    r"""
    VPNConnection is the Schema for the VPNConnections API. Manages a Site-to-Site VPN connection. A Site-to-Site VPN connection is an Internet Protocol security (IPsec) VPN connection between a VPC and an on-premises network.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VPNConnection", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1VPNConnectionSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1VPNConnectionStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "VPNConnection" = "VPNConnection"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1VPNConnectionSpec

    status?: Ec2AwsUpboundIoV1beta1VPNConnectionStatus


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpec:
    r"""
    VPNConnectionSpec defines the desired state of VPNConnection

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 v p n connection spec for provider

    Attributes
    ----------
    customerGatewayId : str, default is Undefined, optional
        The ID of the customer gateway.
    customerGatewayIdRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDRef, default is Undefined, optional
        customer gateway Id ref
    customerGatewayIdSelector : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDSelector, default is Undefined, optional
        customer gateway Id selector
    enableAcceleration : bool, default is Undefined, optional
        Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
    localIpv4NetworkCidr : str, default is Undefined, optional
        The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
    localIpv6NetworkCidr : str, default is Undefined, optional
        The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
    outsideIpAddressType : str, default is Undefined, optional
        Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are PublicIpv4 | PrivateIpv4
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    remoteIpv4NetworkCidr : str, default is Undefined, optional
        The IPv4 CIDR on the AWS side of the VPN connection.
    remoteIpv6NetworkCidr : str, default is Undefined, optional
        The IPv6 CIDR on the AWS side of the VPN connection.
    staticRoutesOnly : bool, default is Undefined, optional
        Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    transitGatewayId : str, default is Undefined, optional
        The ID of the EC2 Transit Gateway.
    transitGatewayIdRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDRef, default is Undefined, optional
        transit gateway Id ref
    transitGatewayIdSelector : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDSelector, default is Undefined, optional
        transit gateway Id selector
    transportTransitGatewayAttachmentId : str, default is Undefined, optional
        . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
    tunnel1DpdTimeoutAction : str, default is Undefined, optional
        The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    tunnel1DpdTimeoutSeconds : float, default is Undefined, optional
        The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than 30.
    tunnel1EnableTunnelLifecycleControl : bool, default is Undefined, optional
        Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are true | false.
    tunnel1IkeVersions : [str], default is Undefined, optional
        The IKE versions that are permitted for the first VPN tunnel. Valid values are ikev1 | ikev2.
    tunnel1InsideCidr : str, default is Undefined, optional
        The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    tunnel1InsideIpv6Cidr : str, default is Undefined, optional
        The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    tunnel1LogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel1LogOptionsItems0], default is Undefined, optional
        Options for logging VPN tunnel activity. See Log Options below for more details.
    tunnel1Phase1DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel1Phase1EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel1Phase1IntegrityAlgorithms : [str], default is Undefined, optional
        One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel1Phase1LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 28800.
    tunnel1Phase2DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel1Phase2EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel1Phase2IntegrityAlgorithms : [str], default is Undefined, optional
        List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel1Phase2LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 3600.
    tunnel1PresharedKeySecretRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel1PresharedKeySecretRef, default is Undefined, optional
        tunnel1 preshared key secret ref
    tunnel1RekeyFuzzPercentage : float, default is Undefined, optional
        The percentage of the rekey window for the first VPN tunnel (determined by tunnel1_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    tunnel1RekeyMarginTimeSeconds : float, default is Undefined, optional
        The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel1_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel1_phase2_lifetime_seconds.
    tunnel1ReplayWindowSize : float, default is Undefined, optional
        The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between 64 and 2048.
    tunnel1StartupAction : str, default is Undefined, optional
        The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    tunnel2DpdTimeoutAction : str, default is Undefined, optional
        The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    tunnel2DpdTimeoutSeconds : float, default is Undefined, optional
        The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than 30.
    tunnel2EnableTunnelLifecycleControl : bool, default is Undefined, optional
        Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are true | false.
    tunnel2IkeVersions : [str], default is Undefined, optional
        The IKE versions that are permitted for the second VPN tunnel. Valid values are ikev1 | ikev2.
    tunnel2InsideCidr : str, default is Undefined, optional
        The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    tunnel2InsideIpv6Cidr : str, default is Undefined, optional
        The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    tunnel2LogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel2LogOptionsItems0], default is Undefined, optional
        Options for logging VPN tunnel activity. See Log Options below for more details.
    tunnel2Phase1DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel2Phase1EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel2Phase1IntegrityAlgorithms : [str], default is Undefined, optional
        One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel2Phase1LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 28800.
    tunnel2Phase2DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel2Phase2EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel2Phase2IntegrityAlgorithms : [str], default is Undefined, optional
        List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel2Phase2LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 3600.
    tunnel2PresharedKeySecretRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel2PresharedKeySecretRef, default is Undefined, optional
        tunnel2 preshared key secret ref
    tunnel2RekeyFuzzPercentage : float, default is Undefined, optional
        The percentage of the rekey window for the second VPN tunnel (determined by tunnel2_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    tunnel2RekeyMarginTimeSeconds : float, default is Undefined, optional
        The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel2_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel2_phase2_lifetime_seconds.
    tunnel2ReplayWindowSize : float, default is Undefined, optional
        The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between 64 and 2048.
    tunnel2StartupAction : str, default is Undefined, optional
        The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    tunnelInsideIpVersion : str, default is Undefined, optional
        Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are ipv4 | ipv6. ipv6 Supports only EC2 Transit Gateway.
    $type : str, default is Undefined, optional
        The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
    typeRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeRef, default is Undefined, optional
        type ref
    typeSelector : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeSelector, default is Undefined, optional
        type selector
    vpnGatewayId : str, default is Undefined, optional
        The ID of the Virtual Private Gateway.
    vpnGatewayIdRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDRef, default is Undefined, optional
        vpn gateway Id ref
    vpnGatewayIdSelector : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDSelector, default is Undefined, optional
        vpn gateway Id selector
    """


    customerGatewayId?: str

    customerGatewayIdRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDRef

    customerGatewayIdSelector?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDSelector

    enableAcceleration?: bool

    localIpv4NetworkCidr?: str

    localIpv6NetworkCidr?: str

    outsideIpAddressType?: str

    region: str

    remoteIpv4NetworkCidr?: str

    remoteIpv6NetworkCidr?: str

    staticRoutesOnly?: bool

    tags?: {str:str}

    transitGatewayId?: str

    transitGatewayIdRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDRef

    transitGatewayIdSelector?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDSelector

    transportTransitGatewayAttachmentId?: str

    tunnel1DpdTimeoutAction?: str

    tunnel1DpdTimeoutSeconds?: float

    tunnel1EnableTunnelLifecycleControl?: bool

    tunnel1IkeVersions?: [str]

    tunnel1InsideCidr?: str

    tunnel1InsideIpv6Cidr?: str

    tunnel1LogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel1LogOptionsItems0]

    tunnel1Phase1DhGroupNumbers?: [float]

    tunnel1Phase1EncryptionAlgorithms?: [str]

    tunnel1Phase1IntegrityAlgorithms?: [str]

    tunnel1Phase1LifetimeSeconds?: float

    tunnel1Phase2DhGroupNumbers?: [float]

    tunnel1Phase2EncryptionAlgorithms?: [str]

    tunnel1Phase2IntegrityAlgorithms?: [str]

    tunnel1Phase2LifetimeSeconds?: float

    tunnel1PresharedKeySecretRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel1PresharedKeySecretRef

    tunnel1RekeyFuzzPercentage?: float

    tunnel1RekeyMarginTimeSeconds?: float

    tunnel1ReplayWindowSize?: float

    tunnel1StartupAction?: str

    tunnel2DpdTimeoutAction?: str

    tunnel2DpdTimeoutSeconds?: float

    tunnel2EnableTunnelLifecycleControl?: bool

    tunnel2IkeVersions?: [str]

    tunnel2InsideCidr?: str

    tunnel2InsideIpv6Cidr?: str

    tunnel2LogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel2LogOptionsItems0]

    tunnel2Phase1DhGroupNumbers?: [float]

    tunnel2Phase1EncryptionAlgorithms?: [str]

    tunnel2Phase1IntegrityAlgorithms?: [str]

    tunnel2Phase1LifetimeSeconds?: float

    tunnel2Phase2DhGroupNumbers?: [float]

    tunnel2Phase2EncryptionAlgorithms?: [str]

    tunnel2Phase2IntegrityAlgorithms?: [str]

    tunnel2Phase2LifetimeSeconds?: float

    tunnel2PresharedKeySecretRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel2PresharedKeySecretRef

    tunnel2RekeyFuzzPercentage?: float

    tunnel2RekeyMarginTimeSeconds?: float

    tunnel2ReplayWindowSize?: float

    tunnel2StartupAction?: str

    tunnelInsideIpVersion?: str

    $type?: str

    typeRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeRef

    typeSelector?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeSelector

    vpnGatewayId?: str

    vpnGatewayIdRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDRef

    vpnGatewayIdSelector?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDSelector


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDRef:
    r"""
    Reference to a CustomerGateway in ec2 to populate customerGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDSelector:
    r"""
    Selector for a CustomerGateway in ec2 to populate customerGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderCustomerGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDRef:
    r"""
    Reference to a TransitGateway in ec2 to populate transitGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDSelector:
    r"""
    Selector for a TransitGateway in ec2 to populate transitGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTransitGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel1LogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection spec for provider tunnel1 log options items0

    Attributes
    ----------
    cloudwatchLogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel1LogOptionsItems0CloudwatchLogOptionsItems0], default is Undefined, optional
        Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    """


    cloudwatchLogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel1LogOptionsItems0CloudwatchLogOptionsItems0]


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel1LogOptionsItems0CloudwatchLogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection spec for provider tunnel1 log options items0 cloudwatch log options items0

    Attributes
    ----------
    logEnabled : bool, default is Undefined, optional
        Enable or disable VPN tunnel logging feature. The default is false.
    logGroupArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    logOutputFormat : str, default is Undefined, optional
        Set log format. Default format is json. Possible values are: json and text. The default is json.
    """


    logEnabled?: bool

    logGroupArn?: str

    logOutputFormat?: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel1PresharedKeySecretRef:
    r"""
    The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel2LogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection spec for provider tunnel2 log options items0

    Attributes
    ----------
    cloudwatchLogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel2LogOptionsItems0CloudwatchLogOptionsItems0], default is Undefined, optional
        Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    """


    cloudwatchLogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel2LogOptionsItems0CloudwatchLogOptionsItems0]


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel2LogOptionsItems0CloudwatchLogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection spec for provider tunnel2 log options items0 cloudwatch log options items0

    Attributes
    ----------
    logEnabled : bool, default is Undefined, optional
        Enable or disable VPN tunnel logging feature. The default is false.
    logGroupArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    logOutputFormat : str, default is Undefined, optional
        Set log format. Default format is json. Possible values are: json and text. The default is json.
    """


    logEnabled?: bool

    logGroupArn?: str

    logOutputFormat?: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTunnel2PresharedKeySecretRef:
    r"""
    The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeRef:
    r"""
    Reference to a CustomerGateway in ec2 to populate type.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeRefPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeSelector:
    r"""
    Selector for a CustomerGateway in ec2 to populate type.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderTypeSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDRef:
    r"""
    Reference to a VPNGateway in ec2 to populate vpnGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDSelector:
    r"""
    Selector for a VPNGateway in ec2 to populate vpnGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecForProviderVpnGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    customerGatewayId : str, default is Undefined, optional
        The ID of the customer gateway.
    customerGatewayIdRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDRef, default is Undefined, optional
        customer gateway Id ref
    customerGatewayIdSelector : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDSelector, default is Undefined, optional
        customer gateway Id selector
    enableAcceleration : bool, default is Undefined, optional
        Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
    localIpv4NetworkCidr : str, default is Undefined, optional
        The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
    localIpv6NetworkCidr : str, default is Undefined, optional
        The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
    outsideIpAddressType : str, default is Undefined, optional
        Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are PublicIpv4 | PrivateIpv4
    remoteIpv4NetworkCidr : str, default is Undefined, optional
        The IPv4 CIDR on the AWS side of the VPN connection.
    remoteIpv6NetworkCidr : str, default is Undefined, optional
        The IPv6 CIDR on the AWS side of the VPN connection.
    staticRoutesOnly : bool, default is Undefined, optional
        Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    transitGatewayId : str, default is Undefined, optional
        The ID of the EC2 Transit Gateway.
    transitGatewayIdRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDRef, default is Undefined, optional
        transit gateway Id ref
    transitGatewayIdSelector : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDSelector, default is Undefined, optional
        transit gateway Id selector
    transportTransitGatewayAttachmentId : str, default is Undefined, optional
        . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
    tunnel1DpdTimeoutAction : str, default is Undefined, optional
        The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    tunnel1DpdTimeoutSeconds : float, default is Undefined, optional
        The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than 30.
    tunnel1EnableTunnelLifecycleControl : bool, default is Undefined, optional
        Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are true | false.
    tunnel1IkeVersions : [str], default is Undefined, optional
        The IKE versions that are permitted for the first VPN tunnel. Valid values are ikev1 | ikev2.
    tunnel1InsideCidr : str, default is Undefined, optional
        The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    tunnel1InsideIpv6Cidr : str, default is Undefined, optional
        The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    tunnel1LogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel1LogOptionsItems0], default is Undefined, optional
        Options for logging VPN tunnel activity. See Log Options below for more details.
    tunnel1Phase1DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel1Phase1EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel1Phase1IntegrityAlgorithms : [str], default is Undefined, optional
        One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel1Phase1LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 28800.
    tunnel1Phase2DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel1Phase2EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel1Phase2IntegrityAlgorithms : [str], default is Undefined, optional
        List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel1Phase2LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 3600.
    tunnel1PresharedKeySecretRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel1PresharedKeySecretRef, default is Undefined, optional
        tunnel1 preshared key secret ref
    tunnel1RekeyFuzzPercentage : float, default is Undefined, optional
        The percentage of the rekey window for the first VPN tunnel (determined by tunnel1_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    tunnel1RekeyMarginTimeSeconds : float, default is Undefined, optional
        The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel1_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel1_phase2_lifetime_seconds.
    tunnel1ReplayWindowSize : float, default is Undefined, optional
        The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between 64 and 2048.
    tunnel1StartupAction : str, default is Undefined, optional
        The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    tunnel2DpdTimeoutAction : str, default is Undefined, optional
        The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    tunnel2DpdTimeoutSeconds : float, default is Undefined, optional
        The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than 30.
    tunnel2EnableTunnelLifecycleControl : bool, default is Undefined, optional
        Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are true | false.
    tunnel2IkeVersions : [str], default is Undefined, optional
        The IKE versions that are permitted for the second VPN tunnel. Valid values are ikev1 | ikev2.
    tunnel2InsideCidr : str, default is Undefined, optional
        The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    tunnel2InsideIpv6Cidr : str, default is Undefined, optional
        The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    tunnel2LogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel2LogOptionsItems0], default is Undefined, optional
        Options for logging VPN tunnel activity. See Log Options below for more details.
    tunnel2Phase1DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel2Phase1EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel2Phase1IntegrityAlgorithms : [str], default is Undefined, optional
        One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel2Phase1LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 28800.
    tunnel2Phase2DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel2Phase2EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel2Phase2IntegrityAlgorithms : [str], default is Undefined, optional
        List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel2Phase2LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 3600.
    tunnel2PresharedKeySecretRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel2PresharedKeySecretRef, default is Undefined, optional
        tunnel2 preshared key secret ref
    tunnel2RekeyFuzzPercentage : float, default is Undefined, optional
        The percentage of the rekey window for the second VPN tunnel (determined by tunnel2_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    tunnel2RekeyMarginTimeSeconds : float, default is Undefined, optional
        The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel2_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel2_phase2_lifetime_seconds.
    tunnel2ReplayWindowSize : float, default is Undefined, optional
        The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between 64 and 2048.
    tunnel2StartupAction : str, default is Undefined, optional
        The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    tunnelInsideIpVersion : str, default is Undefined, optional
        Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are ipv4 | ipv6. ipv6 Supports only EC2 Transit Gateway.
    $type : str, default is Undefined, optional
        The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
    typeRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeRef, default is Undefined, optional
        type ref
    typeSelector : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeSelector, default is Undefined, optional
        type selector
    vpnGatewayId : str, default is Undefined, optional
        The ID of the Virtual Private Gateway.
    vpnGatewayIdRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDRef, default is Undefined, optional
        vpn gateway Id ref
    vpnGatewayIdSelector : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDSelector, default is Undefined, optional
        vpn gateway Id selector
    """


    customerGatewayId?: str

    customerGatewayIdRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDRef

    customerGatewayIdSelector?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDSelector

    enableAcceleration?: bool

    localIpv4NetworkCidr?: str

    localIpv6NetworkCidr?: str

    outsideIpAddressType?: str

    remoteIpv4NetworkCidr?: str

    remoteIpv6NetworkCidr?: str

    staticRoutesOnly?: bool

    tags?: {str:str}

    transitGatewayId?: str

    transitGatewayIdRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDRef

    transitGatewayIdSelector?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDSelector

    transportTransitGatewayAttachmentId?: str

    tunnel1DpdTimeoutAction?: str

    tunnel1DpdTimeoutSeconds?: float

    tunnel1EnableTunnelLifecycleControl?: bool

    tunnel1IkeVersions?: [str]

    tunnel1InsideCidr?: str

    tunnel1InsideIpv6Cidr?: str

    tunnel1LogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel1LogOptionsItems0]

    tunnel1Phase1DhGroupNumbers?: [float]

    tunnel1Phase1EncryptionAlgorithms?: [str]

    tunnel1Phase1IntegrityAlgorithms?: [str]

    tunnel1Phase1LifetimeSeconds?: float

    tunnel1Phase2DhGroupNumbers?: [float]

    tunnel1Phase2EncryptionAlgorithms?: [str]

    tunnel1Phase2IntegrityAlgorithms?: [str]

    tunnel1Phase2LifetimeSeconds?: float

    tunnel1PresharedKeySecretRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel1PresharedKeySecretRef

    tunnel1RekeyFuzzPercentage?: float

    tunnel1RekeyMarginTimeSeconds?: float

    tunnel1ReplayWindowSize?: float

    tunnel1StartupAction?: str

    tunnel2DpdTimeoutAction?: str

    tunnel2DpdTimeoutSeconds?: float

    tunnel2EnableTunnelLifecycleControl?: bool

    tunnel2IkeVersions?: [str]

    tunnel2InsideCidr?: str

    tunnel2InsideIpv6Cidr?: str

    tunnel2LogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel2LogOptionsItems0]

    tunnel2Phase1DhGroupNumbers?: [float]

    tunnel2Phase1EncryptionAlgorithms?: [str]

    tunnel2Phase1IntegrityAlgorithms?: [str]

    tunnel2Phase1LifetimeSeconds?: float

    tunnel2Phase2DhGroupNumbers?: [float]

    tunnel2Phase2EncryptionAlgorithms?: [str]

    tunnel2Phase2IntegrityAlgorithms?: [str]

    tunnel2Phase2LifetimeSeconds?: float

    tunnel2PresharedKeySecretRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel2PresharedKeySecretRef

    tunnel2RekeyFuzzPercentage?: float

    tunnel2RekeyMarginTimeSeconds?: float

    tunnel2ReplayWindowSize?: float

    tunnel2StartupAction?: str

    tunnelInsideIpVersion?: str

    $type?: str

    typeRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeRef

    typeSelector?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeSelector

    vpnGatewayId?: str

    vpnGatewayIdRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDRef

    vpnGatewayIdSelector?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDSelector


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDRef:
    r"""
    Reference to a CustomerGateway in ec2 to populate customerGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDSelector:
    r"""
    Selector for a CustomerGateway in ec2 to populate customerGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderCustomerGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDRef:
    r"""
    Reference to a TransitGateway in ec2 to populate transitGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDSelector:
    r"""
    Selector for a TransitGateway in ec2 to populate transitGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTransitGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel1LogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection spec init provider tunnel1 log options items0

    Attributes
    ----------
    cloudwatchLogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel1LogOptionsItems0CloudwatchLogOptionsItems0], default is Undefined, optional
        Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    """


    cloudwatchLogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel1LogOptionsItems0CloudwatchLogOptionsItems0]


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel1LogOptionsItems0CloudwatchLogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection spec init provider tunnel1 log options items0 cloudwatch log options items0

    Attributes
    ----------
    logEnabled : bool, default is Undefined, optional
        Enable or disable VPN tunnel logging feature. The default is false.
    logGroupArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    logOutputFormat : str, default is Undefined, optional
        Set log format. Default format is json. Possible values are: json and text. The default is json.
    """


    logEnabled?: bool

    logGroupArn?: str

    logOutputFormat?: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel1PresharedKeySecretRef:
    r"""
    The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel2LogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection spec init provider tunnel2 log options items0

    Attributes
    ----------
    cloudwatchLogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel2LogOptionsItems0CloudwatchLogOptionsItems0], default is Undefined, optional
        Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    """


    cloudwatchLogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel2LogOptionsItems0CloudwatchLogOptionsItems0]


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel2LogOptionsItems0CloudwatchLogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection spec init provider tunnel2 log options items0 cloudwatch log options items0

    Attributes
    ----------
    logEnabled : bool, default is Undefined, optional
        Enable or disable VPN tunnel logging feature. The default is false.
    logGroupArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    logOutputFormat : str, default is Undefined, optional
        Set log format. Default format is json. Possible values are: json and text. The default is json.
    """


    logEnabled?: bool

    logGroupArn?: str

    logOutputFormat?: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTunnel2PresharedKeySecretRef:
    r"""
    The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeRef:
    r"""
    Reference to a CustomerGateway in ec2 to populate type.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeRefPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeSelector:
    r"""
    Selector for a CustomerGateway in ec2 to populate type.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderTypeSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDRef:
    r"""
    Reference to a VPNGateway in ec2 to populate vpnGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDSelector:
    r"""
    Selector for a VPNGateway in ec2 to populate vpnGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecInitProviderVpnGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionStatus:
    r"""
    VPNConnectionStatus defines the observed state of VPNConnection.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1VPNConnectionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1VPNConnectionStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 v p n connection status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        Amazon Resource Name (ARN) of the VPN Connection.
    coreNetworkArn : str, default is Undefined, optional
        The ARN of the core network.
    coreNetworkAttachmentArn : str, default is Undefined, optional
        The ARN of the core network attachment.
    customerGatewayId : str, default is Undefined, optional
        The ID of the customer gateway.
    enableAcceleration : bool, default is Undefined, optional
        Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
    id : str, default is Undefined, optional
        The amazon-assigned ID of the VPN connection.
    localIpv4NetworkCidr : str, default is Undefined, optional
        The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
    localIpv6NetworkCidr : str, default is Undefined, optional
        The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
    outsideIpAddressType : str, default is Undefined, optional
        Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are PublicIpv4 | PrivateIpv4
    remoteIpv4NetworkCidr : str, default is Undefined, optional
        The IPv4 CIDR on the AWS side of the VPN connection.
    remoteIpv6NetworkCidr : str, default is Undefined, optional
        The IPv6 CIDR on the AWS side of the VPN connection.
    routes : [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderRoutesItems0], default is Undefined, optional
        The static routes associated with the VPN connection. Detailed below.
    staticRoutesOnly : bool, default is Undefined, optional
        Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    transitGatewayAttachmentId : str, default is Undefined, optional
        When associated with an EC2 Transit Gateway (transit_gateway_id argument), the attachment ID. See also the aws_ec2_tag resource for tagging the EC2 Transit Gateway VPN Attachment.
    transitGatewayId : str, default is Undefined, optional
        The ID of the EC2 Transit Gateway.
    transportTransitGatewayAttachmentId : str, default is Undefined, optional
        . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
    tunnel1Address : str, default is Undefined, optional
        The public IP address of the first VPN tunnel.
    tunnel1BgpAsn : str, default is Undefined, optional
        The bgp asn number of the first VPN tunnel.
    tunnel1BgpHoldtime : float, default is Undefined, optional
        The bgp holdtime of the first VPN tunnel.
    tunnel1CgwInsideAddress : str, default is Undefined, optional
        The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
    tunnel1DpdTimeoutAction : str, default is Undefined, optional
        The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    tunnel1DpdTimeoutSeconds : float, default is Undefined, optional
        The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than 30.
    tunnel1EnableTunnelLifecycleControl : bool, default is Undefined, optional
        Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are true | false.
    tunnel1IkeVersions : [str], default is Undefined, optional
        The IKE versions that are permitted for the first VPN tunnel. Valid values are ikev1 | ikev2.
    tunnel1InsideCidr : str, default is Undefined, optional
        The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    tunnel1InsideIpv6Cidr : str, default is Undefined, optional
        The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    tunnel1LogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel1LogOptionsItems0], default is Undefined, optional
        Options for logging VPN tunnel activity. See Log Options below for more details.
    tunnel1Phase1DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel1Phase1EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel1Phase1IntegrityAlgorithms : [str], default is Undefined, optional
        One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel1Phase1LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 28800.
    tunnel1Phase2DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel1Phase2EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel1Phase2IntegrityAlgorithms : [str], default is Undefined, optional
        List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel1Phase2LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 3600.
    tunnel1RekeyFuzzPercentage : float, default is Undefined, optional
        The percentage of the rekey window for the first VPN tunnel (determined by tunnel1_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    tunnel1RekeyMarginTimeSeconds : float, default is Undefined, optional
        The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel1_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel1_phase2_lifetime_seconds.
    tunnel1ReplayWindowSize : float, default is Undefined, optional
        The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between 64 and 2048.
    tunnel1StartupAction : str, default is Undefined, optional
        The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    tunnel1VgwInsideAddress : str, default is Undefined, optional
        The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
    tunnel2Address : str, default is Undefined, optional
        The public IP address of the second VPN tunnel.
    tunnel2BgpAsn : str, default is Undefined, optional
        The bgp asn number of the second VPN tunnel.
    tunnel2BgpHoldtime : float, default is Undefined, optional
        The bgp holdtime of the second VPN tunnel.
    tunnel2CgwInsideAddress : str, default is Undefined, optional
        The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
    tunnel2DpdTimeoutAction : str, default is Undefined, optional
        The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    tunnel2DpdTimeoutSeconds : float, default is Undefined, optional
        The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than 30.
    tunnel2EnableTunnelLifecycleControl : bool, default is Undefined, optional
        Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are true | false.
    tunnel2IkeVersions : [str], default is Undefined, optional
        The IKE versions that are permitted for the second VPN tunnel. Valid values are ikev1 | ikev2.
    tunnel2InsideCidr : str, default is Undefined, optional
        The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    tunnel2InsideIpv6Cidr : str, default is Undefined, optional
        The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    tunnel2LogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel2LogOptionsItems0], default is Undefined, optional
        Options for logging VPN tunnel activity. See Log Options below for more details.
    tunnel2Phase1DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel2Phase1EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel2Phase1IntegrityAlgorithms : [str], default is Undefined, optional
        One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel2Phase1LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 28800.
    tunnel2Phase2DhGroupNumbers : [float], default is Undefined, optional
        List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    tunnel2Phase2EncryptionAlgorithms : [str], default is Undefined, optional
        List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    tunnel2Phase2IntegrityAlgorithms : [str], default is Undefined, optional
        List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    tunnel2Phase2LifetimeSeconds : float, default is Undefined, optional
        The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 3600.
    tunnel2RekeyFuzzPercentage : float, default is Undefined, optional
        The percentage of the rekey window for the second VPN tunnel (determined by tunnel2_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    tunnel2RekeyMarginTimeSeconds : float, default is Undefined, optional
        The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel2_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel2_phase2_lifetime_seconds.
    tunnel2ReplayWindowSize : float, default is Undefined, optional
        The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between 64 and 2048.
    tunnel2StartupAction : str, default is Undefined, optional
        The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    tunnel2VgwInsideAddress : str, default is Undefined, optional
        The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
    tunnelInsideIpVersion : str, default is Undefined, optional
        Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are ipv4 | ipv6. ipv6 Supports only EC2 Transit Gateway.
    $type : str, default is Undefined, optional
        The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
    vgwTelemetry : [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderVgwTelemetryItems0], default is Undefined, optional
        Telemetry for the VPN tunnels. Detailed below.
    vpnGatewayId : str, default is Undefined, optional
        The ID of the Virtual Private Gateway.
    """


    arn?: str

    coreNetworkArn?: str

    coreNetworkAttachmentArn?: str

    customerGatewayId?: str

    enableAcceleration?: bool

    id?: str

    localIpv4NetworkCidr?: str

    localIpv6NetworkCidr?: str

    outsideIpAddressType?: str

    remoteIpv4NetworkCidr?: str

    remoteIpv6NetworkCidr?: str

    routes?: [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderRoutesItems0]

    staticRoutesOnly?: bool

    tags?: {str:str}

    tagsAll?: {str:str}

    transitGatewayAttachmentId?: str

    transitGatewayId?: str

    transportTransitGatewayAttachmentId?: str

    tunnel1Address?: str

    tunnel1BgpAsn?: str

    tunnel1BgpHoldtime?: float

    tunnel1CgwInsideAddress?: str

    tunnel1DpdTimeoutAction?: str

    tunnel1DpdTimeoutSeconds?: float

    tunnel1EnableTunnelLifecycleControl?: bool

    tunnel1IkeVersions?: [str]

    tunnel1InsideCidr?: str

    tunnel1InsideIpv6Cidr?: str

    tunnel1LogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel1LogOptionsItems0]

    tunnel1Phase1DhGroupNumbers?: [float]

    tunnel1Phase1EncryptionAlgorithms?: [str]

    tunnel1Phase1IntegrityAlgorithms?: [str]

    tunnel1Phase1LifetimeSeconds?: float

    tunnel1Phase2DhGroupNumbers?: [float]

    tunnel1Phase2EncryptionAlgorithms?: [str]

    tunnel1Phase2IntegrityAlgorithms?: [str]

    tunnel1Phase2LifetimeSeconds?: float

    tunnel1RekeyFuzzPercentage?: float

    tunnel1RekeyMarginTimeSeconds?: float

    tunnel1ReplayWindowSize?: float

    tunnel1StartupAction?: str

    tunnel1VgwInsideAddress?: str

    tunnel2Address?: str

    tunnel2BgpAsn?: str

    tunnel2BgpHoldtime?: float

    tunnel2CgwInsideAddress?: str

    tunnel2DpdTimeoutAction?: str

    tunnel2DpdTimeoutSeconds?: float

    tunnel2EnableTunnelLifecycleControl?: bool

    tunnel2IkeVersions?: [str]

    tunnel2InsideCidr?: str

    tunnel2InsideIpv6Cidr?: str

    tunnel2LogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel2LogOptionsItems0]

    tunnel2Phase1DhGroupNumbers?: [float]

    tunnel2Phase1EncryptionAlgorithms?: [str]

    tunnel2Phase1IntegrityAlgorithms?: [str]

    tunnel2Phase1LifetimeSeconds?: float

    tunnel2Phase2DhGroupNumbers?: [float]

    tunnel2Phase2EncryptionAlgorithms?: [str]

    tunnel2Phase2IntegrityAlgorithms?: [str]

    tunnel2Phase2LifetimeSeconds?: float

    tunnel2RekeyFuzzPercentage?: float

    tunnel2RekeyMarginTimeSeconds?: float

    tunnel2ReplayWindowSize?: float

    tunnel2StartupAction?: str

    tunnel2VgwInsideAddress?: str

    tunnelInsideIpVersion?: str

    $type?: str

    vgwTelemetry?: [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderVgwTelemetryItems0]

    vpnGatewayId?: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderRoutesItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection status at provider routes items0

    Attributes
    ----------
    destinationCidrBlock : str, default is Undefined, optional
        The CIDR block associated with the local subnet of the customer data center.
    source : str, default is Undefined, optional
        Indicates how the routes were provided.
    state : str, default is Undefined, optional
        The current state of the static route.
    """


    destinationCidrBlock?: str

    source?: str

    state?: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel1LogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection status at provider tunnel1 log options items0

    Attributes
    ----------
    cloudwatchLogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel1LogOptionsItems0CloudwatchLogOptionsItems0], default is Undefined, optional
        Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    """


    cloudwatchLogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel1LogOptionsItems0CloudwatchLogOptionsItems0]


schema Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel1LogOptionsItems0CloudwatchLogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection status at provider tunnel1 log options items0 cloudwatch log options items0

    Attributes
    ----------
    logEnabled : bool, default is Undefined, optional
        Enable or disable VPN tunnel logging feature. The default is false.
    logGroupArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    logOutputFormat : str, default is Undefined, optional
        Set log format. Default format is json. Possible values are: json and text. The default is json.
    """


    logEnabled?: bool

    logGroupArn?: str

    logOutputFormat?: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel2LogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection status at provider tunnel2 log options items0

    Attributes
    ----------
    cloudwatchLogOptions : [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel2LogOptionsItems0CloudwatchLogOptionsItems0], default is Undefined, optional
        Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    """


    cloudwatchLogOptions?: [Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel2LogOptionsItems0CloudwatchLogOptionsItems0]


schema Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderTunnel2LogOptionsItems0CloudwatchLogOptionsItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection status at provider tunnel2 log options items0 cloudwatch log options items0

    Attributes
    ----------
    logEnabled : bool, default is Undefined, optional
        Enable or disable VPN tunnel logging feature. The default is false.
    logGroupArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    logOutputFormat : str, default is Undefined, optional
        Set log format. Default format is json. Possible values are: json and text. The default is json.
    """


    logEnabled?: bool

    logGroupArn?: str

    logOutputFormat?: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionStatusAtProviderVgwTelemetryItems0:
    r"""
    ec2 aws upbound io v1beta1 v p n connection status at provider vgw telemetry items0

    Attributes
    ----------
    acceptedRouteCount : float, default is Undefined, optional
        The number of accepted routes.
    certificateArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.
    lastStatusChange : str, default is Undefined, optional
        The date and time of the last change in status.
    outsideIpAddress : str, default is Undefined, optional
        The Internet-routable IP address of the virtual private gateway's outside interface.
    status : str, default is Undefined, optional
        The status of the VPN tunnel.
    statusMessage : str, default is Undefined, optional
        If an error occurs, a description of the error.
    """


    acceptedRouteCount?: float

    certificateArn?: str

    lastStatusChange?: str

    outsideIpAddress?: str

    status?: str

    statusMessage?: str


schema Ec2AwsUpboundIoV1beta1VPNConnectionStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


