"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema EIP:
    r"""
    EIP is the Schema for the EIPs API. Provides an Elastic IP resource.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "EIP", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1EIPSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1EIPStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "EIP" = "EIP"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1EIPSpec

    status?: Ec2AwsUpboundIoV1beta1EIPStatus


schema Ec2AwsUpboundIoV1beta1EIPSpec:
    r"""
    EIPSpec defines the desired state of EIP

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1EIPSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1EIPSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1EIPSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1EIPSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1EIPSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1EIPSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1EIPSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1EIPSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1EIPSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 e IP spec for provider

    Attributes
    ----------
    address : str, default is Undefined, optional
        IP address from an EC2 BYOIP pool. This option is only available for VPC EIPs.
    associateWithPrivateIp : str, default is Undefined, optional
        User-specified primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
    customerOwnedIpv4Pool : str, default is Undefined, optional
        ID  of a customer-owned address pool. For more on customer owned IP addressed check out Customer-owned IP addresses guide.
    domain : str, default is Undefined, optional
        Indicates if this EIP is for use in VPC (vpc).
    instance : str, default is Undefined, optional
        EC2 instance ID.
    instanceRef : Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceRef, default is Undefined, optional
        instance ref
    instanceSelector : Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceSelector, default is Undefined, optional
        instance selector
    ipamPoolId : str, default is Undefined, optional
        The ID of an IPAM pool which has an Amazon-provided or BYOIP public IPv4 CIDR provisioned to it.
    networkBorderGroup : str, default is Undefined, optional
        Location from which the IP address is advertised. Use this parameter to limit the address to this location.
    networkInterface : str, default is Undefined, optional
        Network interface ID to associate with.
    networkInterfaceRef : Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceRef, default is Undefined, optional
        network interface ref
    networkInterfaceSelector : Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceSelector, default is Undefined, optional
        network interface selector
    publicIpv4Pool : str, default is Undefined, optional
        EC2 IPv4 address pool identifier or amazon.
        This option is only available for VPC EIPs.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    vpc : bool, default is Undefined, optional
        Boolean if the EIP is in a VPC or not. Use domain instead.
        Defaults to true unless the region supports EC2-Classic.
    """


    address?: str

    associateWithPrivateIp?: str

    customerOwnedIpv4Pool?: str

    domain?: str

    instance?: str

    instanceRef?: Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceRef

    instanceSelector?: Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceSelector

    ipamPoolId?: str

    networkBorderGroup?: str

    networkInterface?: str

    networkInterfaceRef?: Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceRef

    networkInterfaceSelector?: Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceSelector

    publicIpv4Pool?: str

    region: str

    tags?: {str:str}

    vpc?: bool


schema Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceRef:
    r"""
    Reference to a Instance in ec2 to populate instance.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceRefPolicy


schema Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceSelector:
    r"""
    Selector for a Instance in ec2 to populate instance.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceSelectorPolicy


schema Ec2AwsUpboundIoV1beta1EIPSpecForProviderInstanceSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceRef:
    r"""
    Reference to a NetworkInterface in ec2 to populate networkInterface.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceRefPolicy


schema Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceSelector:
    r"""
    Selector for a NetworkInterface in ec2 to populate networkInterface.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceSelectorPolicy


schema Ec2AwsUpboundIoV1beta1EIPSpecForProviderNetworkInterfaceSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1EIPSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    address : str, default is Undefined, optional
        IP address from an EC2 BYOIP pool. This option is only available for VPC EIPs.
    associateWithPrivateIp : str, default is Undefined, optional
        User-specified primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
    customerOwnedIpv4Pool : str, default is Undefined, optional
        ID  of a customer-owned address pool. For more on customer owned IP addressed check out Customer-owned IP addresses guide.
    domain : str, default is Undefined, optional
        Indicates if this EIP is for use in VPC (vpc).
    instance : str, default is Undefined, optional
        EC2 instance ID.
    instanceRef : Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceRef, default is Undefined, optional
        instance ref
    instanceSelector : Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceSelector, default is Undefined, optional
        instance selector
    ipamPoolId : str, default is Undefined, optional
        The ID of an IPAM pool which has an Amazon-provided or BYOIP public IPv4 CIDR provisioned to it.
    networkBorderGroup : str, default is Undefined, optional
        Location from which the IP address is advertised. Use this parameter to limit the address to this location.
    networkInterface : str, default is Undefined, optional
        Network interface ID to associate with.
    networkInterfaceRef : Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceRef, default is Undefined, optional
        network interface ref
    networkInterfaceSelector : Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceSelector, default is Undefined, optional
        network interface selector
    publicIpv4Pool : str, default is Undefined, optional
        EC2 IPv4 address pool identifier or amazon.
        This option is only available for VPC EIPs.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    vpc : bool, default is Undefined, optional
        Boolean if the EIP is in a VPC or not. Use domain instead.
        Defaults to true unless the region supports EC2-Classic.
    """


    address?: str

    associateWithPrivateIp?: str

    customerOwnedIpv4Pool?: str

    domain?: str

    instance?: str

    instanceRef?: Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceRef

    instanceSelector?: Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceSelector

    ipamPoolId?: str

    networkBorderGroup?: str

    networkInterface?: str

    networkInterfaceRef?: Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceRef

    networkInterfaceSelector?: Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceSelector

    publicIpv4Pool?: str

    tags?: {str:str}

    vpc?: bool


schema Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceRef:
    r"""
    Reference to a Instance in ec2 to populate instance.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceRefPolicy


schema Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceSelector:
    r"""
    Selector for a Instance in ec2 to populate instance.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceSelectorPolicy


schema Ec2AwsUpboundIoV1beta1EIPSpecInitProviderInstanceSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceRef:
    r"""
    Reference to a NetworkInterface in ec2 to populate networkInterface.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceRefPolicy


schema Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceSelector:
    r"""
    Selector for a NetworkInterface in ec2 to populate networkInterface.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceSelectorPolicy


schema Ec2AwsUpboundIoV1beta1EIPSpecInitProviderNetworkInterfaceSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1EIPSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1EIPSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1EIPSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1EIPSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1EIPSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1EIPSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1EIPStatus:
    r"""
    EIPStatus defines the observed state of EIP.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1EIPStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1EIPStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1EIPStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1EIPStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1EIPStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 e IP status at provider

    Attributes
    ----------
    address : str, default is Undefined, optional
        IP address from an EC2 BYOIP pool. This option is only available for VPC EIPs.
    allocationId : str, default is Undefined, optional
        ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.
    arn : str, default is Undefined, optional
        arn
    associateWithPrivateIp : str, default is Undefined, optional
        User-specified primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
    associationId : str, default is Undefined, optional
        ID representing the association of the address with an instance in a VPC.
    carrierIp : str, default is Undefined, optional
        Carrier IP address.
    customerOwnedIp : str, default is Undefined, optional
        Customer owned IP.
    customerOwnedIpv4Pool : str, default is Undefined, optional
        ID  of a customer-owned address pool. For more on customer owned IP addressed check out Customer-owned IP addresses guide.
    domain : str, default is Undefined, optional
        Indicates if this EIP is for use in VPC (vpc).
    id : str, default is Undefined, optional
        Contains the EIP allocation ID.
    instance : str, default is Undefined, optional
        EC2 instance ID.
    ipamPoolId : str, default is Undefined, optional
        The ID of an IPAM pool which has an Amazon-provided or BYOIP public IPv4 CIDR provisioned to it.
    networkBorderGroup : str, default is Undefined, optional
        Location from which the IP address is advertised. Use this parameter to limit the address to this location.
    networkInterface : str, default is Undefined, optional
        Network interface ID to associate with.
    privateDns : str, default is Undefined, optional
        The Private DNS associated with the Elastic IP address (if in VPC).
    privateIp : str, default is Undefined, optional
        Contains the private IP address (if in VPC).
    ptrRecord : str, default is Undefined, optional
        The DNS pointer (PTR) record for the IP address.
    publicDns : str, default is Undefined, optional
        Public DNS associated with the Elastic IP address.
    publicIp : str, default is Undefined, optional
        Contains the public IP address.
    publicIpv4Pool : str, default is Undefined, optional
        EC2 IPv4 address pool identifier or amazon.
        This option is only available for VPC EIPs.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    vpc : bool, default is Undefined, optional
        Boolean if the EIP is in a VPC or not. Use domain instead.
        Defaults to true unless the region supports EC2-Classic.
    """


    address?: str

    allocationId?: str

    arn?: str

    associateWithPrivateIp?: str

    associationId?: str

    carrierIp?: str

    customerOwnedIp?: str

    customerOwnedIpv4Pool?: str

    domain?: str

    id?: str

    instance?: str

    ipamPoolId?: str

    networkBorderGroup?: str

    networkInterface?: str

    privateDns?: str

    privateIp?: str

    ptrRecord?: str

    publicDns?: str

    publicIp?: str

    publicIpv4Pool?: str

    tags?: {str:str}

    tagsAll?: {str:str}

    vpc?: bool


schema Ec2AwsUpboundIoV1beta1EIPStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


