apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: argocdcommitstatuses.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: ArgoCDCommitStatus
    listKind: ArgoCDCommitStatusList
    plural: argocdcommitstatuses
    singular: argocdcommitstatus
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ArgoCDCommitStatus is the Schema for the argocdcommitstatuses API.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ArgoCDCommitStatusSpec defines the desired state of ArgoCDCommitStatus.
              properties:
                applicationSelector:
                  description: ApplicationSelector is a label selector that selects the Argo CD applications to which this commit status applies.
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                      items:
                        description: |-
                          A label selector requirement is a selector that contains values, a key, and an operator that
                          relates the key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies to.
                            type: string
                          operator:
                            description: |-
                              operator represents a key's relationship to a set of values.
                              Valid operators are In, NotIn, Exists and DoesNotExist.
                            type: string
                          values:
                            description: |-
                              values is an array of string values. If the operator is In or NotIn,
                              the values array must be non-empty. If the operator is Exists or DoesNotExist,
                              the values array must be empty. This array is replaced during a strategic
                              merge patch.
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                        required:
                          - key
                          - operator
                        type: object
                      type: array
                      x-kubernetes-list-type: atomic
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: |-
                        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                        map is equivalent to an element of matchExpressions, whose key field is "key", the
                        operator is "In", and the values array contains only "value". The requirements are ANDed.
                      type: object
                  type: object
                  x-kubernetes-map-type: atomic
                promotionStrategyRef:
                  description: PromotionStrategyRef is a reference to the promotion strategy that this commit status applies to.
                  properties:
                    name:
                      description: Name is the name of the object to refer to.
                      type: string
                  required:
                    - name
                  type: object
                url:
                  description: URL generates the URL to use in the CommitStatus, for example a link to the Argo CD UI.
                  properties:
                    options:
                      description: "Options sets options for the template. Options are described by\nstrings, either a simple string or \"key=value\". There can be at\nmost one equals sign in an option string. If the option string\nis unrecognized or otherwise invalid, Option panics.\n\nKnown options:\n\nmissingkey: Control the behavior during execution if a map is\nindexed with a key that is not present in the map.\n\n\t\"missingkey=default\" or \"missingkey=invalid\"\n\t\tThe default behavior: Do nothing and continue execution.\n\t\tIf printed, the result of the index operation is the string\n\t\t\"<no value>\".\n\t\"missingkey=zero\"\n\t\tThe operation returns the zero value for the map type's element.\n\t\"missingkey=error\"\n\t\tExecution stops immediately with an error."
                      items:
                        type: string
                      type: array
                    template:
                      description: |-
                        Template is a go text template and receives .Environment and .ArgoCDCommitStatus variables. A function called urlQueryEscape
                        is available to escape url query parameters. The template can be configured with options to control the behavior
                        during execution if a variable is not present.

                        Example:

                          {{- $baseURL := "https://dev.argocd.local" -}}
                          {{- if eq .Environment "environment/development" -}}
                          {{- $baseURL = "https://dev.argocd.local" -}}
                          {{- else if eq .Environment "environment/staging" -}}
                          {{- $baseURL = "https://staging.argocd.local" -}}
                          {{- else if eq .Environment "environment/production" -}}
                          {{- $baseURL = "https://prod.argocd.local" -}}
                          {{- end -}}
                          {{- $labels := "" -}}
                          {{- range $key, $value := .ArgoCDCommitStatus.Spec.ApplicationSelector.MatchLabels -}}
                          {{- $labels = printf "%s%s=%s," $labels $key $value -}}
                          {{- end -}}
                          {{ printf "%s/applications?labels=%s" $baseURL (urlQueryEscape $labels) }}
                      type: string
                  type: object
              required:
                - applicationSelector
                - promotionStrategyRef
              type: object
            status:
              description: ArgoCDCommitStatusStatus defines the observed state of ArgoCDCommitStatus.
              properties:
                applicationsSelected:
                  description: |-
                    ApplicationsSelected represents the Argo CD applications that are selected by the commit status.
                    This field is sorted by environment (same order as the referenced PromotionStrategy), then namespace, then name.
                  items:
                    description: ApplicationsSelected represents the Argo CD applications that are selected by the commit status.
                    properties:
                      clusterName:
                        description: ClusterName is the name of the cluster that the application manifest is deployed to.
                        type: string
                      environment:
                        description: Environment is the syncSource.targetBranch of the Argo CD application (in effect, its environment).
                        type: string
                      lastTransitionTime:
                        description: LastTransitionTime is the last time the phase transitioned.
                        format: date-time
                        type: string
                      name:
                        description: Name is the name of the Argo CD application.
                        type: string
                      namespace:
                        description: Namespace is the namespace of the Argo CD application.
                        type: string
                      phase:
                        description: Phase is the current phase of the commit status.
                        type: string
                      sha:
                        description: Sha is the commit SHA that this status is associated with.
                        type: string
                    required:
                      - clusterName
                      - name
                      - namespace
                      - phase
                      - sha
                    type: object
                  type: array
                conditions:
                  description: Conditions Represents the observations of the current state.
                  items:
                    description: Condition contains details for one aspect of the current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: changetransferpolicies.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: ChangeTransferPolicy
    listKind: ChangeTransferPolicyList
    plural: changetransferpolicies
    singular: changetransferpolicy
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.active.dry.sha
          name: Active Dry Sha
          type: string
        - jsonPath: .status.proposed.dry.sha
          name: Proposed Dry Sha
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ChangeTransferPolicy is the Schema for the changetransferpolicies API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ChangeTransferPolicySpec defines the desired state of ChangeTransferPolicy
              properties:
                activeBranch:
                  description: ActiveBranch staging hydrated branch
                  type: string
                activeCommitStatuses:
                  description: ActiveCommitStatuses lists the statuses to be monitored on the active branch
                  items:
                    description: CommitStatusSelector is used to select commit statuses by their key.
                    properties:
                      key:
                        maxLength: 63
                        minLength: 1
                        pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                        type: string
                    required:
                      - key
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - key
                  x-kubernetes-list-type: map
                autoMerge:
                  default: true
                  type: boolean
                gitRepositoryRef:
                  description: RepositoryReference what repository to open the PR on.
                  properties:
                    name:
                      description: Name is the name of the object to refer to.
                      type: string
                  required:
                    - name
                  type: object
                proposedBranch:
                  description: ProposedBranch staging hydrated branch
                  type: string
                proposedCommitStatuses:
                  description: ProposedCommitStatuses lists the statuses to be monitored on the proposed branch
                  items:
                    description: CommitStatusSelector is used to select commit statuses by their key.
                    properties:
                      key:
                        maxLength: 63
                        minLength: 1
                        pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                        type: string
                    required:
                      - key
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - key
                  x-kubernetes-list-type: map
              required:
                - activeBranch
                - gitRepositoryRef
                - proposedBranch
              type: object
            status:
              description: ChangeTransferPolicyStatus defines the observed state of ChangeTransferPolicy
              properties:
                active:
                  description: Active is the state of the active branch.
                  properties:
                    commitStatuses:
                      description: CommitStatuses is a list of commit statuses that are being monitored for this branch.
                      items:
                        description: ChangeRequestPolicyCommitStatusPhase defines the phase of a commit status in a ChangeTransferPolicy.
                        properties:
                          key:
                            description: Key staging hydrated branch
                            maxLength: 63
                            minLength: 1
                            pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                            type: string
                          phase:
                            description: Phase what phase is the status in
                            enum:
                              - pending
                              - success
                              - failure
                            type: string
                          url:
                            description: Url is the URL of the commit status
                            type: string
                        required:
                          - key
                          - phase
                        type: object
                      type: array
                      x-kubernetes-list-map-keys:
                        - key
                      x-kubernetes-list-type: map
                    dry:
                      description: Dry is the dry state of the branch, which is the commit that is being proposed.
                      properties:
                        author:
                          description: Author is the author of the commit
                          type: string
                        body:
                          description: Body is the body of the commit message without the subject line
                          type: string
                        commitTime:
                          description: CommitTime is the time the commit was made
                          format: date-time
                          type: string
                        references:
                          description: References are the references to other commits, that went into the hydration of the branch
                          items:
                            description: |-
                              RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                              it supports only references to a commit. In the future, it may support other types of references.
                            properties:
                              commit:
                                description: Commit contains metadata about the commit that is related in some way to another commit.
                                properties:
                                  author:
                                    description: Author is the author of the commit.
                                    type: string
                                  body:
                                    description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                    type: string
                                  date:
                                    description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                    format: date-time
                                    type: string
                                  repoURL:
                                    description: RepoURL is the URL of the repository where the commit is located.
                                    type: string
                                  sha:
                                    description: Sha is the commit hash.
                                    type: string
                                  subject:
                                    description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                    type: string
                                type: object
                            type: object
                          type: array
                        repoURL:
                          description: RepoURL is the URL of the repository where the commit is located
                          type: string
                        sha:
                          description: Sha is the SHA of the commit in the branch
                          type: string
                        subject:
                          description: Subject is the subject line of the commit message
                          type: string
                      type: object
                    hydrated:
                      description: Hydrated is the hydrated state of the branch, which is the commit that is currently being worked on.
                      properties:
                        author:
                          description: Author is the author of the commit
                          type: string
                        body:
                          description: Body is the body of the commit message without the subject line
                          type: string
                        commitTime:
                          description: CommitTime is the time the commit was made
                          format: date-time
                          type: string
                        references:
                          description: References are the references to other commits, that went into the hydration of the branch
                          items:
                            description: |-
                              RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                              it supports only references to a commit. In the future, it may support other types of references.
                            properties:
                              commit:
                                description: Commit contains metadata about the commit that is related in some way to another commit.
                                properties:
                                  author:
                                    description: Author is the author of the commit.
                                    type: string
                                  body:
                                    description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                    type: string
                                  date:
                                    description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                    format: date-time
                                    type: string
                                  repoURL:
                                    description: RepoURL is the URL of the repository where the commit is located.
                                    type: string
                                  sha:
                                    description: Sha is the commit hash.
                                    type: string
                                  subject:
                                    description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                    type: string
                                type: object
                            type: object
                          type: array
                        repoURL:
                          description: RepoURL is the URL of the repository where the commit is located
                          type: string
                        sha:
                          description: Sha is the SHA of the commit in the branch
                          type: string
                        subject:
                          description: Subject is the subject line of the commit message
                          type: string
                      type: object
                  type: object
                conditions:
                  description: Conditions Represents the observations of the current state.
                  items:
                    description: Condition contains details for one aspect of the current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
                history:
                  description: |-
                    History defines the history of promoted changes done by the ChangeTransferPolicy. You can think of
                    it as a list of PRs merged by GitOps Promoter. It will not include changes that were manually merged.
                    The history length is hard-coded to be at most 5 entries. This may change in the future.
                    History is constructed on a best-effort basis and should be used for informational purposes only.
                    History is in reverse chronological order (newest is first).
                  items:
                    description: History describes a particular change that was promoted by the ChangeTransferPolicy.
                    properties:
                      active:
                        description: Active is the state of the active branch at the time the PR was merged.
                        properties:
                          commitStatuses:
                            description: CommitStatuses is a list of commit statuses that are being monitored for this branch.
                            items:
                              description: ChangeRequestPolicyCommitStatusPhase defines the phase of a commit status in a ChangeTransferPolicy.
                              properties:
                                key:
                                  description: Key staging hydrated branch
                                  maxLength: 63
                                  minLength: 1
                                  pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                                  type: string
                                phase:
                                  description: Phase what phase is the status in
                                  enum:
                                    - pending
                                    - success
                                    - failure
                                  type: string
                                url:
                                  description: Url is the URL of the commit status
                                  type: string
                              required:
                                - key
                                - phase
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                              - key
                            x-kubernetes-list-type: map
                          dry:
                            description: Dry is the dry state of the branch, which is the commit that is being proposed.
                            properties:
                              author:
                                description: Author is the author of the commit
                                type: string
                              body:
                                description: Body is the body of the commit message without the subject line
                                type: string
                              commitTime:
                                description: CommitTime is the time the commit was made
                                format: date-time
                                type: string
                              references:
                                description: References are the references to other commits, that went into the hydration of the branch
                                items:
                                  description: |-
                                    RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                                    it supports only references to a commit. In the future, it may support other types of references.
                                  properties:
                                    commit:
                                      description: Commit contains metadata about the commit that is related in some way to another commit.
                                      properties:
                                        author:
                                          description: Author is the author of the commit.
                                          type: string
                                        body:
                                          description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                          type: string
                                        date:
                                          description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                          format: date-time
                                          type: string
                                        repoURL:
                                          description: RepoURL is the URL of the repository where the commit is located.
                                          type: string
                                        sha:
                                          description: Sha is the commit hash.
                                          type: string
                                        subject:
                                          description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                          type: string
                                      type: object
                                  type: object
                                type: array
                              repoURL:
                                description: RepoURL is the URL of the repository where the commit is located
                                type: string
                              sha:
                                description: Sha is the SHA of the commit in the branch
                                type: string
                              subject:
                                description: Subject is the subject line of the commit message
                                type: string
                            type: object
                          hydrated:
                            description: Hydrated is the hydrated state of the branch, which is the commit that is currently being worked on.
                            properties:
                              author:
                                description: Author is the author of the commit
                                type: string
                              body:
                                description: Body is the body of the commit message without the subject line
                                type: string
                              commitTime:
                                description: CommitTime is the time the commit was made
                                format: date-time
                                type: string
                              references:
                                description: References are the references to other commits, that went into the hydration of the branch
                                items:
                                  description: |-
                                    RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                                    it supports only references to a commit. In the future, it may support other types of references.
                                  properties:
                                    commit:
                                      description: Commit contains metadata about the commit that is related in some way to another commit.
                                      properties:
                                        author:
                                          description: Author is the author of the commit.
                                          type: string
                                        body:
                                          description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                          type: string
                                        date:
                                          description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                          format: date-time
                                          type: string
                                        repoURL:
                                          description: RepoURL is the URL of the repository where the commit is located.
                                          type: string
                                        sha:
                                          description: Sha is the commit hash.
                                          type: string
                                        subject:
                                          description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                          type: string
                                      type: object
                                  type: object
                                type: array
                              repoURL:
                                description: RepoURL is the URL of the repository where the commit is located
                                type: string
                              sha:
                                description: Sha is the SHA of the commit in the branch
                                type: string
                              subject:
                                description: Subject is the subject line of the commit message
                                type: string
                            type: object
                        type: object
                      proposed:
                        description: Proposed is the state of the proposed branch at the time the PR was merged.
                        properties:
                          commitStatuses:
                            description: |-
                              CommitStatuses is a list of commit statuses that were being monitored for this branch.
                              This contains the state frozen at the moment the PR was merged.
                            items:
                              description: ChangeRequestPolicyCommitStatusPhase defines the phase of a commit status in a ChangeTransferPolicy.
                              properties:
                                key:
                                  description: Key staging hydrated branch
                                  maxLength: 63
                                  minLength: 1
                                  pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                                  type: string
                                phase:
                                  description: Phase what phase is the status in
                                  enum:
                                    - pending
                                    - success
                                    - failure
                                  type: string
                                url:
                                  description: Url is the URL of the commit status
                                  type: string
                              required:
                                - key
                                - phase
                              type: object
                            type: array
                          hydrated:
                            description: Hydrated is the hydrated state of the branch, which is the commit that is currently being worked on.
                            properties:
                              author:
                                description: Author is the author of the commit
                                type: string
                              body:
                                description: Body is the body of the commit message without the subject line
                                type: string
                              commitTime:
                                description: CommitTime is the time the commit was made
                                format: date-time
                                type: string
                              references:
                                description: References are the references to other commits, that went into the hydration of the branch
                                items:
                                  description: |-
                                    RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                                    it supports only references to a commit. In the future, it may support other types of references.
                                  properties:
                                    commit:
                                      description: Commit contains metadata about the commit that is related in some way to another commit.
                                      properties:
                                        author:
                                          description: Author is the author of the commit.
                                          type: string
                                        body:
                                          description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                          type: string
                                        date:
                                          description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                          format: date-time
                                          type: string
                                        repoURL:
                                          description: RepoURL is the URL of the repository where the commit is located.
                                          type: string
                                        sha:
                                          description: Sha is the commit hash.
                                          type: string
                                        subject:
                                          description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                          type: string
                                      type: object
                                  type: object
                                type: array
                              repoURL:
                                description: RepoURL is the URL of the repository where the commit is located
                                type: string
                              sha:
                                description: Sha is the SHA of the commit in the branch
                                type: string
                              subject:
                                description: Subject is the subject line of the commit message
                                type: string
                            type: object
                        type: object
                      pullRequest:
                        description: PullRequest is the state of the pull request that was created for this ChangeTransferPolicy.
                        properties:
                          id:
                            description: ID is the unique identifier of the pull request, set by the SCM.
                            type: string
                          prCreationTime:
                            description: PRCreationTime is the time when the pull request was created.
                            format: date-time
                            type: string
                          state:
                            description: State is the state of the pull request.
                            enum:
                              - closed
                              - merged
                              - open
                            type: string
                          url:
                            description: Url is the URL of the pull request.
                            type: string
                        type: object
                    type: object
                  type: array
                proposed:
                  description: Proposed is the state of the proposed branch.
                  properties:
                    commitStatuses:
                      description: CommitStatuses is a list of commit statuses that are being monitored for this branch.
                      items:
                        description: ChangeRequestPolicyCommitStatusPhase defines the phase of a commit status in a ChangeTransferPolicy.
                        properties:
                          key:
                            description: Key staging hydrated branch
                            maxLength: 63
                            minLength: 1
                            pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                            type: string
                          phase:
                            description: Phase what phase is the status in
                            enum:
                              - pending
                              - success
                              - failure
                            type: string
                          url:
                            description: Url is the URL of the commit status
                            type: string
                        required:
                          - key
                          - phase
                        type: object
                      type: array
                      x-kubernetes-list-map-keys:
                        - key
                      x-kubernetes-list-type: map
                    dry:
                      description: Dry is the dry state of the branch, which is the commit that is being proposed.
                      properties:
                        author:
                          description: Author is the author of the commit
                          type: string
                        body:
                          description: Body is the body of the commit message without the subject line
                          type: string
                        commitTime:
                          description: CommitTime is the time the commit was made
                          format: date-time
                          type: string
                        references:
                          description: References are the references to other commits, that went into the hydration of the branch
                          items:
                            description: |-
                              RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                              it supports only references to a commit. In the future, it may support other types of references.
                            properties:
                              commit:
                                description: Commit contains metadata about the commit that is related in some way to another commit.
                                properties:
                                  author:
                                    description: Author is the author of the commit.
                                    type: string
                                  body:
                                    description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                    type: string
                                  date:
                                    description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                    format: date-time
                                    type: string
                                  repoURL:
                                    description: RepoURL is the URL of the repository where the commit is located.
                                    type: string
                                  sha:
                                    description: Sha is the commit hash.
                                    type: string
                                  subject:
                                    description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                    type: string
                                type: object
                            type: object
                          type: array
                        repoURL:
                          description: RepoURL is the URL of the repository where the commit is located
                          type: string
                        sha:
                          description: Sha is the SHA of the commit in the branch
                          type: string
                        subject:
                          description: Subject is the subject line of the commit message
                          type: string
                      type: object
                    hydrated:
                      description: Hydrated is the hydrated state of the branch, which is the commit that is currently being worked on.
                      properties:
                        author:
                          description: Author is the author of the commit
                          type: string
                        body:
                          description: Body is the body of the commit message without the subject line
                          type: string
                        commitTime:
                          description: CommitTime is the time the commit was made
                          format: date-time
                          type: string
                        references:
                          description: References are the references to other commits, that went into the hydration of the branch
                          items:
                            description: |-
                              RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                              it supports only references to a commit. In the future, it may support other types of references.
                            properties:
                              commit:
                                description: Commit contains metadata about the commit that is related in some way to another commit.
                                properties:
                                  author:
                                    description: Author is the author of the commit.
                                    type: string
                                  body:
                                    description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                    type: string
                                  date:
                                    description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                    format: date-time
                                    type: string
                                  repoURL:
                                    description: RepoURL is the URL of the repository where the commit is located.
                                    type: string
                                  sha:
                                    description: Sha is the commit hash.
                                    type: string
                                  subject:
                                    description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                    type: string
                                type: object
                            type: object
                          type: array
                        repoURL:
                          description: RepoURL is the URL of the repository where the commit is located
                          type: string
                        sha:
                          description: Sha is the SHA of the commit in the branch
                          type: string
                        subject:
                          description: Subject is the subject line of the commit message
                          type: string
                      type: object
                  type: object
                pullRequest:
                  description: PullRequest is the state of the pull request that was created for this ChangeTransferPolicy.
                  properties:
                    id:
                      description: ID is the unique identifier of the pull request, set by the SCM.
                      type: string
                    prCreationTime:
                      description: PRCreationTime is the time when the pull request was created.
                      format: date-time
                      type: string
                    state:
                      description: State is the state of the pull request.
                      enum:
                        - closed
                        - merged
                        - open
                      type: string
                    url:
                      description: Url is the URL of the pull request.
                      type: string
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: clusterscmproviders.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: ClusterScmProvider
    listKind: ClusterScmProviderList
    plural: clusterscmproviders
    singular: clusterscmprovider
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ClusterScmProvider is the Schema for the clusterscmproviders API.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ScmProviderSpec defines the desired state of ScmProvider
              properties:
                fake:
                  description: Fake required configuration for Fake as the SCM provider
                  properties:
                    domain:
                      description: Domain is the domain of the fake SCM provider. This is used for testing purposes.
                      type: string
                  type: object
                forgejo:
                  description: Forgejo required configuration for Forgejo as the SCM provider
                  properties:
                    domain:
                      description: |-
                        Domain is the Forgejo domain, such as "codeberg.org" or "forgejo.mycompany.com".
                        There is no default domain since Forgejo is not a service like Gitlab or Github.
                      type: string
                  required:
                    - domain
                  type: object
                github:
                  description: GitHub required configuration for GitHub as the SCM provider
                  properties:
                    appID:
                      description: AppID is the GitHub App ID.
                      format: int64
                      type: integer
                    domain:
                      description: |-
                        Domain is the GitHub domain, such as "github.mycompany.com". If using the default GitHub domain, leave this field
                        empty.
                      type: string
                      x-kubernetes-validations:
                        - message: Instead of setting the domain to github.com, leave the field blank
                          rule: self != "github.com"
                    installationID:
                      description: |-
                        InstallationID is the GitHub App Installation ID. If you want to use this ScmProvider for multiple
                        GitHub orgs, do not specify this field. The installation ID will be inferred from the repo owner
                        when needed.
                      format: int64
                      minimum: 0
                      type: integer
                  required:
                    - appID
                  type: object
                gitlab:
                  description: GitLab required configuration for GitLab as the SCM provider
                  properties:
                    domain:
                      description: |-
                        Domain is the GitLab domain, such as "gitlab.mycompany.com". If using the default GitLab domain, leave this field
                        empty.
                      type: string
                  type: object
                secretRef:
                  description: SecretRef contains the credentials required to auth to a specific provider
                  properties:
                    name:
                      default: ""
                      description: |-
                        Name of the referent.
                        This field is effectively required, but due to backwards compatibility is
                        allowed to be empty. Instances of this type with an empty value here are
                        almost certainly wrong.
                        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
              type: object
            status:
              description: ScmProviderStatus defines the observed state of ScmProvider
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: commitstatuses.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: CommitStatus
    listKind: CommitStatusList
    plural: commitstatuses
    singular: commitstatus
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.sha
          name: Sha
          type: string
        - jsonPath: .status.phase
          name: Phase
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: CommitStatus is the Schema for the commitstatuses API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: CommitStatusSpec defines the desired state of CommitStatus
              properties:
                description:
                  type: string
                gitRepositoryRef:
                  description: ObjectReference is a reference to an object by name. It is used to refer to objects in the same namespace.
                  properties:
                    name:
                      description: Name is the name of the object to refer to.
                      type: string
                  required:
                    - name
                  type: object
                name:
                  type: string
                phase:
                  default: pending
                  description: CommitStatusPhase represents the phase of a commit status.
                  enum:
                    - pending
                    - success
                    - failure
                  type: string
                sha:
                  type: string
                url:
                  description: Url is a URL that the user can follow to see more details about the status
                  pattern: ^https?://.*$
                  type: string
              required:
                - description
                - gitRepositoryRef
                - name
                - phase
                - sha
              type: object
            status:
              description: CommitStatusStatus defines the observed state of CommitStatus
              properties:
                conditions:
                  description: Conditions Represents the observations of the current state.
                  items:
                    description: Condition contains details for one aspect of the current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
                id:
                  description: Id is the unique identifier of the commit status, set by the SCM
                  type: string
                phase:
                  default: pending
                  description: CommitStatusPhase represents the phase of a commit status.
                  enum:
                    - pending
                    - success
                    - failure
                  type: string
                sha:
                  type: string
              required:
                - id
                - sha
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: controllerconfigurations.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: ControllerConfiguration
    listKind: ControllerConfigurationList
    plural: controllerconfigurations
    singular: controllerconfiguration
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ControllerConfiguration is the Schema for the controllerconfigurations API.
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: |-
                ControllerConfigurationSpec defines the desired state of ControllerConfiguration.

                This spec contains the global configuration for all controllers in the promoter system.
                Each controller has its own configuration section that specifies WorkQueue settings,
                rate limiters, and other controller-specific parameters. All fields should be required,
                with defaults set in manifests rather than in code.
              properties:
                argocdCommitStatus:
                  description: |-
                    ArgoCDCommitStatus contains the configuration for the ArgoCDCommitStatus controller,
                    including WorkQueue settings that control reconciliation behavior.
                  properties:
                    watchLocalApplications:
                      default: true
                      description: |-
                        WatchLocalApplications controls whether the controller monitors Argo CD Applications
                        in the local cluster. When false, the controller will only watch Applications in remote clusters
                        configured via kubeconfig secrets. This is useful when the Argo CD Application CRD is not installed
                        in the local cluster or when all Applications are deployed to remote clusters.
                      type: boolean
                    workQueue:
                      description: |-
                        WorkQueue contains the work queue configuration for the ArgoCDCommitStatus controller.
                        This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                      properties:
                        maxConcurrentReconciles:
                          description: |-
                            MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                            that can run for this controller. Higher values increase throughput but consume more
                            resources. Must be at least 1.
                          type: integer
                        rateLimiter:
                          description: |-
                            RateLimiter defines the rate limiting strategy for the controller's work queue.
                            Rate limiting controls how quickly failed reconciliations are retried and helps
                            prevent overwhelming external APIs or systems.
                          properties:
                            bucket:
                              description: |-
                                Bucket rate limiter uses a token bucket algorithm to control request rate.
                                Allows bursts while maintaining an average rate limit.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                    This defines the maximum burst size - how many operations can occur in rapid
                                    succession before rate limiting takes effect. Must be non-negative.
                                  type: integer
                                qps:
                                  description: |-
                                    Qps (queries per second) is the rate at which tokens are added to the bucket.
                                    This defines the sustained rate limit for operations. Must be non-negative.
                                  type: integer
                              required:
                                - bucket
                                - qps
                              type: object
                            exponentialFailure:
                              description: |-
                                ExponentialFailure rate limiter increases delay exponentially with each failure.
                                Standard approach for backing off when operations fail repeatedly.
                              properties:
                                baseDelay:
                                  description: |-
                                    BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                    increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                    Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                  type: string
                                maxDelay:
                                  description: |-
                                    MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                    this value, all subsequent retries will use this delay.
                                    Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                  type: string
                              required:
                                - baseDelay
                                - maxDelay
                              type: object
                            fastSlow:
                              description: |-
                                FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                Useful for quickly retrying transient errors while backing off for persistent failures.
                              properties:
                                fastDelay:
                                  description: |-
                                    FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                    Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                  type: string
                                maxFastAttempts:
                                  description: |-
                                    MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                    Must be at least 1.
                                  type: integer
                                slowDelay:
                                  description: |-
                                    SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                    Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                  type: string
                              required:
                                - fastDelay
                                - maxFastAttempts
                                - slowDelay
                              type: object
                            maxOf:
                              description: |-
                                MaxOf allows combining multiple rate limiters, where the maximum delay from all
                                limiters is used. This enables sophisticated rate limiting that respects multiple
                                constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                              items:
                                description: |-
                                  RateLimiterTypes defines the different algorithms available for rate limiting.

                                  Exactly one of the three rate limiter types must be specified:
                                    - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                    - ExponentialFailure: Standard exponential backoff for repeated failures
                                    - Bucket: Token bucket algorithm for controlling overall request rate

                                  See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                                properties:
                                  bucket:
                                    description: |-
                                      Bucket rate limiter uses a token bucket algorithm to control request rate.
                                      Allows bursts while maintaining an average rate limit.
                                    properties:
                                      bucket:
                                        description: |-
                                          Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                          This defines the maximum burst size - how many operations can occur in rapid
                                          succession before rate limiting takes effect. Must be non-negative.
                                        type: integer
                                      qps:
                                        description: |-
                                          Qps (queries per second) is the rate at which tokens are added to the bucket.
                                          This defines the sustained rate limit for operations. Must be non-negative.
                                        type: integer
                                    required:
                                      - bucket
                                      - qps
                                    type: object
                                  exponentialFailure:
                                    description: |-
                                      ExponentialFailure rate limiter increases delay exponentially with each failure.
                                      Standard approach for backing off when operations fail repeatedly.
                                    properties:
                                      baseDelay:
                                        description: |-
                                          BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                          increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                          Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                        type: string
                                      maxDelay:
                                        description: |-
                                          MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                          this value, all subsequent retries will use this delay.
                                          Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                        type: string
                                    required:
                                      - baseDelay
                                      - maxDelay
                                    type: object
                                  fastSlow:
                                    description: |-
                                      FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                      Useful for quickly retrying transient errors while backing off for persistent failures.
                                    properties:
                                      fastDelay:
                                        description: |-
                                          FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                          Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                        type: string
                                      maxFastAttempts:
                                        description: |-
                                          MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                          Must be at least 1.
                                        type: integer
                                      slowDelay:
                                        description: |-
                                          SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                          Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                        type: string
                                    required:
                                      - fastDelay
                                      - maxFastAttempts
                                      - slowDelay
                                    type: object
                                type: object
                                x-kubernetes-validations:
                                  - message: at most one of the fields in [fastSlow exponentialFailure bucket] may be set
                                    rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size() <= 1'
                              maxItems: 3
                              type: array
                          type: object
                          x-kubernetes-validations:
                            - message: at most one of the fields in [fastSlow exponentialFailure bucket maxOf] may be set
                              rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size() <= 1'
                            - message: at most one of the fields in [fastSlow exponentialFailure bucket] may be set
                              rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size() <= 1'
                        requeueDuration:
                          description: |-
                            RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                            This creates a periodic reconciliation loop that ensures the desired state is maintained even
                            without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                          type: string
                      required:
                        - maxConcurrentReconciles
                        - rateLimiter
                        - requeueDuration
                      type: object
                  required:
                    - watchLocalApplications
                    - workQueue
                  type: object
                changeTransferPolicy:
                  description: |-
                    ChangeTransferPolicy contains the configuration for the ChangeTransferPolicy controller,
                    including WorkQueue settings that control reconciliation behavior.
                  properties:
                    workQueue:
                      description: |-
                        WorkQueue contains the work queue configuration for the ChangeTransferPolicy controller.
                        This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                      properties:
                        maxConcurrentReconciles:
                          description: |-
                            MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                            that can run for this controller. Higher values increase throughput but consume more
                            resources. Must be at least 1.
                          type: integer
                        rateLimiter:
                          description: |-
                            RateLimiter defines the rate limiting strategy for the controller's work queue.
                            Rate limiting controls how quickly failed reconciliations are retried and helps
                            prevent overwhelming external APIs or systems.
                          properties:
                            bucket:
                              description: |-
                                Bucket rate limiter uses a token bucket algorithm to control request rate.
                                Allows bursts while maintaining an average rate limit.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                    This defines the maximum burst size - how many operations can occur in rapid
                                    succession before rate limiting takes effect. Must be non-negative.
                                  type: integer
                                qps:
                                  description: |-
                                    Qps (queries per second) is the rate at which tokens are added to the bucket.
                                    This defines the sustained rate limit for operations. Must be non-negative.
                                  type: integer
                              required:
                                - bucket
                                - qps
                              type: object
                            exponentialFailure:
                              description: |-
                                ExponentialFailure rate limiter increases delay exponentially with each failure.
                                Standard approach for backing off when operations fail repeatedly.
                              properties:
                                baseDelay:
                                  description: |-
                                    BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                    increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                    Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                  type: string
                                maxDelay:
                                  description: |-
                                    MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                    this value, all subsequent retries will use this delay.
                                    Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                  type: string
                              required:
                                - baseDelay
                                - maxDelay
                              type: object
                            fastSlow:
                              description: |-
                                FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                Useful for quickly retrying transient errors while backing off for persistent failures.
                              properties:
                                fastDelay:
                                  description: |-
                                    FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                    Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                  type: string
                                maxFastAttempts:
                                  description: |-
                                    MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                    Must be at least 1.
                                  type: integer
                                slowDelay:
                                  description: |-
                                    SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                    Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                  type: string
                              required:
                                - fastDelay
                                - maxFastAttempts
                                - slowDelay
                              type: object
                            maxOf:
                              description: |-
                                MaxOf allows combining multiple rate limiters, where the maximum delay from all
                                limiters is used. This enables sophisticated rate limiting that respects multiple
                                constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                              items:
                                description: |-
                                  RateLimiterTypes defines the different algorithms available for rate limiting.

                                  Exactly one of the three rate limiter types must be specified:
                                    - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                    - ExponentialFailure: Standard exponential backoff for repeated failures
                                    - Bucket: Token bucket algorithm for controlling overall request rate

                                  See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                                properties:
                                  bucket:
                                    description: |-
                                      Bucket rate limiter uses a token bucket algorithm to control request rate.
                                      Allows bursts while maintaining an average rate limit.
                                    properties:
                                      bucket:
                                        description: |-
                                          Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                          This defines the maximum burst size - how many operations can occur in rapid
                                          succession before rate limiting takes effect. Must be non-negative.
                                        type: integer
                                      qps:
                                        description: |-
                                          Qps (queries per second) is the rate at which tokens are added to the bucket.
                                          This defines the sustained rate limit for operations. Must be non-negative.
                                        type: integer
                                    required:
                                      - bucket
                                      - qps
                                    type: object
                                  exponentialFailure:
                                    description: |-
                                      ExponentialFailure rate limiter increases delay exponentially with each failure.
                                      Standard approach for backing off when operations fail repeatedly.
                                    properties:
                                      baseDelay:
                                        description: |-
                                          BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                          increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                          Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                        type: string
                                      maxDelay:
                                        description: |-
                                          MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                          this value, all subsequent retries will use this delay.
                                          Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                        type: string
                                    required:
                                      - baseDelay
                                      - maxDelay
                                    type: object
                                  fastSlow:
                                    description: |-
                                      FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                      Useful for quickly retrying transient errors while backing off for persistent failures.
                                    properties:
                                      fastDelay:
                                        description: |-
                                          FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                          Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                        type: string
                                      maxFastAttempts:
                                        description: |-
                                          MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                          Must be at least 1.
                                        type: integer
                                      slowDelay:
                                        description: |-
                                          SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                          Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                        type: string
                                    required:
                                      - fastDelay
                                      - maxFastAttempts
                                      - slowDelay
                                    type: object
                                type: object
                                x-kubernetes-validations:
                                  - message: at most one of the fields in [fastSlow exponentialFailure bucket] may be set
                                    rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size() <= 1'
                              maxItems: 3
                              type: array
                          type: object
                          x-kubernetes-validations:
                            - message: at most one of the fields in [fastSlow exponentialFailure bucket maxOf] may be set
                              rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size() <= 1'
                            - message: at most one of the fields in [fastSlow exponentialFailure bucket] may be set
                              rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size() <= 1'
                        requeueDuration:
                          description: |-
                            RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                            This creates a periodic reconciliation loop that ensures the desired state is maintained even
                            without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                          type: string
                      required:
                        - maxConcurrentReconciles
                        - rateLimiter
                        - requeueDuration
                      type: object
                  required:
                    - workQueue
                  type: object
                commitStatus:
                  description: |-
                    CommitStatus contains the configuration for the CommitStatus controller,
                    including WorkQueue settings that control reconciliation behavior.
                  properties:
                    workQueue:
                      description: |-
                        WorkQueue contains the work queue configuration for the CommitStatus controller.
                        This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                      properties:
                        maxConcurrentReconciles:
                          description: |-
                            MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                            that can run for this controller. Higher values increase throughput but consume more
                            resources. Must be at least 1.
                          type: integer
                        rateLimiter:
                          description: |-
                            RateLimiter defines the rate limiting strategy for the controller's work queue.
                            Rate limiting controls how quickly failed reconciliations are retried and helps
                            prevent overwhelming external APIs or systems.
                          properties:
                            bucket:
                              description: |-
                                Bucket rate limiter uses a token bucket algorithm to control request rate.
                                Allows bursts while maintaining an average rate limit.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                    This defines the maximum burst size - how many operations can occur in rapid
                                    succession before rate limiting takes effect. Must be non-negative.
                                  type: integer
                                qps:
                                  description: |-
                                    Qps (queries per second) is the rate at which tokens are added to the bucket.
                                    This defines the sustained rate limit for operations. Must be non-negative.
                                  type: integer
                              required:
                                - bucket
                                - qps
                              type: object
                            exponentialFailure:
                              description: |-
                                ExponentialFailure rate limiter increases delay exponentially with each failure.
                                Standard approach for backing off when operations fail repeatedly.
                              properties:
                                baseDelay:
                                  description: |-
                                    BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                    increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                    Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                  type: string
                                maxDelay:
                                  description: |-
                                    MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                    this value, all subsequent retries will use this delay.
                                    Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                  type: string
                              required:
                                - baseDelay
                                - maxDelay
                              type: object
                            fastSlow:
                              description: |-
                                FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                Useful for quickly retrying transient errors while backing off for persistent failures.
                              properties:
                                fastDelay:
                                  description: |-
                                    FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                    Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                  type: string
                                maxFastAttempts:
                                  description: |-
                                    MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                    Must be at least 1.
                                  type: integer
                                slowDelay:
                                  description: |-
                                    SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                    Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                  type: string
                              required:
                                - fastDelay
                                - maxFastAttempts
                                - slowDelay
                              type: object
                            maxOf:
                              description: |-
                                MaxOf allows combining multiple rate limiters, where the maximum delay from all
                                limiters is used. This enables sophisticated rate limiting that respects multiple
                                constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                              items:
                                description: |-
                                  RateLimiterTypes defines the different algorithms available for rate limiting.

                                  Exactly one of the three rate limiter types must be specified:
                                    - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                    - ExponentialFailure: Standard exponential backoff for repeated failures
                                    - Bucket: Token bucket algorithm for controlling overall request rate

                                  See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                                properties:
                                  bucket:
                                    description: |-
                                      Bucket rate limiter uses a token bucket algorithm to control request rate.
                                      Allows bursts while maintaining an average rate limit.
                                    properties:
                                      bucket:
                                        description: |-
                                          Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                          This defines the maximum burst size - how many operations can occur in rapid
                                          succession before rate limiting takes effect. Must be non-negative.
                                        type: integer
                                      qps:
                                        description: |-
                                          Qps (queries per second) is the rate at which tokens are added to the bucket.
                                          This defines the sustained rate limit for operations. Must be non-negative.
                                        type: integer
                                    required:
                                      - bucket
                                      - qps
                                    type: object
                                  exponentialFailure:
                                    description: |-
                                      ExponentialFailure rate limiter increases delay exponentially with each failure.
                                      Standard approach for backing off when operations fail repeatedly.
                                    properties:
                                      baseDelay:
                                        description: |-
                                          BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                          increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                          Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                        type: string
                                      maxDelay:
                                        description: |-
                                          MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                          this value, all subsequent retries will use this delay.
                                          Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                        type: string
                                    required:
                                      - baseDelay
                                      - maxDelay
                                    type: object
                                  fastSlow:
                                    description: |-
                                      FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                      Useful for quickly retrying transient errors while backing off for persistent failures.
                                    properties:
                                      fastDelay:
                                        description: |-
                                          FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                          Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                        type: string
                                      maxFastAttempts:
                                        description: |-
                                          MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                          Must be at least 1.
                                        type: integer
                                      slowDelay:
                                        description: |-
                                          SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                          Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                        type: string
                                    required:
                                      - fastDelay
                                      - maxFastAttempts
                                      - slowDelay
                                    type: object
                                type: object
                                x-kubernetes-validations:
                                  - message: at most one of the fields in [fastSlow exponentialFailure bucket] may be set
                                    rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size() <= 1'
                              maxItems: 3
                              type: array
                          type: object
                          x-kubernetes-validations:
                            - message: at most one of the fields in [fastSlow exponentialFailure bucket maxOf] may be set
                              rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size() <= 1'
                            - message: at most one of the fields in [fastSlow exponentialFailure bucket] may be set
                              rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size() <= 1'
                        requeueDuration:
                          description: |-
                            RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                            This creates a periodic reconciliation loop that ensures the desired state is maintained even
                            without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                          type: string
                      required:
                        - maxConcurrentReconciles
                        - rateLimiter
                        - requeueDuration
                      type: object
                  required:
                    - workQueue
                  type: object
                promotionStrategy:
                  description: |-
                    PromotionStrategy contains the configuration for the PromotionStrategy controller,
                    including WorkQueue settings that control reconciliation behavior.
                  properties:
                    workQueue:
                      description: |-
                        WorkQueue contains the work queue configuration for the PromotionStrategy controller.
                        This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                      properties:
                        maxConcurrentReconciles:
                          description: |-
                            MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                            that can run for this controller. Higher values increase throughput but consume more
                            resources. Must be at least 1.
                          type: integer
                        rateLimiter:
                          description: |-
                            RateLimiter defines the rate limiting strategy for the controller's work queue.
                            Rate limiting controls how quickly failed reconciliations are retried and helps
                            prevent overwhelming external APIs or systems.
                          properties:
                            bucket:
                              description: |-
                                Bucket rate limiter uses a token bucket algorithm to control request rate.
                                Allows bursts while maintaining an average rate limit.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                    This defines the maximum burst size - how many operations can occur in rapid
                                    succession before rate limiting takes effect. Must be non-negative.
                                  type: integer
                                qps:
                                  description: |-
                                    Qps (queries per second) is the rate at which tokens are added to the bucket.
                                    This defines the sustained rate limit for operations. Must be non-negative.
                                  type: integer
                              required:
                                - bucket
                                - qps
                              type: object
                            exponentialFailure:
                              description: |-
                                ExponentialFailure rate limiter increases delay exponentially with each failure.
                                Standard approach for backing off when operations fail repeatedly.
                              properties:
                                baseDelay:
                                  description: |-
                                    BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                    increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                    Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                  type: string
                                maxDelay:
                                  description: |-
                                    MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                    this value, all subsequent retries will use this delay.
                                    Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                  type: string
                              required:
                                - baseDelay
                                - maxDelay
                              type: object
                            fastSlow:
                              description: |-
                                FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                Useful for quickly retrying transient errors while backing off for persistent failures.
                              properties:
                                fastDelay:
                                  description: |-
                                    FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                    Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                  type: string
                                maxFastAttempts:
                                  description: |-
                                    MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                    Must be at least 1.
                                  type: integer
                                slowDelay:
                                  description: |-
                                    SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                    Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                  type: string
                              required:
                                - fastDelay
                                - maxFastAttempts
                                - slowDelay
                              type: object
                            maxOf:
                              description: |-
                                MaxOf allows combining multiple rate limiters, where the maximum delay from all
                                limiters is used. This enables sophisticated rate limiting that respects multiple
                                constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                              items:
                                description: |-
                                  RateLimiterTypes defines the different algorithms available for rate limiting.

                                  Exactly one of the three rate limiter types must be specified:
                                    - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                    - ExponentialFailure: Standard exponential backoff for repeated failures
                                    - Bucket: Token bucket algorithm for controlling overall request rate

                                  See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                                properties:
                                  bucket:
                                    description: |-
                                      Bucket rate limiter uses a token bucket algorithm to control request rate.
                                      Allows bursts while maintaining an average rate limit.
                                    properties:
                                      bucket:
                                        description: |-
                                          Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                          This defines the maximum burst size - how many operations can occur in rapid
                                          succession before rate limiting takes effect. Must be non-negative.
                                        type: integer
                                      qps:
                                        description: |-
                                          Qps (queries per second) is the rate at which tokens are added to the bucket.
                                          This defines the sustained rate limit for operations. Must be non-negative.
                                        type: integer
                                    required:
                                      - bucket
                                      - qps
                                    type: object
                                  exponentialFailure:
                                    description: |-
                                      ExponentialFailure rate limiter increases delay exponentially with each failure.
                                      Standard approach for backing off when operations fail repeatedly.
                                    properties:
                                      baseDelay:
                                        description: |-
                                          BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                          increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                          Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                        type: string
                                      maxDelay:
                                        description: |-
                                          MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                          this value, all subsequent retries will use this delay.
                                          Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                        type: string
                                    required:
                                      - baseDelay
                                      - maxDelay
                                    type: object
                                  fastSlow:
                                    description: |-
                                      FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                      Useful for quickly retrying transient errors while backing off for persistent failures.
                                    properties:
                                      fastDelay:
                                        description: |-
                                          FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                          Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                        type: string
                                      maxFastAttempts:
                                        description: |-
                                          MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                          Must be at least 1.
                                        type: integer
                                      slowDelay:
                                        description: |-
                                          SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                          Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                        type: string
                                    required:
                                      - fastDelay
                                      - maxFastAttempts
                                      - slowDelay
                                    type: object
                                type: object
                                x-kubernetes-validations:
                                  - message: at most one of the fields in [fastSlow exponentialFailure bucket] may be set
                                    rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size() <= 1'
                              maxItems: 3
                              type: array
                          type: object
                          x-kubernetes-validations:
                            - message: at most one of the fields in [fastSlow exponentialFailure bucket maxOf] may be set
                              rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size() <= 1'
                            - message: at most one of the fields in [fastSlow exponentialFailure bucket] may be set
                              rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size() <= 1'
                        requeueDuration:
                          description: |-
                            RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                            This creates a periodic reconciliation loop that ensures the desired state is maintained even
                            without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                          type: string
                      required:
                        - maxConcurrentReconciles
                        - rateLimiter
                        - requeueDuration
                      type: object
                  required:
                    - workQueue
                  type: object
                pullRequest:
                  description: |-
                    PullRequest contains the configuration for the PullRequest controller,
                    including WorkQueue settings and pull request template configuration.
                  properties:
                    template:
                      description: |-
                        Template is the template configuration used to generate pull request titles and descriptions.
                        Uses Go template syntax with Sprig functions available.
                      properties:
                        description:
                          description: |-
                            Description is the template used to generate the body/description of the pull request.
                            Uses Go template syntax with Sprig functions available for string manipulation.
                          type: string
                        title:
                          description: |-
                            Title is the template used to generate the title of the pull request.
                            Uses Go template syntax with Sprig functions available for string manipulation.
                          type: string
                      required:
                        - description
                        - title
                      type: object
                    workQueue:
                      description: |-
                        WorkQueue contains the work queue configuration for the PullRequest controller.
                        This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                      properties:
                        maxConcurrentReconciles:
                          description: |-
                            MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                            that can run for this controller. Higher values increase throughput but consume more
                            resources. Must be at least 1.
                          type: integer
                        rateLimiter:
                          description: |-
                            RateLimiter defines the rate limiting strategy for the controller's work queue.
                            Rate limiting controls how quickly failed reconciliations are retried and helps
                            prevent overwhelming external APIs or systems.
                          properties:
                            bucket:
                              description: |-
                                Bucket rate limiter uses a token bucket algorithm to control request rate.
                                Allows bursts while maintaining an average rate limit.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                    This defines the maximum burst size - how many operations can occur in rapid
                                    succession before rate limiting takes effect. Must be non-negative.
                                  type: integer
                                qps:
                                  description: |-
                                    Qps (queries per second) is the rate at which tokens are added to the bucket.
                                    This defines the sustained rate limit for operations. Must be non-negative.
                                  type: integer
                              required:
                                - bucket
                                - qps
                              type: object
                            exponentialFailure:
                              description: |-
                                ExponentialFailure rate limiter increases delay exponentially with each failure.
                                Standard approach for backing off when operations fail repeatedly.
                              properties:
                                baseDelay:
                                  description: |-
                                    BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                    increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                    Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                  type: string
                                maxDelay:
                                  description: |-
                                    MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                    this value, all subsequent retries will use this delay.
                                    Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                  type: string
                              required:
                                - baseDelay
                                - maxDelay
                              type: object
                            fastSlow:
                              description: |-
                                FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                Useful for quickly retrying transient errors while backing off for persistent failures.
                              properties:
                                fastDelay:
                                  description: |-
                                    FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                    Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                  type: string
                                maxFastAttempts:
                                  description: |-
                                    MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                    Must be at least 1.
                                  type: integer
                                slowDelay:
                                  description: |-
                                    SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                    Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                  type: string
                              required:
                                - fastDelay
                                - maxFastAttempts
                                - slowDelay
                              type: object
                            maxOf:
                              description: |-
                                MaxOf allows combining multiple rate limiters, where the maximum delay from all
                                limiters is used. This enables sophisticated rate limiting that respects multiple
                                constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                              items:
                                description: |-
                                  RateLimiterTypes defines the different algorithms available for rate limiting.

                                  Exactly one of the three rate limiter types must be specified:
                                    - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                    - ExponentialFailure: Standard exponential backoff for repeated failures
                                    - Bucket: Token bucket algorithm for controlling overall request rate

                                  See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                                properties:
                                  bucket:
                                    description: |-
                                      Bucket rate limiter uses a token bucket algorithm to control request rate.
                                      Allows bursts while maintaining an average rate limit.
                                    properties:
                                      bucket:
                                        description: |-
                                          Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                          This defines the maximum burst size - how many operations can occur in rapid
                                          succession before rate limiting takes effect. Must be non-negative.
                                        type: integer
                                      qps:
                                        description: |-
                                          Qps (queries per second) is the rate at which tokens are added to the bucket.
                                          This defines the sustained rate limit for operations. Must be non-negative.
                                        type: integer
                                    required:
                                      - bucket
                                      - qps
                                    type: object
                                  exponentialFailure:
                                    description: |-
                                      ExponentialFailure rate limiter increases delay exponentially with each failure.
                                      Standard approach for backing off when operations fail repeatedly.
                                    properties:
                                      baseDelay:
                                        description: |-
                                          BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                          increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                          Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                        type: string
                                      maxDelay:
                                        description: |-
                                          MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                          this value, all subsequent retries will use this delay.
                                          Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                        type: string
                                    required:
                                      - baseDelay
                                      - maxDelay
                                    type: object
                                  fastSlow:
                                    description: |-
                                      FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                      Useful for quickly retrying transient errors while backing off for persistent failures.
                                    properties:
                                      fastDelay:
                                        description: |-
                                          FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                          Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                        type: string
                                      maxFastAttempts:
                                        description: |-
                                          MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                          Must be at least 1.
                                        type: integer
                                      slowDelay:
                                        description: |-
                                          SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                          Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                        type: string
                                    required:
                                      - fastDelay
                                      - maxFastAttempts
                                      - slowDelay
                                    type: object
                                type: object
                                x-kubernetes-validations:
                                  - message: at most one of the fields in [fastSlow exponentialFailure bucket] may be set
                                    rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size() <= 1'
                              maxItems: 3
                              type: array
                          type: object
                          x-kubernetes-validations:
                            - message: at most one of the fields in [fastSlow exponentialFailure bucket maxOf] may be set
                              rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size() <= 1'
                            - message: at most one of the fields in [fastSlow exponentialFailure bucket] may be set
                              rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size() <= 1'
                        requeueDuration:
                          description: |-
                            RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                            This creates a periodic reconciliation loop that ensures the desired state is maintained even
                            without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                          type: string
                      required:
                        - maxConcurrentReconciles
                        - rateLimiter
                        - requeueDuration
                      type: object
                  required:
                    - template
                    - workQueue
                  type: object
              required:
                - argocdCommitStatus
                - changeTransferPolicy
                - commitStatus
                - promotionStrategy
                - pullRequest
              type: object
            status:
              description: |-
                ControllerConfigurationStatus defines the observed state of ControllerConfiguration.

                Currently, this resource does not maintain any status information as it is a configuration-only
                resource. Status fields may be added in the future to track configuration validation or
                controller health metrics.
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: gitrepositories.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: GitRepository
    listKind: GitRepositoryList
    plural: gitrepositories
    singular: gitrepository
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: GitRepository is the Schema for the gitrepositories API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: GitRepositorySpec defines the desired state of GitRepository
              properties:
                fake:
                  description: FakeRepo is a placeholder for a repository in the fake SCM provider, used for testing purposes.
                  properties:
                    name:
                      description: Name is the name of the repository.
                      type: string
                    owner:
                      description: Owner is the owner of the repository.
                      type: string
                  required:
                    - name
                    - owner
                  type: object
                forgejo:
                  description: ForgejoRepo is a repository in Forgejo, identified by its owner and name.
                  properties:
                    name:
                      description: Name is the name of the repository.
                      type: string
                    owner:
                      description: Owner is the owner of the repository.
                      type: string
                  required:
                    - name
                    - owner
                  type: object
                github:
                  description: GitHubRepo is a repository in GitHub, identified by its owner and name.
                  properties:
                    name:
                      description: Name is the name of the repository.
                      maxLength: 100
                      pattern: ^[a-zA-Z0-9_\-\.]+$
                      type: string
                    owner:
                      description: Owner is the owner of the repository, which can be a user or an organization.
                      maxLength: 39
                      pattern: ^[a-zA-Z0-9][a-zA-Z0-9\-]*$
                      type: string
                  required:
                    - name
                    - owner
                  type: object
                gitlab:
                  description: GitLabRepo is a repository in GitLab, identified by its namespace, name, and project ID.
                  properties:
                    name:
                      description: Name is the project slug of the repository.
                      pattern: ^[a-zA-Z0-9_\-\/.]+$
                      type: string
                    namespace:
                      description: Namespace is the user, group or group with subgroup (e.g. group/subgroup).
                      pattern: ^[a-zA-Z0-9_\-\/.]+$
                      type: string
                    projectId:
                      description: ProjectID is the ID of the project in GitLab.
                      type: integer
                  required:
                    - name
                    - namespace
                    - projectId
                  type: object
                scmProviderRef:
                  description: ScmProviderObjectReference is a reference to a SCM provider object.
                  properties:
                    kind:
                      default: ScmProvider
                      description: Kind is the type of resource being referenced
                      enum:
                        - ScmProvider
                        - ClusterScmProvider
                      type: string
                    name:
                      description: Name is the name of the resource being referenced
                      type: string
                  required:
                    - kind
                    - name
                  type: object
              required:
                - scmProviderRef
              type: object
            status:
              description: GitRepositoryStatus defines the observed state of GitRepository
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: promotionstrategies.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: PromotionStrategy
    listKind: PromotionStrategyList
    plural: promotionstrategies
    singular: promotionstrategy
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.active.dry.sha
          name: Active Dry Sha
          type: string
        - jsonPath: .status.proposed.dry.sha
          name: Proposed Dry Sha
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: PromotionStrategy is the Schema for the promotionstrategies API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: PromotionStrategySpec defines the desired state of PromotionStrategy
              properties:
                activeCommitStatuses:
                  description: |-
                    ActiveCommitStatuses are commit statuses describing an actively running dry commit. If an active commit status
                    is failing for an environment, subsequent environments will not deploy the failing commit.

                    The commit statuses specified in this field apply to all environments in the promotion sequence. You can also
                    specify commit statuses for individual environments in the `environments` field.
                  items:
                    description: CommitStatusSelector is used to select commit statuses by their key.
                    properties:
                      key:
                        maxLength: 63
                        minLength: 1
                        pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                        type: string
                    required:
                      - key
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - key
                  x-kubernetes-list-type: map
                environments:
                  description: Environments is the sequence of environments that a dry commit will be promoted through.
                  items:
                    description: Environment defines a single environment in the promotion sequence.
                    properties:
                      activeCommitStatuses:
                        description: |-
                          ActiveCommitStatuses are commit statuses describing an actively running dry commit. If an active commit status
                          is failing for an environment, subsequent environments will not deploy the failing commit.

                          The commit statuses specified in this field apply to this environment only. You can also specify commit statuses
                          for all environments in the `spec.activeCommitStatuses` field.
                        items:
                          description: CommitStatusSelector is used to select commit statuses by their key.
                          properties:
                            key:
                              maxLength: 63
                              minLength: 1
                              pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                              type: string
                          required:
                            - key
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                          - key
                        x-kubernetes-list-type: map
                      autoMerge:
                        default: true
                        description: |-
                          AutoMerge determines whether the dry commit should be automatically merged into the next branch in the sequence.
                          If false, the dry commit will be proposed but not merged.
                        type: boolean
                      branch:
                        description: Branch is the name of the active branch for the environment.
                        type: string
                      proposedCommitStatuses:
                        description: |-
                          ProposedCommitStatuses are commit statuses describing a proposed dry commit, i.e. one that is not yet running
                          in a live environment. If a proposed commit status is failing for a given environment, the dry commit will not
                          be promoted to that environment.

                          The commit statuses specified in this field apply to this environment only. You can also specify commit statuses
                          for all environments in the `spec.proposedCommitStatuses` field.
                        items:
                          description: CommitStatusSelector is used to select commit statuses by their key.
                          properties:
                            key:
                              maxLength: 63
                              minLength: 1
                              pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                              type: string
                          required:
                            - key
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                          - key
                        x-kubernetes-list-type: map
                    required:
                      - branch
                    type: object
                  minItems: 1
                  type: array
                  x-kubernetes-list-map-keys:
                    - branch
                  x-kubernetes-list-type: map
                gitRepositoryRef:
                  description: RepositoryReference indicates what repository to promote commits in.
                  properties:
                    name:
                      description: Name is the name of the object to refer to.
                      type: string
                  required:
                    - name
                  type: object
                proposedCommitStatuses:
                  description: |-
                    ProposedCommitStatuses are commit statuses describing a proposed dry commit, i.e. one that is not yet running
                    in a live environment. If a proposed commit status is failing for a given environment, the dry commit will not
                    be promoted to that environment.

                    The commit statuses specified in this field apply to all environments in the promotion sequence. You can also
                    specify commit statuses for individual environments in the `environments` field.
                  items:
                    description: CommitStatusSelector is used to select commit statuses by their key.
                    properties:
                      key:
                        maxLength: 63
                        minLength: 1
                        pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                        type: string
                    required:
                      - key
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - key
                  x-kubernetes-list-type: map
              required:
                - environments
                - gitRepositoryRef
              type: object
            status:
              description: PromotionStrategyStatus defines the observed state of PromotionStrategy
              properties:
                conditions:
                  description: Conditions Represents the observations of the current state.
                  items:
                    description: Condition contains details for one aspect of the current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
                environments:
                  description: Environments holds the status of each environment in the promotion sequence.
                  items:
                    description: EnvironmentStatus defines the observed state of an environment in a PromotionStrategy.
                    properties:
                      active:
                        description: Active is the state of the active branch for the environment.
                        properties:
                          commitStatuses:
                            description: CommitStatuses is a list of commit statuses that are being monitored for this branch.
                            items:
                              description: ChangeRequestPolicyCommitStatusPhase defines the phase of a commit status in a ChangeTransferPolicy.
                              properties:
                                key:
                                  description: Key staging hydrated branch
                                  maxLength: 63
                                  minLength: 1
                                  pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                                  type: string
                                phase:
                                  description: Phase what phase is the status in
                                  enum:
                                    - pending
                                    - success
                                    - failure
                                  type: string
                                url:
                                  description: Url is the URL of the commit status
                                  type: string
                              required:
                                - key
                                - phase
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                              - key
                            x-kubernetes-list-type: map
                          dry:
                            description: Dry is the dry state of the branch, which is the commit that is being proposed.
                            properties:
                              author:
                                description: Author is the author of the commit
                                type: string
                              body:
                                description: Body is the body of the commit message without the subject line
                                type: string
                              commitTime:
                                description: CommitTime is the time the commit was made
                                format: date-time
                                type: string
                              references:
                                description: References are the references to other commits, that went into the hydration of the branch
                                items:
                                  description: |-
                                    RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                                    it supports only references to a commit. In the future, it may support other types of references.
                                  properties:
                                    commit:
                                      description: Commit contains metadata about the commit that is related in some way to another commit.
                                      properties:
                                        author:
                                          description: Author is the author of the commit.
                                          type: string
                                        body:
                                          description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                          type: string
                                        date:
                                          description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                          format: date-time
                                          type: string
                                        repoURL:
                                          description: RepoURL is the URL of the repository where the commit is located.
                                          type: string
                                        sha:
                                          description: Sha is the commit hash.
                                          type: string
                                        subject:
                                          description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                          type: string
                                      type: object
                                  type: object
                                type: array
                              repoURL:
                                description: RepoURL is the URL of the repository where the commit is located
                                type: string
                              sha:
                                description: Sha is the SHA of the commit in the branch
                                type: string
                              subject:
                                description: Subject is the subject line of the commit message
                                type: string
                            type: object
                          hydrated:
                            description: Hydrated is the hydrated state of the branch, which is the commit that is currently being worked on.
                            properties:
                              author:
                                description: Author is the author of the commit
                                type: string
                              body:
                                description: Body is the body of the commit message without the subject line
                                type: string
                              commitTime:
                                description: CommitTime is the time the commit was made
                                format: date-time
                                type: string
                              references:
                                description: References are the references to other commits, that went into the hydration of the branch
                                items:
                                  description: |-
                                    RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                                    it supports only references to a commit. In the future, it may support other types of references.
                                  properties:
                                    commit:
                                      description: Commit contains metadata about the commit that is related in some way to another commit.
                                      properties:
                                        author:
                                          description: Author is the author of the commit.
                                          type: string
                                        body:
                                          description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                          type: string
                                        date:
                                          description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                          format: date-time
                                          type: string
                                        repoURL:
                                          description: RepoURL is the URL of the repository where the commit is located.
                                          type: string
                                        sha:
                                          description: Sha is the commit hash.
                                          type: string
                                        subject:
                                          description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                          type: string
                                      type: object
                                  type: object
                                type: array
                              repoURL:
                                description: RepoURL is the URL of the repository where the commit is located
                                type: string
                              sha:
                                description: Sha is the SHA of the commit in the branch
                                type: string
                              subject:
                                description: Subject is the subject line of the commit message
                                type: string
                            type: object
                        type: object
                      branch:
                        description: Branch is the name of the active branch for the environment.
                        type: string
                      history:
                        description: |-
                          History defines the history of promoted changes done by the PromotionStrategy for each environment.
                          You can think of it as a list of PRs merged by GitOps Promoter. It will not include changes that were
                          manually merged. The history length is hard-coded to be at most 5 entries. This may change in the future.
                          History is constructed on a best-effort basis and should be used for informational purposes only.
                          History is in reverse chronological order (newest is first).
                        items:
                          description: History describes a particular change that was promoted by the ChangeTransferPolicy.
                          properties:
                            active:
                              description: Active is the state of the active branch at the time the PR was merged.
                              properties:
                                commitStatuses:
                                  description: CommitStatuses is a list of commit statuses that are being monitored for this branch.
                                  items:
                                    description: ChangeRequestPolicyCommitStatusPhase defines the phase of a commit status in a ChangeTransferPolicy.
                                    properties:
                                      key:
                                        description: Key staging hydrated branch
                                        maxLength: 63
                                        minLength: 1
                                        pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                                        type: string
                                      phase:
                                        description: Phase what phase is the status in
                                        enum:
                                          - pending
                                          - success
                                          - failure
                                        type: string
                                      url:
                                        description: Url is the URL of the commit status
                                        type: string
                                    required:
                                      - key
                                      - phase
                                    type: object
                                  type: array
                                  x-kubernetes-list-map-keys:
                                    - key
                                  x-kubernetes-list-type: map
                                dry:
                                  description: Dry is the dry state of the branch, which is the commit that is being proposed.
                                  properties:
                                    author:
                                      description: Author is the author of the commit
                                      type: string
                                    body:
                                      description: Body is the body of the commit message without the subject line
                                      type: string
                                    commitTime:
                                      description: CommitTime is the time the commit was made
                                      format: date-time
                                      type: string
                                    references:
                                      description: References are the references to other commits, that went into the hydration of the branch
                                      items:
                                        description: |-
                                          RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                                          it supports only references to a commit. In the future, it may support other types of references.
                                        properties:
                                          commit:
                                            description: Commit contains metadata about the commit that is related in some way to another commit.
                                            properties:
                                              author:
                                                description: Author is the author of the commit.
                                                type: string
                                              body:
                                                description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                                type: string
                                              date:
                                                description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                                format: date-time
                                                type: string
                                              repoURL:
                                                description: RepoURL is the URL of the repository where the commit is located.
                                                type: string
                                              sha:
                                                description: Sha is the commit hash.
                                                type: string
                                              subject:
                                                description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                                type: string
                                            type: object
                                        type: object
                                      type: array
                                    repoURL:
                                      description: RepoURL is the URL of the repository where the commit is located
                                      type: string
                                    sha:
                                      description: Sha is the SHA of the commit in the branch
                                      type: string
                                    subject:
                                      description: Subject is the subject line of the commit message
                                      type: string
                                  type: object
                                hydrated:
                                  description: Hydrated is the hydrated state of the branch, which is the commit that is currently being worked on.
                                  properties:
                                    author:
                                      description: Author is the author of the commit
                                      type: string
                                    body:
                                      description: Body is the body of the commit message without the subject line
                                      type: string
                                    commitTime:
                                      description: CommitTime is the time the commit was made
                                      format: date-time
                                      type: string
                                    references:
                                      description: References are the references to other commits, that went into the hydration of the branch
                                      items:
                                        description: |-
                                          RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                                          it supports only references to a commit. In the future, it may support other types of references.
                                        properties:
                                          commit:
                                            description: Commit contains metadata about the commit that is related in some way to another commit.
                                            properties:
                                              author:
                                                description: Author is the author of the commit.
                                                type: string
                                              body:
                                                description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                                type: string
                                              date:
                                                description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                                format: date-time
                                                type: string
                                              repoURL:
                                                description: RepoURL is the URL of the repository where the commit is located.
                                                type: string
                                              sha:
                                                description: Sha is the commit hash.
                                                type: string
                                              subject:
                                                description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                                type: string
                                            type: object
                                        type: object
                                      type: array
                                    repoURL:
                                      description: RepoURL is the URL of the repository where the commit is located
                                      type: string
                                    sha:
                                      description: Sha is the SHA of the commit in the branch
                                      type: string
                                    subject:
                                      description: Subject is the subject line of the commit message
                                      type: string
                                  type: object
                              type: object
                            proposed:
                              description: Proposed is the state of the proposed branch at the time the PR was merged.
                              properties:
                                commitStatuses:
                                  description: |-
                                    CommitStatuses is a list of commit statuses that were being monitored for this branch.
                                    This contains the state frozen at the moment the PR was merged.
                                  items:
                                    description: ChangeRequestPolicyCommitStatusPhase defines the phase of a commit status in a ChangeTransferPolicy.
                                    properties:
                                      key:
                                        description: Key staging hydrated branch
                                        maxLength: 63
                                        minLength: 1
                                        pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                                        type: string
                                      phase:
                                        description: Phase what phase is the status in
                                        enum:
                                          - pending
                                          - success
                                          - failure
                                        type: string
                                      url:
                                        description: Url is the URL of the commit status
                                        type: string
                                    required:
                                      - key
                                      - phase
                                    type: object
                                  type: array
                                hydrated:
                                  description: Hydrated is the hydrated state of the branch, which is the commit that is currently being worked on.
                                  properties:
                                    author:
                                      description: Author is the author of the commit
                                      type: string
                                    body:
                                      description: Body is the body of the commit message without the subject line
                                      type: string
                                    commitTime:
                                      description: CommitTime is the time the commit was made
                                      format: date-time
                                      type: string
                                    references:
                                      description: References are the references to other commits, that went into the hydration of the branch
                                      items:
                                        description: |-
                                          RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                                          it supports only references to a commit. In the future, it may support other types of references.
                                        properties:
                                          commit:
                                            description: Commit contains metadata about the commit that is related in some way to another commit.
                                            properties:
                                              author:
                                                description: Author is the author of the commit.
                                                type: string
                                              body:
                                                description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                                type: string
                                              date:
                                                description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                                format: date-time
                                                type: string
                                              repoURL:
                                                description: RepoURL is the URL of the repository where the commit is located.
                                                type: string
                                              sha:
                                                description: Sha is the commit hash.
                                                type: string
                                              subject:
                                                description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                                type: string
                                            type: object
                                        type: object
                                      type: array
                                    repoURL:
                                      description: RepoURL is the URL of the repository where the commit is located
                                      type: string
                                    sha:
                                      description: Sha is the SHA of the commit in the branch
                                      type: string
                                    subject:
                                      description: Subject is the subject line of the commit message
                                      type: string
                                  type: object
                              type: object
                            pullRequest:
                              description: PullRequest is the state of the pull request that was created for this ChangeTransferPolicy.
                              properties:
                                id:
                                  description: ID is the unique identifier of the pull request, set by the SCM.
                                  type: string
                                prCreationTime:
                                  description: PRCreationTime is the time when the pull request was created.
                                  format: date-time
                                  type: string
                                state:
                                  description: State is the state of the pull request.
                                  enum:
                                    - closed
                                    - merged
                                    - open
                                  type: string
                                url:
                                  description: Url is the URL of the pull request.
                                  type: string
                              type: object
                          type: object
                        type: array
                      lastHealthyDryShas:
                        description: LastHealthyDryShas is a list of dry commits that were observed to be healthy in the environment.
                        items:
                          description: HealthyDryShas is a list of dry commits that were observed to be healthy in the environment.
                          properties:
                            sha:
                              description: Sha is the commit SHA of the dry commit that was observed to be healthy.
                              type: string
                            time:
                              description: Time is the time when the proposed commit for the given dry SHA was merged into the active branch.
                              format: date-time
                              type: string
                          required:
                            - sha
                            - time
                          type: object
                        type: array
                      proposed:
                        description: Proposed is the state of the proposed branch for the environment.
                        properties:
                          commitStatuses:
                            description: CommitStatuses is a list of commit statuses that are being monitored for this branch.
                            items:
                              description: ChangeRequestPolicyCommitStatusPhase defines the phase of a commit status in a ChangeTransferPolicy.
                              properties:
                                key:
                                  description: Key staging hydrated branch
                                  maxLength: 63
                                  minLength: 1
                                  pattern: ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]
                                  type: string
                                phase:
                                  description: Phase what phase is the status in
                                  enum:
                                    - pending
                                    - success
                                    - failure
                                  type: string
                                url:
                                  description: Url is the URL of the commit status
                                  type: string
                              required:
                                - key
                                - phase
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                              - key
                            x-kubernetes-list-type: map
                          dry:
                            description: Dry is the dry state of the branch, which is the commit that is being proposed.
                            properties:
                              author:
                                description: Author is the author of the commit
                                type: string
                              body:
                                description: Body is the body of the commit message without the subject line
                                type: string
                              commitTime:
                                description: CommitTime is the time the commit was made
                                format: date-time
                                type: string
                              references:
                                description: References are the references to other commits, that went into the hydration of the branch
                                items:
                                  description: |-
                                    RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                                    it supports only references to a commit. In the future, it may support other types of references.
                                  properties:
                                    commit:
                                      description: Commit contains metadata about the commit that is related in some way to another commit.
                                      properties:
                                        author:
                                          description: Author is the author of the commit.
                                          type: string
                                        body:
                                          description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                          type: string
                                        date:
                                          description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                          format: date-time
                                          type: string
                                        repoURL:
                                          description: RepoURL is the URL of the repository where the commit is located.
                                          type: string
                                        sha:
                                          description: Sha is the commit hash.
                                          type: string
                                        subject:
                                          description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                          type: string
                                      type: object
                                  type: object
                                type: array
                              repoURL:
                                description: RepoURL is the URL of the repository where the commit is located
                                type: string
                              sha:
                                description: Sha is the SHA of the commit in the branch
                                type: string
                              subject:
                                description: Subject is the subject line of the commit message
                                type: string
                            type: object
                          hydrated:
                            description: Hydrated is the hydrated state of the branch, which is the commit that is currently being worked on.
                            properties:
                              author:
                                description: Author is the author of the commit
                                type: string
                              body:
                                description: Body is the body of the commit message without the subject line
                                type: string
                              commitTime:
                                description: CommitTime is the time the commit was made
                                format: date-time
                                type: string
                              references:
                                description: References are the references to other commits, that went into the hydration of the branch
                                items:
                                  description: |-
                                    RevisionReference contains a reference to a some information that is related in some way to another commit. For now,
                                    it supports only references to a commit. In the future, it may support other types of references.
                                  properties:
                                    commit:
                                      description: Commit contains metadata about the commit that is related in some way to another commit.
                                      properties:
                                        author:
                                          description: Author is the author of the commit.
                                          type: string
                                        body:
                                          description: Body is the body of the commit message, excluding the subject line, i.e. `git show --format=%b`.
                                          type: string
                                        date:
                                          description: Date is the date of the commit, formatted as by `git show -s --format=%aI`.
                                          format: date-time
                                          type: string
                                        repoURL:
                                          description: RepoURL is the URL of the repository where the commit is located.
                                          type: string
                                        sha:
                                          description: Sha is the commit hash.
                                          type: string
                                        subject:
                                          description: Subject is the subject line of the commit message, i.e. `git show --format=%s`.
                                          type: string
                                      type: object
                                  type: object
                                type: array
                              repoURL:
                                description: RepoURL is the URL of the repository where the commit is located
                                type: string
                              sha:
                                description: Sha is the SHA of the commit in the branch
                                type: string
                              subject:
                                description: Subject is the subject line of the commit message
                                type: string
                            type: object
                        type: object
                      pullRequest:
                        description: PullRequest is the state of the pull request that was created for this environment.
                        properties:
                          id:
                            description: ID is the unique identifier of the pull request, set by the SCM.
                            type: string
                          prCreationTime:
                            description: PRCreationTime is the time when the pull request was created.
                            format: date-time
                            type: string
                          state:
                            description: State is the state of the pull request.
                            enum:
                              - closed
                              - merged
                              - open
                            type: string
                          url:
                            description: Url is the URL of the pull request.
                            type: string
                        type: object
                    required:
                      - active
                      - branch
                      - proposed
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - branch
                  x-kubernetes-list-type: map
              required:
                - environments
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: pullrequests.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: PullRequest
    listKind: PullRequestList
    plural: pullrequests
    singular: pullrequest
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.id
          name: ID
          type: string
        - jsonPath: .status.state
          name: State
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: PullRequest is the Schema for the pullrequests API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: PullRequestSpec defines the desired state of PullRequest
              properties:
                commit:
                  description: Commit contains configuration for how we will merge/squash/etc the pull request.
                  properties:
                    message:
                      description: Message is the commit message that will be written for the commit that's made when merging the PR.
                      type: string
                  required:
                    - message
                  type: object
                description:
                  description: Description is the description body of the pull/merge request
                  type: string
                gitRepositoryRef:
                  description: RepositoryReference indicates what repository to open the PR on.
                  properties:
                    name:
                      description: Name is the name of the object to refer to.
                      type: string
                  required:
                    - name
                  type: object
                sourceBranch:
                  description: SourceBranch is the base the git reference that we are merging into Head ---> Base
                  type: string
                  x-kubernetes-validations:
                    - message: Value is immutable
                      rule: self == oldSelf
                state:
                  default: open
                  description: State of the merge request closed/merged/open
                  enum:
                    - closed
                    - merged
                    - open
                  type: string
                targetBranch:
                  description: TargetBranch is the head the git reference we are merging from Head ---> Base
                  type: string
                  x-kubernetes-validations:
                    - message: Value is immutable
                      rule: self == oldSelf
                title:
                  description: Title is the title of the pull request.
                  type: string
              required:
                - gitRepositoryRef
                - sourceBranch
                - state
                - targetBranch
                - title
              type: object
            status:
              description: PullRequestStatus defines the observed state of PullRequest
              properties:
                conditions:
                  description: Conditions Represents the observations of the current state.
                  items:
                    description: Condition contains details for one aspect of the current state of this API Resource.
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
                id:
                  description: ID the id of the pull request
                  type: string
                prCreationTime:
                  description: PRCreationTime the time the PR was created
                  format: date-time
                  type: string
                state:
                  description: State of the merge request closed/merged/open
                  enum:
                    - ""
                    - closed
                    - merged
                    - open
                  type: string
                url:
                  description: Url is the URL of the pull request.
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: revertcommits.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: RevertCommit
    listKind: RevertCommitList
    plural: revertcommits
    singular: revertcommit
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: RevertCommit is the Schema for the revertcommits API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: RevertCommitSpec defines the desired state of RevertCommit
              properties:
                foo:
                  description: Foo is an example field of RevertCommit. Edit revertcommit_types.go to remove/update
                  type: string
              type: object
            status:
              description: RevertCommitStatus defines the observed state of RevertCommit
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: scmproviders.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: ScmProvider
    listKind: ScmProviderList
    plural: scmproviders
    singular: scmprovider
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ScmProvider is the Schema for the scmproviders API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ScmProviderSpec defines the desired state of ScmProvider
              properties:
                fake:
                  description: Fake required configuration for Fake as the SCM provider
                  properties:
                    domain:
                      description: Domain is the domain of the fake SCM provider. This is used for testing purposes.
                      type: string
                  type: object
                forgejo:
                  description: Forgejo required configuration for Forgejo as the SCM provider
                  properties:
                    domain:
                      description: |-
                        Domain is the Forgejo domain, such as "codeberg.org" or "forgejo.mycompany.com".
                        There is no default domain since Forgejo is not a service like Gitlab or Github.
                      type: string
                  required:
                    - domain
                  type: object
                github:
                  description: GitHub required configuration for GitHub as the SCM provider
                  properties:
                    appID:
                      description: AppID is the GitHub App ID.
                      format: int64
                      type: integer
                    domain:
                      description: |-
                        Domain is the GitHub domain, such as "github.mycompany.com". If using the default GitHub domain, leave this field
                        empty.
                      type: string
                      x-kubernetes-validations:
                        - message: Instead of setting the domain to github.com, leave the field blank
                          rule: self != "github.com"
                    installationID:
                      description: |-
                        InstallationID is the GitHub App Installation ID. If you want to use this ScmProvider for multiple
                        GitHub orgs, do not specify this field. The installation ID will be inferred from the repo owner
                        when needed.
                      format: int64
                      minimum: 0
                      type: integer
                  required:
                    - appID
                  type: object
                gitlab:
                  description: GitLab required configuration for GitLab as the SCM provider
                  properties:
                    domain:
                      description: |-
                        Domain is the GitLab domain, such as "gitlab.mycompany.com". If using the default GitLab domain, leave this field
                        empty.
                      type: string
                  type: object
                secretRef:
                  description: SecretRef contains the credentials required to auth to a specific provider
                  properties:
                    name:
                      default: ""
                      description: |-
                        Name of the referent.
                        This field is effectively required, but due to backwards compatibility is
                        allowed to be empty. Instances of this type with an empty value here are
                        almost certainly wrong.
                        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
              type: object
            status:
              description: ScmProviderStatus defines the observed state of ScmProvider
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
