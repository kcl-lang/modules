"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema AMICopy:
    r"""
    AMICopy is the Schema for the AMICopys API. Duplicates an existing Amazon Machine Image (AMI)

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "AMICopy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1AMICopySpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1AMICopyStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "AMICopy" = "AMICopy"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1AMICopySpec

    status?: Ec2AwsUpboundIoV1beta1AMICopyStatus


schema Ec2AwsUpboundIoV1beta1AMICopySpec:
    r"""
    AMICopySpec defines the desired state of AMICopy

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1AMICopySpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1AMICopySpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1AMICopySpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1AMICopySpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1AMICopySpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1AMICopySpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1AMICopySpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1AMICopySpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1AMICopySpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 a m i copy spec for provider

    Attributes
    ----------
    deprecationTime : str, default is Undefined, optional
        deprecation time
    description : str, default is Undefined, optional
        description
    destinationOutpostArn : str, default is Undefined, optional
        ARN of the Outpost to which to copy the AMI.
        Only specify this parameter when copying an AMI from an AWS Region to an Outpost. The AMI must be in the Region of the destination Outpost.
    ebsBlockDevice : [any], default is Undefined, optional
        ebs block device
    encrypted : bool, default is Undefined, optional
        Whether the destination snapshots of the copied image should be encrypted. Defaults to false
    ephemeralBlockDevice : [any], default is Undefined, optional
        ephemeral block device
    kmsKeyId : str, default is Undefined, optional
        Full ARN of the KMS Key to use when encrypting the snapshots of an image during a copy operation. If not specified, then the default AWS KMS Key will be used
    kmsKeyIdRef : Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDRef, default is Undefined, optional
        kms key Id ref
    kmsKeyIdSelector : Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDSelector, default is Undefined, optional
        kms key Id selector
    name : str, default is Undefined, optional
        Region-unique name for the AMI.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    sourceAmiId : str, default is Undefined, optional
        Id of the AMI to copy. This id must be valid in the region
        given by source_ami_region.
    sourceAmiIdRef : Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDRef, default is Undefined, optional
        source ami Id ref
    sourceAmiIdSelector : Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDSelector, default is Undefined, optional
        source ami Id selector
    sourceAmiRegion : str, default is Undefined, optional
        Region from which the AMI will be copied. This may be the
        same as the AWS provider region in order to create a copy within the same region.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    deprecationTime?: str

    description?: str

    destinationOutpostArn?: str

    ebsBlockDevice?: [any]

    encrypted?: bool

    ephemeralBlockDevice?: [any]

    kmsKeyId?: str

    kmsKeyIdRef?: Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDRef

    kmsKeyIdSelector?: Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDSelector

    name?: str

    region: str

    sourceAmiId?: str

    sourceAmiIdRef?: Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDRef

    sourceAmiIdSelector?: Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDSelector

    sourceAmiRegion?: str

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDRef:
    r"""
    Reference to a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDRefPolicy


schema Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDSelector:
    r"""
    Selector for a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1AMICopySpecForProviderKmsKeyIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDRef:
    r"""
    Reference to a AMI in ec2 to populate sourceAmiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDRefPolicy


schema Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDSelector:
    r"""
    Selector for a AMI in ec2 to populate sourceAmiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1AMICopySpecForProviderSourceAmiIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1AMICopySpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    deprecationTime : str, default is Undefined, optional
        deprecation time
    description : str, default is Undefined, optional
        description
    destinationOutpostArn : str, default is Undefined, optional
        ARN of the Outpost to which to copy the AMI.
        Only specify this parameter when copying an AMI from an AWS Region to an Outpost. The AMI must be in the Region of the destination Outpost.
    ebsBlockDevice : [any], default is Undefined, optional
        ebs block device
    encrypted : bool, default is Undefined, optional
        Whether the destination snapshots of the copied image should be encrypted. Defaults to false
    ephemeralBlockDevice : [any], default is Undefined, optional
        ephemeral block device
    kmsKeyId : str, default is Undefined, optional
        Full ARN of the KMS Key to use when encrypting the snapshots of an image during a copy operation. If not specified, then the default AWS KMS Key will be used
    kmsKeyIdRef : Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDRef, default is Undefined, optional
        kms key Id ref
    kmsKeyIdSelector : Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDSelector, default is Undefined, optional
        kms key Id selector
    name : str, default is Undefined, optional
        Region-unique name for the AMI.
    sourceAmiId : str, default is Undefined, optional
        Id of the AMI to copy. This id must be valid in the region
        given by source_ami_region.
    sourceAmiIdRef : Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDRef, default is Undefined, optional
        source ami Id ref
    sourceAmiIdSelector : Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDSelector, default is Undefined, optional
        source ami Id selector
    sourceAmiRegion : str, default is Undefined, optional
        Region from which the AMI will be copied. This may be the
        same as the AWS provider region in order to create a copy within the same region.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    deprecationTime?: str

    description?: str

    destinationOutpostArn?: str

    ebsBlockDevice?: [any]

    encrypted?: bool

    ephemeralBlockDevice?: [any]

    kmsKeyId?: str

    kmsKeyIdRef?: Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDRef

    kmsKeyIdSelector?: Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDSelector

    name?: str

    sourceAmiId?: str

    sourceAmiIdRef?: Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDRef

    sourceAmiIdSelector?: Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDSelector

    sourceAmiRegion?: str

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDRef:
    r"""
    Reference to a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDRefPolicy


schema Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDSelector:
    r"""
    Selector for a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderKmsKeyIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDRef:
    r"""
    Reference to a AMI in ec2 to populate sourceAmiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDRefPolicy


schema Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDSelector:
    r"""
    Selector for a AMI in ec2 to populate sourceAmiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1AMICopySpecInitProviderSourceAmiIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1AMICopySpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1AMICopySpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1AMICopySpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1AMICopySpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1AMICopySpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1AMICopySpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1AMICopyStatus:
    r"""
    AMICopyStatus defines the observed state of AMICopy.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1AMICopyStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1AMICopyStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1AMICopyStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1AMICopyStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1AMICopyStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 a m i copy status at provider

    Attributes
    ----------
    architecture : str, default is Undefined, optional
        architecture
    arn : str, default is Undefined, optional
        ARN of the AMI.
    bootMode : str, default is Undefined, optional
        boot mode
    deprecationTime : str, default is Undefined, optional
        deprecation time
    description : str, default is Undefined, optional
        description
    destinationOutpostArn : str, default is Undefined, optional
        ARN of the Outpost to which to copy the AMI.
        Only specify this parameter when copying an AMI from an AWS Region to an Outpost. The AMI must be in the Region of the destination Outpost.
    ebsBlockDevice : [Ec2AwsUpboundIoV1beta1AMICopyStatusAtProviderEbsBlockDeviceItems0], default is Undefined, optional
        ebs block device
    enaSupport : bool, default is Undefined, optional
        ena support
    encrypted : bool, default is Undefined, optional
        Whether the destination snapshots of the copied image should be encrypted. Defaults to false
    ephemeralBlockDevice : [Ec2AwsUpboundIoV1beta1AMICopyStatusAtProviderEphemeralBlockDeviceItems0], default is Undefined, optional
        ephemeral block device
    hypervisor : str, default is Undefined, optional
        hypervisor
    id : str, default is Undefined, optional
        ID of the created AMI.
    imageLocation : str, default is Undefined, optional
        image location
    imageOwnerAlias : str, default is Undefined, optional
        image owner alias
    imageType : str, default is Undefined, optional
        image type
    imdsSupport : str, default is Undefined, optional
        imds support
    kernelId : str, default is Undefined, optional
        ID of the created AMI.
    kmsKeyId : str, default is Undefined, optional
        Full ARN of the KMS Key to use when encrypting the snapshots of an image during a copy operation. If not specified, then the default AWS KMS Key will be used
    manageEbsSnapshots : bool, default is Undefined, optional
        manage ebs snapshots
    name : str, default is Undefined, optional
        Region-unique name for the AMI.
    ownerId : str, default is Undefined, optional
        ID of the created AMI.
    platform : str, default is Undefined, optional
        platform
    platformDetails : str, default is Undefined, optional
        platform details
    public : bool, default is Undefined, optional
        public
    ramdiskId : str, default is Undefined, optional
        ID of the created AMI.
    rootDeviceName : str, default is Undefined, optional
        Region-unique name for the AMI.
    rootSnapshotId : str, default is Undefined, optional
        ID of the created AMI.
    sourceAmiId : str, default is Undefined, optional
        Id of the AMI to copy. This id must be valid in the region
        given by source_ami_region.
    sourceAmiRegion : str, default is Undefined, optional
        Region from which the AMI will be copied. This may be the
        same as the AWS provider region in order to create a copy within the same region.
    sriovNetSupport : str, default is Undefined, optional
        sriov net support
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        tags all
    tpmSupport : str, default is Undefined, optional
        tpm support
    usageOperation : str, default is Undefined, optional
        usage operation
    virtualizationType : str, default is Undefined, optional
        virtualization type
    """


    architecture?: str

    arn?: str

    bootMode?: str

    deprecationTime?: str

    description?: str

    destinationOutpostArn?: str

    ebsBlockDevice?: [Ec2AwsUpboundIoV1beta1AMICopyStatusAtProviderEbsBlockDeviceItems0]

    enaSupport?: bool

    encrypted?: bool

    ephemeralBlockDevice?: [Ec2AwsUpboundIoV1beta1AMICopyStatusAtProviderEphemeralBlockDeviceItems0]

    hypervisor?: str

    id?: str

    imageLocation?: str

    imageOwnerAlias?: str

    imageType?: str

    imdsSupport?: str

    kernelId?: str

    kmsKeyId?: str

    manageEbsSnapshots?: bool

    name?: str

    ownerId?: str

    platform?: str

    platformDetails?: str

    public?: bool

    ramdiskId?: str

    rootDeviceName?: str

    rootSnapshotId?: str

    sourceAmiId?: str

    sourceAmiRegion?: str

    sriovNetSupport?: str

    tags?: {str:str}

    tagsAll?: {str:str}

    tpmSupport?: str

    usageOperation?: str

    virtualizationType?: str


schema Ec2AwsUpboundIoV1beta1AMICopyStatusAtProviderEbsBlockDeviceItems0:
    r"""
    ec2 aws upbound io v1beta1 a m i copy status at provider ebs block device items0

    Attributes
    ----------
    deleteOnTermination : bool, default is Undefined, optional
        delete on termination
    deviceName : str, default is Undefined, optional
        Region-unique name for the AMI.
    encrypted : bool, default is Undefined, optional
        Whether the destination snapshots of the copied image should be encrypted. Defaults to false
    iops : float, default is Undefined, optional
        iops
    outpostArn : str, default is Undefined, optional
        ARN of the AMI.
    snapshotId : str, default is Undefined, optional
        ID of the created AMI.
    throughput : float, default is Undefined, optional
        throughput
    volumeSize : float, default is Undefined, optional
        volume size
    volumeType : str, default is Undefined, optional
        volume type
    """


    deleteOnTermination?: bool

    deviceName?: str

    encrypted?: bool

    iops?: float

    outpostArn?: str

    snapshotId?: str

    throughput?: float

    volumeSize?: float

    volumeType?: str


schema Ec2AwsUpboundIoV1beta1AMICopyStatusAtProviderEphemeralBlockDeviceItems0:
    r"""
    ec2 aws upbound io v1beta1 a m i copy status at provider ephemeral block device items0

    Attributes
    ----------
    deviceName : str, default is Undefined, optional
        Region-unique name for the AMI.
    virtualName : str, default is Undefined, optional
        Region-unique name for the AMI.
    """


    deviceName?: str

    virtualName?: str


schema Ec2AwsUpboundIoV1beta1AMICopyStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


