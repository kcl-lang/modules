"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema Cluster:
    r"""
    Cluster is the Schema for the clusters API.

    Attributes
    ----------
    apiVersion : str, default is "cluster.x-k8s.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Cluster", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ClusterxK8sIoV1beta1ClusterSpec, default is Undefined, optional
        spec
    status : ClusterxK8sIoV1beta1ClusterStatus, default is Undefined, optional
        status
    """


    apiVersion: "cluster.x-k8s.io/v1beta1" = "cluster.x-k8s.io/v1beta1"

    kind: "Cluster" = "Cluster"

    metadata?: v1.ObjectMeta

    spec?: ClusterxK8sIoV1beta1ClusterSpec

    status?: ClusterxK8sIoV1beta1ClusterStatus


schema ClusterxK8sIoV1beta1ClusterSpec:
    r"""
    ClusterSpec defines the desired state of Cluster.

    Attributes
    ----------
    clusterNetwork : ClusterxK8sIoV1beta1ClusterSpecClusterNetwork, default is Undefined, optional
        cluster network
    controlPlaneEndpoint : ClusterxK8sIoV1beta1ClusterSpecControlPlaneEndpoint, default is Undefined, optional
        control plane endpoint
    controlPlaneRef : ClusterxK8sIoV1beta1ClusterSpecControlPlaneRef, default is Undefined, optional
        control plane ref
    infrastructureRef : ClusterxK8sIoV1beta1ClusterSpecInfrastructureRef, default is Undefined, optional
        infrastructure ref
    paused : bool, default is Undefined, optional
        Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
    topology : ClusterxK8sIoV1beta1ClusterSpecTopology, default is Undefined, optional
        topology
    """


    clusterNetwork?: ClusterxK8sIoV1beta1ClusterSpecClusterNetwork

    controlPlaneEndpoint?: ClusterxK8sIoV1beta1ClusterSpecControlPlaneEndpoint

    controlPlaneRef?: ClusterxK8sIoV1beta1ClusterSpecControlPlaneRef

    infrastructureRef?: ClusterxK8sIoV1beta1ClusterSpecInfrastructureRef

    paused?: bool

    topology?: ClusterxK8sIoV1beta1ClusterSpecTopology


schema ClusterxK8sIoV1beta1ClusterSpecClusterNetwork:
    r"""
    Cluster network configuration.

    Attributes
    ----------
    apiServerPort : int, default is Undefined, optional
        APIServerPort specifies the port the API Server should bind to.
        Defaults to 6443.
    pods : ClusterxK8sIoV1beta1ClusterSpecClusterNetworkPods, default is Undefined, optional
        pods
    serviceDomain : str, default is Undefined, optional
        Domain name for services.
    services : ClusterxK8sIoV1beta1ClusterSpecClusterNetworkServices, default is Undefined, optional
        services
    """


    apiServerPort?: int

    pods?: ClusterxK8sIoV1beta1ClusterSpecClusterNetworkPods

    serviceDomain?: str

    services?: ClusterxK8sIoV1beta1ClusterSpecClusterNetworkServices


schema ClusterxK8sIoV1beta1ClusterSpecClusterNetworkPods:
    r"""
    The network ranges from which Pod networks are allocated.

    Attributes
    ----------
    cidrBlocks : [str], default is Undefined, required
        cidr blocks
    """


    cidrBlocks: [str]


schema ClusterxK8sIoV1beta1ClusterSpecClusterNetworkServices:
    r"""
    The network ranges from which service VIPs are allocated.

    Attributes
    ----------
    cidrBlocks : [str], default is Undefined, required
        cidr blocks
    """


    cidrBlocks: [str]


schema ClusterxK8sIoV1beta1ClusterSpecControlPlaneEndpoint:
    r"""
    ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.

    Attributes
    ----------
    host : str, default is Undefined, required
        The hostname on which the API server is serving.
    port : int, default is Undefined, required
        The port on which the API server is serving.
    """


    host: str

    port: int


schema ClusterxK8sIoV1beta1ClusterSpecControlPlaneRef:
    r"""
    ControlPlaneRef is an optional reference to a provider-specific resource that holds
    the details for provisioning the Control Plane for a Cluster.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterSpecInfrastructureRef:
    r"""
    InfrastructureRef is a reference to a provider-specific resource that holds the details
    for provisioning infrastructure for a cluster in said provider.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterSpecTopology:
    r"""
    This encapsulates the topology for the cluster.
    NOTE: It is required to enable the ClusterTopology
    feature gate flag to activate managed topologies support;
    this feature is highly experimental, and parts of it might still be not implemented.

    Attributes
    ----------
    class : str, default is Undefined, required
        The name of the ClusterClass object to create the topology.
    controlPlane : ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlane, default is Undefined, optional
        control plane
    rolloutAfter : str, default is Undefined, optional
        RolloutAfter performs a rollout of the entire cluster one component at a time,
        control plane first and then machine deployments.


        Deprecated: This field has no function and is going to be removed in the next apiVersion.
    variables : [ClusterxK8sIoV1beta1ClusterSpecTopologyVariablesItems0], default is Undefined, optional
        Variables can be used to customize the Cluster through
        patches. They must comply to the corresponding
        VariableClasses defined in the ClusterClass.
    version : str, default is Undefined, required
        The Kubernetes version of the cluster.
    workers : ClusterxK8sIoV1beta1ClusterSpecTopologyWorkers, default is Undefined, optional
        workers
    """


    class: str

    controlPlane?: ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlane

    rolloutAfter?: str

    variables?: [ClusterxK8sIoV1beta1ClusterSpecTopologyVariablesItems0]

    version: str

    workers?: ClusterxK8sIoV1beta1ClusterSpecTopologyWorkers


schema ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlane:
    r"""
    ControlPlane describes the cluster control plane.

    Attributes
    ----------
    machineHealthCheck : ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMachineHealthCheck, default is Undefined, optional
        machine health check
    metadata : ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMetadata, default is Undefined, optional
        metadata
    nodeDeletionTimeout : str, default is Undefined, optional
        NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine
        hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.
        Defaults to 10 seconds.
    nodeDrainTimeout : str, default is Undefined, optional
        NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.
        The default value is 0, meaning that the node can be drained without any time limitations.
        NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
    nodeVolumeDetachTimeout : str, default is Undefined, optional
        NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes
        to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
    replicas : int, default is Undefined, optional
        Replicas is the number of control plane nodes.
        If the value is nil, the ControlPlane object is created without the number of Replicas
        and it's assumed that the control plane controller does not implement support for this field.
        When specified against a control plane provider that lacks support for this field, this value will be ignored.
    variables : ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneVariables, default is Undefined, optional
        variables
    """


    machineHealthCheck?: ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMachineHealthCheck

    metadata?: ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMetadata

    nodeDeletionTimeout?: str

    nodeDrainTimeout?: str

    nodeVolumeDetachTimeout?: str

    replicas?: int

    variables?: ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneVariables


schema ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMachineHealthCheck:
    r"""
    MachineHealthCheck allows to enable, disable and override
    the MachineHealthCheck configuration in the ClusterClass for this control plane.

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Enable controls if a MachineHealthCheck should be created for the target machines.


        If false: No MachineHealthCheck will be created.


        If not set(default): A MachineHealthCheck will be created if it is defined here or
         in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created.


        If true: A MachineHealthCheck is guaranteed to be created. Cluster validation will
        block if `enable` is true and no MachineHealthCheck definition is available.
    maxUnhealthy : int | str, default is Undefined, optional
        Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by
        "selector" are not healthy.
    nodeStartupTimeout : str, default is Undefined, optional
        NodeStartupTimeout allows to set the maximum time for MachineHealthCheck
        to consider a Machine unhealthy if a corresponding Node isn't associated
        through a `Spec.ProviderID` field.


        The duration set in this field is compared to the greatest of:
        - Cluster's infrastructure ready condition timestamp (if and when available)
        - Control Plane's initialized condition timestamp (if and when available)
        - Machine's infrastructure ready condition timestamp (if and when available)
        - Machine's metadata creation timestamp


        Defaults to 10 minutes.
        If you wish to disable this feature, set the value explicitly to 0.
    remediationTemplate : ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMachineHealthCheckRemediationTemplate, default is Undefined, optional
        remediation template
    unhealthyConditions : [ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMachineHealthCheckUnhealthyConditionsItems0], default is Undefined, optional
        UnhealthyConditions contains a list of the conditions that determine
        whether a node is considered unhealthy. The conditions are combined in a
        logical OR, i.e. if any of the conditions is met, the node is unhealthy.
    unhealthyRange : str, default is Undefined, optional
        Any further remediation is only allowed if the number of machines selected by "selector" as not healthy
        is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy.
        Eg. "[3-5]" - This means that remediation will be allowed only when:
        (a) there are at least 3 unhealthy machines (and)
        (b) there are at most 5 unhealthy machines
    """


    enable?: bool

    maxUnhealthy?: int | str

    nodeStartupTimeout?: str

    remediationTemplate?: ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMachineHealthCheckRemediationTemplate

    unhealthyConditions?: [ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMachineHealthCheckUnhealthyConditionsItems0]

    unhealthyRange?: str


    check:
        _regex_match(str(unhealthyRange), r"^\[[0-9]+-[0-9]+\]$") if unhealthyRange


schema ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMachineHealthCheckRemediationTemplate:
    r"""
    RemediationTemplate is a reference to a remediation template
    provided by an infrastructure provider.


    This field is completely optional, when filled, the MachineHealthCheck controller
    creates a new object from the template referenced and hands off remediation of the machine to
    a controller that lives outside of Cluster API.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMachineHealthCheckUnhealthyConditionsItems0:
    r"""
    UnhealthyCondition represents a Node condition type and value with a timeout
    specified as a duration.  When the named condition has been in the given
    status for at least the timeout value, a node is considered unhealthy.

    Attributes
    ----------
    status : str, default is Undefined, required
        status
    timeout : str, default is Undefined, required
        timeout
    $type : str, default is Undefined, required
        type
    """


    status: str

    timeout: str

    $type: str


    check:
        len(status) >= 1
        len($type) >= 1


schema ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneMetadata:
    r"""
    Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane
    if the ControlPlaneTemplate referenced by the ClusterClass is machine based. If not, it
    is applied only to the ControlPlane.
    At runtime this metadata is merged with the corresponding metadata from the ClusterClass.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: http://kubernetes.io/docs/user-guide/labels
    """


    annotations?: {str:str}

    labels?: {str:str}


schema ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneVariables:
    r"""
    Variables can be used to customize the ControlPlane through patches.

    Attributes
    ----------
    overrides : [ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneVariablesOverridesItems0], default is Undefined, optional
        Overrides can be used to override Cluster level variables.
    """


    overrides?: [ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneVariablesOverridesItems0]


schema ClusterxK8sIoV1beta1ClusterSpecTopologyControlPlaneVariablesOverridesItems0:
    r"""
    ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a
    Variable definition in the ClusterClass `status` variables.

    Attributes
    ----------
    definitionFrom : str, default is Undefined, optional
        DefinitionFrom specifies where the definition of this Variable is from.


        Deprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion.
    name : str, default is Undefined, required
        Name of the variable.
    value : any, default is Undefined, required
        Value of the variable.
        Note: the value will be validated against the schema of the corresponding ClusterClassVariable
        from the ClusterClass.
        Note: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a
        hard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,
        i.e. it is not possible to have no type field.
        Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
    """


    definitionFrom?: str

    name: str

    value: any


schema ClusterxK8sIoV1beta1ClusterSpecTopologyVariablesItems0:
    r"""
    ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a
    Variable definition in the ClusterClass `status` variables.

    Attributes
    ----------
    definitionFrom : str, default is Undefined, optional
        DefinitionFrom specifies where the definition of this Variable is from.


        Deprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion.
    name : str, default is Undefined, required
        Name of the variable.
    value : any, default is Undefined, required
        Value of the variable.
        Note: the value will be validated against the schema of the corresponding ClusterClassVariable
        from the ClusterClass.
        Note: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a
        hard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,
        i.e. it is not possible to have no type field.
        Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
    """


    definitionFrom?: str

    name: str

    value: any


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkers:
    r"""
    Workers encapsulates the different constructs that form the worker nodes
    for the cluster.

    Attributes
    ----------
    machineDeployments : [ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0], default is Undefined, optional
        MachineDeployments is a list of machine deployments in the cluster.
    machinePools : [ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0], default is Undefined, optional
        MachinePools is a list of machine pools in the cluster.
    """


    machineDeployments?: [ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0]

    machinePools?: [ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0]


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0:
    r"""
    MachineDeploymentTopology specifies the different parameters for a set of worker nodes in the topology.
    This set of nodes is managed by a MachineDeployment object whose lifecycle is managed by the Cluster controller.

    Attributes
    ----------
    class : str, default is Undefined, required
        Class is the name of the MachineDeploymentClass used to create the set of worker nodes.
        This should match one of the deployment classes defined in the ClusterClass object
        mentioned in the `Cluster.Spec.Class` field.
    failureDomain : str, default is Undefined, optional
        FailureDomain is the failure domain the machines will be created in.
        Must match a key in the FailureDomains map stored on the cluster object.
    machineHealthCheck : ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0MachineHealthCheck, default is Undefined, optional
        machine health check
    metadata : ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0Metadata, default is Undefined, optional
        metadata
    minReadySeconds : int, default is Undefined, optional
        Minimum number of seconds for which a newly created machine should
        be ready.
        Defaults to 0 (machine will be considered available as soon as it
        is ready)
    name : str, default is Undefined, required
        Name is the unique identifier for this MachineDeploymentTopology.
        The value is used with other unique identifiers to create a MachineDeployment's Name
        (e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,
        the values are hashed together.
    nodeDeletionTimeout : str, default is Undefined, optional
        NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine
        hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.
        Defaults to 10 seconds.
    nodeDrainTimeout : str, default is Undefined, optional
        NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.
        The default value is 0, meaning that the node can be drained without any time limitations.
        NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
    nodeVolumeDetachTimeout : str, default is Undefined, optional
        NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes
        to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
    replicas : int, default is Undefined, optional
        Replicas is the number of worker nodes belonging to this set.
        If the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to 1)
        and it's assumed that an external entity (like cluster autoscaler) is responsible for the management
        of this value.
    strategy : ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0Strategy, default is Undefined, optional
        strategy
    variables : ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0Variables, default is Undefined, optional
        variables
    """


    class: str

    failureDomain?: str

    machineHealthCheck?: ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0MachineHealthCheck

    metadata?: ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0Metadata

    minReadySeconds?: int

    name: str

    nodeDeletionTimeout?: str

    nodeDrainTimeout?: str

    nodeVolumeDetachTimeout?: str

    replicas?: int

    strategy?: ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0Strategy

    variables?: ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0Variables


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0MachineHealthCheck:
    r"""
    MachineHealthCheck allows to enable, disable and override
    the MachineHealthCheck configuration in the ClusterClass for this MachineDeployment.

    Attributes
    ----------
    enable : bool, default is Undefined, optional
        Enable controls if a MachineHealthCheck should be created for the target machines.


        If false: No MachineHealthCheck will be created.


        If not set(default): A MachineHealthCheck will be created if it is defined here or
         in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created.


        If true: A MachineHealthCheck is guaranteed to be created. Cluster validation will
        block if `enable` is true and no MachineHealthCheck definition is available.
    maxUnhealthy : int | str, default is Undefined, optional
        Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by
        "selector" are not healthy.
    nodeStartupTimeout : str, default is Undefined, optional
        NodeStartupTimeout allows to set the maximum time for MachineHealthCheck
        to consider a Machine unhealthy if a corresponding Node isn't associated
        through a `Spec.ProviderID` field.


        The duration set in this field is compared to the greatest of:
        - Cluster's infrastructure ready condition timestamp (if and when available)
        - Control Plane's initialized condition timestamp (if and when available)
        - Machine's infrastructure ready condition timestamp (if and when available)
        - Machine's metadata creation timestamp


        Defaults to 10 minutes.
        If you wish to disable this feature, set the value explicitly to 0.
    remediationTemplate : ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0MachineHealthCheckRemediationTemplate, default is Undefined, optional
        remediation template
    unhealthyConditions : [ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0MachineHealthCheckUnhealthyConditionsItems0], default is Undefined, optional
        UnhealthyConditions contains a list of the conditions that determine
        whether a node is considered unhealthy. The conditions are combined in a
        logical OR, i.e. if any of the conditions is met, the node is unhealthy.
    unhealthyRange : str, default is Undefined, optional
        Any further remediation is only allowed if the number of machines selected by "selector" as not healthy
        is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy.
        Eg. "[3-5]" - This means that remediation will be allowed only when:
        (a) there are at least 3 unhealthy machines (and)
        (b) there are at most 5 unhealthy machines
    """


    enable?: bool

    maxUnhealthy?: int | str

    nodeStartupTimeout?: str

    remediationTemplate?: ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0MachineHealthCheckRemediationTemplate

    unhealthyConditions?: [ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0MachineHealthCheckUnhealthyConditionsItems0]

    unhealthyRange?: str


    check:
        _regex_match(str(unhealthyRange), r"^\[[0-9]+-[0-9]+\]$") if unhealthyRange


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0MachineHealthCheckRemediationTemplate:
    r"""
    RemediationTemplate is a reference to a remediation template
    provided by an infrastructure provider.


    This field is completely optional, when filled, the MachineHealthCheck controller
    creates a new object from the template referenced and hands off remediation of the machine to
    a controller that lives outside of Cluster API.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0MachineHealthCheckUnhealthyConditionsItems0:
    r"""
    UnhealthyCondition represents a Node condition type and value with a timeout
    specified as a duration.  When the named condition has been in the given
    status for at least the timeout value, a node is considered unhealthy.

    Attributes
    ----------
    status : str, default is Undefined, required
        status
    timeout : str, default is Undefined, required
        timeout
    $type : str, default is Undefined, required
        type
    """


    status: str

    timeout: str

    $type: str


    check:
        len(status) >= 1
        len($type) >= 1


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0Metadata:
    r"""
    Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment.
    At runtime this metadata is merged with the corresponding metadata from the ClusterClass.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: http://kubernetes.io/docs/user-guide/labels
    """


    annotations?: {str:str}

    labels?: {str:str}


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0Strategy:
    r"""
    The deployment strategy to use to replace existing machines with
    new ones.

    Attributes
    ----------
    remediation : ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0StrategyRemediation, default is Undefined, optional
        remediation
    rollingUpdate : ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0StrategyRollingUpdate, default is Undefined, optional
        rolling update
    $type : str, default is Undefined, optional
        Type of deployment. Allowed values are RollingUpdate and OnDelete.
        The default is RollingUpdate.
    """


    remediation?: ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0StrategyRemediation

    rollingUpdate?: ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0StrategyRollingUpdate

    $type?: "RollingUpdate" | "OnDelete"


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0StrategyRemediation:
    r"""
    Remediation controls the strategy of remediating unhealthy machines
    and how remediating operations should occur during the lifecycle of the dependant MachineSets.

    Attributes
    ----------
    maxInFlight : int | str, default is Undefined, optional
        MaxInFlight determines how many in flight remediations should happen at the same time.


        Remediation only happens on the MachineSet with the most current revision, while
        older MachineSets (usually present during rollout operations) aren't allowed to remediate.


        Note: In general (independent of remediations), unhealthy machines are always
        prioritized during scale down operations over healthy ones.


        MaxInFlight can be set to a fixed number or a percentage.
        Example: when this is set to 20%, the MachineSet controller deletes at most 20% of
        the desired replicas.


        If not set, remediation is limited to all machines (bounded by replicas)
        under the active MachineSet's management.
    """


    maxInFlight?: int | str


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0StrategyRollingUpdate:
    r"""
    Rolling update config params. Present only if
    MachineDeploymentStrategyType = RollingUpdate.

    Attributes
    ----------
    deletePolicy : str, default is Undefined, optional
        DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling.
        Valid values are "Random, "Newest", "Oldest"
        When no value is supplied, the default DeletePolicy of MachineSet is used
    maxSurge : int | str, default is Undefined, optional
        The maximum number of machines that can be scheduled above the
        desired number of machines.
        Value can be an absolute number (ex: 5) or a percentage of
        desired machines (ex: 10%).
        This can not be 0 if MaxUnavailable is 0.
        Absolute number is calculated from percentage by rounding up.
        Defaults to 1.
        Example: when this is set to 30%, the new MachineSet can be scaled
        up immediately when the rolling update starts, such that the total
        number of old and new machines do not exceed 130% of desired
        machines. Once old machines have been killed, new MachineSet can
        be scaled up further, ensuring that total number of machines running
        at any time during the update is at most 130% of desired machines.
    maxUnavailable : int | str, default is Undefined, optional
        The maximum number of machines that can be unavailable during the update.
        Value can be an absolute number (ex: 5) or a percentage of desired
        machines (ex: 10%).
        Absolute number is calculated from percentage by rounding down.
        This can not be 0 if MaxSurge is 0.
        Defaults to 0.
        Example: when this is set to 30%, the old MachineSet can be scaled
        down to 70% of desired machines immediately when the rolling update
        starts. Once new machines are ready, old MachineSet can be scaled
        down further, followed by scaling up the new MachineSet, ensuring
        that the total number of machines available at all times
        during the update is at least 70% of desired machines.
    """


    deletePolicy?: "Random" | "Newest" | "Oldest"

    maxSurge?: int | str

    maxUnavailable?: int | str


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0Variables:
    r"""
    Variables can be used to customize the MachineDeployment through patches.

    Attributes
    ----------
    overrides : [ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0VariablesOverridesItems0], default is Undefined, optional
        Overrides can be used to override Cluster level variables.
    """


    overrides?: [ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0VariablesOverridesItems0]


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachineDeploymentsItems0VariablesOverridesItems0:
    r"""
    ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a
    Variable definition in the ClusterClass `status` variables.

    Attributes
    ----------
    definitionFrom : str, default is Undefined, optional
        DefinitionFrom specifies where the definition of this Variable is from.


        Deprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion.
    name : str, default is Undefined, required
        Name of the variable.
    value : any, default is Undefined, required
        Value of the variable.
        Note: the value will be validated against the schema of the corresponding ClusterClassVariable
        from the ClusterClass.
        Note: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a
        hard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,
        i.e. it is not possible to have no type field.
        Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
    """


    definitionFrom?: str

    name: str

    value: any


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0:
    r"""
    MachinePoolTopology specifies the different parameters for a pool of worker nodes in the topology.
    This pool of nodes is managed by a MachinePool object whose lifecycle is managed by the Cluster controller.

    Attributes
    ----------
    class : str, default is Undefined, required
        Class is the name of the MachinePoolClass used to create the pool of worker nodes.
        This should match one of the deployment classes defined in the ClusterClass object
        mentioned in the `Cluster.Spec.Class` field.
    failureDomains : [str], default is Undefined, optional
        FailureDomains is the list of failure domains the machine pool will be created in.
        Must match a key in the FailureDomains map stored on the cluster object.
    metadata : ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0Metadata, default is Undefined, optional
        metadata
    minReadySeconds : int, default is Undefined, optional
        Minimum number of seconds for which a newly created machine pool should
        be ready.
        Defaults to 0 (machine will be considered available as soon as it
        is ready)
    name : str, default is Undefined, required
        Name is the unique identifier for this MachinePoolTopology.
        The value is used with other unique identifiers to create a MachinePool's Name
        (e.g. cluster's name, etc). In case the name is greater than the allowed maximum length,
        the values are hashed together.
    nodeDeletionTimeout : str, default is Undefined, optional
        NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the MachinePool
        hosts after the MachinePool is marked for deletion. A duration of 0 will retry deletion indefinitely.
        Defaults to 10 seconds.
    nodeDrainTimeout : str, default is Undefined, optional
        NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.
        The default value is 0, meaning that the node can be drained without any time limitations.
        NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
    nodeVolumeDetachTimeout : str, default is Undefined, optional
        NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes
        to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
    replicas : int, default is Undefined, optional
        Replicas is the number of nodes belonging to this pool.
        If the value is nil, the MachinePool is created without the number of Replicas (defaulting to 1)
        and it's assumed that an external entity (like cluster autoscaler) is responsible for the management
        of this value.
    variables : ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0Variables, default is Undefined, optional
        variables
    """


    class: str

    failureDomains?: [str]

    metadata?: ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0Metadata

    minReadySeconds?: int

    name: str

    nodeDeletionTimeout?: str

    nodeDrainTimeout?: str

    nodeVolumeDetachTimeout?: str

    replicas?: int

    variables?: ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0Variables


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0Metadata:
    r"""
    Metadata is the metadata applied to the MachinePool.
    At runtime this metadata is merged with the corresponding metadata from the ClusterClass.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: http://kubernetes.io/docs/user-guide/labels
    """


    annotations?: {str:str}

    labels?: {str:str}


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0Variables:
    r"""
    Variables can be used to customize the MachinePool through patches.

    Attributes
    ----------
    overrides : [ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0VariablesOverridesItems0], default is Undefined, optional
        Overrides can be used to override Cluster level variables.
    """


    overrides?: [ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0VariablesOverridesItems0]


schema ClusterxK8sIoV1beta1ClusterSpecTopologyWorkersMachinePoolsItems0VariablesOverridesItems0:
    r"""
    ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a
    Variable definition in the ClusterClass `status` variables.

    Attributes
    ----------
    definitionFrom : str, default is Undefined, optional
        DefinitionFrom specifies where the definition of this Variable is from.


        Deprecated: This field is deprecated, must not be set anymore and is going to be removed in the next apiVersion.
    name : str, default is Undefined, required
        Name of the variable.
    value : any, default is Undefined, required
        Value of the variable.
        Note: the value will be validated against the schema of the corresponding ClusterClassVariable
        from the ClusterClass.
        Note: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a
        hard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools,
        i.e. it is not possible to have no type field.
        Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
    """


    definitionFrom?: str

    name: str

    value: any


schema ClusterxK8sIoV1beta1ClusterStatus:
    r"""
    ClusterStatus defines the observed state of Cluster.

    Attributes
    ----------
    conditions : [ClusterxK8sIoV1beta1ClusterStatusConditionsItems0], default is Undefined, optional
        Conditions defines current service state of the cluster.
    controlPlaneReady : bool, default is Undefined, optional
        ControlPlaneReady denotes if the control plane became ready during initial provisioning
        to receive requests.
        NOTE: this field is part of the Cluster API contract and it is used to orchestrate provisioning.
        The value of this field is never updated after provisioning is completed. Please use conditions
        to check the operational state of the control plane.
    failureDomains : {str:ClusterxK8sIoV1beta1ClusterStatusFailureDomainsAnon}, default is Undefined, optional
        FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
    failureMessage : str, default is Undefined, optional
        FailureMessage indicates that there is a fatal problem reconciling the
        state, and will be set to a descriptive error message.
    failureReason : str, default is Undefined, optional
        FailureReason indicates that there is a fatal problem reconciling the
        state, and will be set to a token value suitable for
        programmatic interpretation.
    infrastructureReady : bool, default is Undefined, optional
        InfrastructureReady is the state of the infrastructure provider.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest generation observed by the controller.
    phase : str, default is Undefined, optional
        Phase represents the current phase of cluster actuation.
        E.g. Pending, Running, Terminating, Failed etc.
    """


    conditions?: [ClusterxK8sIoV1beta1ClusterStatusConditionsItems0]

    controlPlaneReady?: bool

    failureDomains?: {str:ClusterxK8sIoV1beta1ClusterStatusFailureDomainsAnon}

    failureMessage?: str

    failureReason?: str

    infrastructureReady?: bool

    observedGeneration?: int

    phase?: str


schema ClusterxK8sIoV1beta1ClusterStatusConditionsItems0:
    r"""
    Condition defines an observation of a Cluster API resource operational state.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        Last time the condition transitioned from one status to another.
        This should be when the underlying condition changed. If that is not known, then using the time when
        the API field changed is acceptable.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
        This field may be empty.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition in CamelCase.
        The specific API may choose whether or not this field is considered a guaranteed API.
        This field may not be empty.
    severity : str, default is Undefined, optional
        Severity provides an explicit classification of Reason code, so the users or machines can immediately
        understand the current situation and act accordingly.
        The Severity field MUST be set only when Status=False.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition in CamelCase or in foo.example.com/CamelCase.
        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions
        can be useful (see .node.status.conditions), the ability to deconflict is important.
    """


    lastTransitionTime: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


schema ClusterxK8sIoV1beta1ClusterStatusFailureDomainsAnon:
    r"""
    FailureDomainSpec is the Schema for Cluster API failure domains.
    It allows controllers to understand how many failure domains a cluster can optionally span across.

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        Attributes is a free form map of attributes an infrastructure provider might use or require.
    controlPlane : bool, default is Undefined, optional
        ControlPlane determines if this failure domain is suitable for use by control plane machines.
    """


    attributes?: {str:str}

    controlPlane?: bool


