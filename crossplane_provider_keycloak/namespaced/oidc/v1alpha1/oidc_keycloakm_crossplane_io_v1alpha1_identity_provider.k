"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema IdentityProvider:
    r"""
    IdentityProvider is the Schema for the IdentityProviders API.

    Attributes
    ----------
    apiVersion : str, default is "oidc.keycloak.m.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "IdentityProvider", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpec, default is Undefined, required
        spec
    status : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderStatus, default is Undefined, optional
        status
    """


    apiVersion: "oidc.keycloak.m.crossplane.io/v1alpha1" = "oidc.keycloak.m.crossplane.io/v1alpha1"

    kind: "IdentityProvider" = "IdentityProvider"

    metadata?: v1.ObjectMeta

    spec: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpec

    status?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderStatus


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpec:
    r"""
    IdentityProviderSpec defines the desired state of IdentityProvider

    Attributes
    ----------
    forProvider : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProvider, default is Undefined, required
        for provider
    initProvider : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    writeConnectionSecretToRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    forProvider: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProvider

    initProvider?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecProviderConfigRef

    writeConnectionSecretToRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecWriteConnectionSecretToRef


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProvider:
    r"""
    oidc keycloakm crossplane io v1alpha1 identity provider spec for provider

    Attributes
    ----------
    acceptsPromptNoneForwardFromClient : bool, default is Undefined, optional
        When true, the IDP will accept forwarded authentication requests that contain the prompt=none query parameter. Defaults to false.
        This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly returned to client, but the request with prompt=none will be forwarded to this identity provider.
    addReadTokenRoleOnCreate : bool, default is Undefined, optional
        When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.
        Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
    alias : str, default is Undefined, optional
        The alias uniquely identifies an identity provider, and it is also used to build the redirect uri.
        The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
    authenticateByDefault : bool, default is Undefined, optional
        Enable/disable authenticate users by default.
    authorizationUrl : str, default is Undefined, optional
        The Authorization Url.
        OIDC authorization URL.
    backchannelSupported : bool, default is Undefined, optional
        Does the external IDP support backchannel logout? Defaults to true.
        Does the external IDP support backchannel logout?
    clientIdSecretRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderClientIDSecretRef, default is Undefined, optional
        client Id secret ref
    clientSecretSecretRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderClientSecretSecretRef, default is Undefined, optional
        client secret secret ref
    clientSecretWoSecretRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderClientSecretWoSecretRef, default is Undefined, optional
        client secret wo secret ref
    clientSecretWoVersion : float, default is Undefined, optional
        The value of this argument is stored in the state and plan files. Required when using client_secret_wo.
        Version of the Client secret write-only argument
    defaultScopes : str, default is Undefined, optional
        The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid.
        The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
    disableTypeClaimCheck : bool, default is Undefined, optional
        When true, disables the check for the typ claim of tokens received from the identity provider. Defaults to false.
        Disables the validation of the `typ` claim of tokens received from the Identity Provider. If this is `off` the type claim is validated (default).
    disableUserInfo : bool, default is Undefined, optional
        When true, disables the usage of the user info service to obtain additional user information. Defaults to false.
        Disable usage of User Info service to obtain additional user information?  Default is to use this OIDC service.
    displayName : str, default is Undefined, optional
        Display name for the identity provider in the GUI.
        The human-friendly name of the identity provider, used in the log in form.
    enabled : bool, default is Undefined, optional
        When true, users will be able to log in to this realm using this identity provider. Defaults to true.
        Enable/disable this identity provider.
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration to this identity provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.
    firstBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.
        Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account.
    firstBrokerLoginFlowAliasRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRef, default is Undefined, optional
        first broker login flow alias ref
    firstBrokerLoginFlowAliasSelector : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelector, default is Undefined, optional
        first broker login flow alias selector
    guiOrder : str, default is Undefined, optional
        A number defining the order of this identity provider in the GUI.
        GUI Order
    hideOnLoginPage : bool, default is Undefined, optional
        When true, this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to false.
        Hide On Login Page.
    issuer : str, default is Undefined, optional
        The issuer identifier for the issuer of the response. If not provided, no validation will be performed.
        The issuer identifier for the issuer of the response. If not provided, no validation will be performed.
    jwksUrl : str, default is Undefined, optional
        JSON Web Key Set URL.
        JSON Web Key Set URL
    linkOnly : bool, default is Undefined, optional
        When true, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to false.
        If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider
    loginHint : str, default is Undefined, optional
        Pass login hint to identity provider.
        Login Hint.
    logoutUrl : str, default is Undefined, optional
        The Logout URL is the end session endpoint to use to sign-out the user from external identity provider.
        Logout URL
    orgDomain : str, default is Undefined, optional
        The organization domain to associate this identity provider with. it is used to map users to an organization based on their email domain and to authenticate them accordingly in the scope of the organization.
    orgRedirectModeEmailMatches : bool, default is Undefined, optional
        Indicates whether to automatically redirect user to this identity provider when email domain matches domain.
    organizationId : str, default is Undefined, optional
        The ID of the organization to link this identity provider to.
        ID of organization with which this identity is linked.
    organizationIdRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDRef, default is Undefined, optional
        organization Id ref
    organizationIdSelector : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDSelector, default is Undefined, optional
        organization Id selector
    postBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
        Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
    providerId : str, default is Undefined, optional
        The ID of the identity provider to use. Defaults to oidc, which should be used unless you have extended Keycloak and provided your own implementation.
        provider id, is always oidc, unless you have a custom implementation
    realm : str, default is Undefined, optional
        The name of the realm. This is unique across Keycloak.
        Realm Name
    realmRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmRef, default is Undefined, optional
        realm ref
    realmSelector : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmSelector, default is Undefined, optional
        realm selector
    storeToken : bool, default is Undefined, optional
        When true, tokens will be stored after authenticating users. Defaults to true.
        Enable/disable if tokens must be stored after authenticating users.
    syncMode : str, default is Undefined, optional
        The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.
        Sync Mode
    tokenUrl : str, default is Undefined, optional
        The Token URL.
        Token URL.
    trustEmail : bool, default is Undefined, optional
        When true, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false.
        If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
    uiLocales : bool, default is Undefined, optional
        Pass current locale to identity provider. Defaults to false.
        Pass current locale to identity provider
    userInfoUrl : str, default is Undefined, optional
        User Info URL.
        User Info URL
    validateSignature : bool, default is Undefined, optional
        Enable/disable signature validation of external IDP signatures. Defaults to false.
        Enable/disable signature validation of external IDP signatures.
    """


    acceptsPromptNoneForwardFromClient?: bool

    addReadTokenRoleOnCreate?: bool

    alias?: str

    authenticateByDefault?: bool

    authorizationUrl?: str

    backchannelSupported?: bool

    clientIdSecretRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderClientIDSecretRef

    clientSecretSecretRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderClientSecretSecretRef

    clientSecretWoSecretRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderClientSecretWoSecretRef

    clientSecretWoVersion?: float

    defaultScopes?: str

    disableTypeClaimCheck?: bool

    disableUserInfo?: bool

    displayName?: str

    enabled?: bool

    extraConfig?: {str:str}

    firstBrokerLoginFlowAlias?: str

    firstBrokerLoginFlowAliasRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRef

    firstBrokerLoginFlowAliasSelector?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelector

    guiOrder?: str

    hideOnLoginPage?: bool

    issuer?: str

    jwksUrl?: str

    linkOnly?: bool

    loginHint?: str

    logoutUrl?: str

    orgDomain?: str

    orgRedirectModeEmailMatches?: bool

    organizationId?: str

    organizationIdRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDRef

    organizationIdSelector?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDSelector

    postBrokerLoginFlowAlias?: str

    providerId?: str

    realm?: str

    realmRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmRef

    realmSelector?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmSelector

    storeToken?: bool

    syncMode?: str

    tokenUrl?: str

    trustEmail?: bool

    uiLocales?: bool

    userInfoUrl?: str

    validateSignature?: bool


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderClientIDSecretRef:
    r"""
    The client or client identifier registered within the identity provider.
    Client ID.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderClientSecretSecretRef:
    r"""
    The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format. Required without client_secret_wo and client_secret_wo_version.
    Client Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderClientSecretWoSecretRef:
    r"""
    The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. If omitted, this will fallback to use client_secret.
    Client Secret as write-only argument

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRef:
    r"""
    Reference to a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelector:
    r"""
    Selector for a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDRef:
    r"""
    Reference to a Organization in organization to populate organizationId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDSelector:
    r"""
    Selector for a Organization in organization to populate organizationId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderOrganizationIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmRef:
    r"""
    Reference to a Realm in realm to populate realm.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmSelector:
    r"""
    Selector for a Realm in realm to populate realm.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecForProviderRealmSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    acceptsPromptNoneForwardFromClient : bool, default is Undefined, optional
        When true, the IDP will accept forwarded authentication requests that contain the prompt=none query parameter. Defaults to false.
        This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly returned to client, but the request with prompt=none will be forwarded to this identity provider.
    addReadTokenRoleOnCreate : bool, default is Undefined, optional
        When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.
        Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
    alias : str, default is Undefined, optional
        The alias uniquely identifies an identity provider, and it is also used to build the redirect uri.
        The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
    authenticateByDefault : bool, default is Undefined, optional
        Enable/disable authenticate users by default.
    authorizationUrl : str, default is Undefined, optional
        The Authorization Url.
        OIDC authorization URL.
    backchannelSupported : bool, default is Undefined, optional
        Does the external IDP support backchannel logout? Defaults to true.
        Does the external IDP support backchannel logout?
    clientIdSecretRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderClientIDSecretRef, default is Undefined, required
        client Id secret ref
    clientSecretSecretRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderClientSecretSecretRef, default is Undefined, optional
        client secret secret ref
    clientSecretWoSecretRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderClientSecretWoSecretRef, default is Undefined, optional
        client secret wo secret ref
    clientSecretWoVersion : float, default is Undefined, optional
        The value of this argument is stored in the state and plan files. Required when using client_secret_wo.
        Version of the Client secret write-only argument
    defaultScopes : str, default is Undefined, optional
        The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid.
        The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
    disableTypeClaimCheck : bool, default is Undefined, optional
        When true, disables the check for the typ claim of tokens received from the identity provider. Defaults to false.
        Disables the validation of the `typ` claim of tokens received from the Identity Provider. If this is `off` the type claim is validated (default).
    disableUserInfo : bool, default is Undefined, optional
        When true, disables the usage of the user info service to obtain additional user information. Defaults to false.
        Disable usage of User Info service to obtain additional user information?  Default is to use this OIDC service.
    displayName : str, default is Undefined, optional
        Display name for the identity provider in the GUI.
        The human-friendly name of the identity provider, used in the log in form.
    enabled : bool, default is Undefined, optional
        When true, users will be able to log in to this realm using this identity provider. Defaults to true.
        Enable/disable this identity provider.
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration to this identity provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.
    firstBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.
        Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account.
    firstBrokerLoginFlowAliasRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRef, default is Undefined, optional
        first broker login flow alias ref
    firstBrokerLoginFlowAliasSelector : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelector, default is Undefined, optional
        first broker login flow alias selector
    guiOrder : str, default is Undefined, optional
        A number defining the order of this identity provider in the GUI.
        GUI Order
    hideOnLoginPage : bool, default is Undefined, optional
        When true, this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to false.
        Hide On Login Page.
    issuer : str, default is Undefined, optional
        The issuer identifier for the issuer of the response. If not provided, no validation will be performed.
        The issuer identifier for the issuer of the response. If not provided, no validation will be performed.
    jwksUrl : str, default is Undefined, optional
        JSON Web Key Set URL.
        JSON Web Key Set URL
    linkOnly : bool, default is Undefined, optional
        When true, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to false.
        If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider
    loginHint : str, default is Undefined, optional
        Pass login hint to identity provider.
        Login Hint.
    logoutUrl : str, default is Undefined, optional
        The Logout URL is the end session endpoint to use to sign-out the user from external identity provider.
        Logout URL
    orgDomain : str, default is Undefined, optional
        The organization domain to associate this identity provider with. it is used to map users to an organization based on their email domain and to authenticate them accordingly in the scope of the organization.
    orgRedirectModeEmailMatches : bool, default is Undefined, optional
        Indicates whether to automatically redirect user to this identity provider when email domain matches domain.
    organizationId : str, default is Undefined, optional
        The ID of the organization to link this identity provider to.
        ID of organization with which this identity is linked.
    organizationIdRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDRef, default is Undefined, optional
        organization Id ref
    organizationIdSelector : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDSelector, default is Undefined, optional
        organization Id selector
    postBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
        Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
    providerId : str, default is Undefined, optional
        The ID of the identity provider to use. Defaults to oidc, which should be used unless you have extended Keycloak and provided your own implementation.
        provider id, is always oidc, unless you have a custom implementation
    realm : str, default is Undefined, optional
        The name of the realm. This is unique across Keycloak.
        Realm Name
    realmRef : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmRef, default is Undefined, optional
        realm ref
    realmSelector : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmSelector, default is Undefined, optional
        realm selector
    storeToken : bool, default is Undefined, optional
        When true, tokens will be stored after authenticating users. Defaults to true.
        Enable/disable if tokens must be stored after authenticating users.
    syncMode : str, default is Undefined, optional
        The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.
        Sync Mode
    tokenUrl : str, default is Undefined, optional
        The Token URL.
        Token URL.
    trustEmail : bool, default is Undefined, optional
        When true, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false.
        If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
    uiLocales : bool, default is Undefined, optional
        Pass current locale to identity provider. Defaults to false.
        Pass current locale to identity provider
    userInfoUrl : str, default is Undefined, optional
        User Info URL.
        User Info URL
    validateSignature : bool, default is Undefined, optional
        Enable/disable signature validation of external IDP signatures. Defaults to false.
        Enable/disable signature validation of external IDP signatures.
    """


    acceptsPromptNoneForwardFromClient?: bool

    addReadTokenRoleOnCreate?: bool

    alias?: str

    authenticateByDefault?: bool

    authorizationUrl?: str

    backchannelSupported?: bool

    clientIdSecretRef: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderClientIDSecretRef

    clientSecretSecretRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderClientSecretSecretRef

    clientSecretWoSecretRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderClientSecretWoSecretRef

    clientSecretWoVersion?: float

    defaultScopes?: str

    disableTypeClaimCheck?: bool

    disableUserInfo?: bool

    displayName?: str

    enabled?: bool

    extraConfig?: {str:str}

    firstBrokerLoginFlowAlias?: str

    firstBrokerLoginFlowAliasRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRef

    firstBrokerLoginFlowAliasSelector?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelector

    guiOrder?: str

    hideOnLoginPage?: bool

    issuer?: str

    jwksUrl?: str

    linkOnly?: bool

    loginHint?: str

    logoutUrl?: str

    orgDomain?: str

    orgRedirectModeEmailMatches?: bool

    organizationId?: str

    organizationIdRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDRef

    organizationIdSelector?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDSelector

    postBrokerLoginFlowAlias?: str

    providerId?: str

    realm?: str

    realmRef?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmRef

    realmSelector?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmSelector

    storeToken?: bool

    syncMode?: str

    tokenUrl?: str

    trustEmail?: bool

    uiLocales?: bool

    userInfoUrl?: str

    validateSignature?: bool


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderClientIDSecretRef:
    r"""
    The client or client identifier registered within the identity provider.
    Client ID.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderClientSecretSecretRef:
    r"""
    The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format. Required without client_secret_wo and client_secret_wo_version.
    Client Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderClientSecretWoSecretRef:
    r"""
    The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. If omitted, this will fallback to use client_secret.
    Client Secret as write-only argument

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRef:
    r"""
    Reference to a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelector:
    r"""
    Selector for a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDRef:
    r"""
    Reference to a Organization in organization to populate organizationId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDSelector:
    r"""
    Selector for a Organization in organization to populate organizationId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderOrganizationIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmRef:
    r"""
    Reference to a Realm in realm to populate realm.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmSelector:
    r"""
    Selector for a Realm in realm to populate realm.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecInitProviderRealmSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    kind : str, default is Undefined, required
        Kind of the referenced object.
    name : str, default is Undefined, required
        Name of the referenced object.
    """


    kind: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    """


    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderStatus:
    r"""
    IdentityProviderStatus defines the observed state of IdentityProvider.

    Attributes
    ----------
    atProvider : OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderStatusAtProvider

    conditions?: [OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderStatusConditionsItems0]

    observedGeneration?: int


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderStatusAtProvider:
    r"""
    oidc keycloakm crossplane io v1alpha1 identity provider status at provider

    Attributes
    ----------
    acceptsPromptNoneForwardFromClient : bool, default is Undefined, optional
        When true, the IDP will accept forwarded authentication requests that contain the prompt=none query parameter. Defaults to false.
        This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly returned to client, but the request with prompt=none will be forwarded to this identity provider.
    addReadTokenRoleOnCreate : bool, default is Undefined, optional
        When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.
        Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
    alias : str, default is Undefined, optional
        The alias uniquely identifies an identity provider, and it is also used to build the redirect uri.
        The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
    authenticateByDefault : bool, default is Undefined, optional
        Enable/disable authenticate users by default.
    authorizationUrl : str, default is Undefined, optional
        The Authorization Url.
        OIDC authorization URL.
    backchannelSupported : bool, default is Undefined, optional
        Does the external IDP support backchannel logout? Defaults to true.
        Does the external IDP support backchannel logout?
    clientSecretWoVersion : float, default is Undefined, optional
        The value of this argument is stored in the state and plan files. Required when using client_secret_wo.
        Version of the Client secret write-only argument
    defaultScopes : str, default is Undefined, optional
        The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid.
        The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
    disableTypeClaimCheck : bool, default is Undefined, optional
        When true, disables the check for the typ claim of tokens received from the identity provider. Defaults to false.
        Disables the validation of the `typ` claim of tokens received from the Identity Provider. If this is `off` the type claim is validated (default).
    disableUserInfo : bool, default is Undefined, optional
        When true, disables the usage of the user info service to obtain additional user information. Defaults to false.
        Disable usage of User Info service to obtain additional user information?  Default is to use this OIDC service.
    displayName : str, default is Undefined, optional
        Display name for the identity provider in the GUI.
        The human-friendly name of the identity provider, used in the log in form.
    enabled : bool, default is Undefined, optional
        When true, users will be able to log in to this realm using this identity provider. Defaults to true.
        Enable/disable this identity provider.
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration to this identity provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.
    firstBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.
        Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account.
    guiOrder : str, default is Undefined, optional
        A number defining the order of this identity provider in the GUI.
        GUI Order
    hideOnLoginPage : bool, default is Undefined, optional
        When true, this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to false.
        Hide On Login Page.
    id : str, default is Undefined, optional
        id
    internalId : str, default is Undefined, optional
        (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
        Internal Identity Provider Id
    issuer : str, default is Undefined, optional
        The issuer identifier for the issuer of the response. If not provided, no validation will be performed.
        The issuer identifier for the issuer of the response. If not provided, no validation will be performed.
    jwksUrl : str, default is Undefined, optional
        JSON Web Key Set URL.
        JSON Web Key Set URL
    linkOnly : bool, default is Undefined, optional
        When true, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to false.
        If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider
    loginHint : str, default is Undefined, optional
        Pass login hint to identity provider.
        Login Hint.
    logoutUrl : str, default is Undefined, optional
        The Logout URL is the end session endpoint to use to sign-out the user from external identity provider.
        Logout URL
    orgDomain : str, default is Undefined, optional
        The organization domain to associate this identity provider with. it is used to map users to an organization based on their email domain and to authenticate them accordingly in the scope of the organization.
    orgRedirectModeEmailMatches : bool, default is Undefined, optional
        Indicates whether to automatically redirect user to this identity provider when email domain matches domain.
    organizationId : str, default is Undefined, optional
        The ID of the organization to link this identity provider to.
        ID of organization with which this identity is linked.
    postBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
        Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
    providerId : str, default is Undefined, optional
        The ID of the identity provider to use. Defaults to oidc, which should be used unless you have extended Keycloak and provided your own implementation.
        provider id, is always oidc, unless you have a custom implementation
    realm : str, default is Undefined, optional
        The name of the realm. This is unique across Keycloak.
        Realm Name
    storeToken : bool, default is Undefined, optional
        When true, tokens will be stored after authenticating users. Defaults to true.
        Enable/disable if tokens must be stored after authenticating users.
    syncMode : str, default is Undefined, optional
        The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.
        Sync Mode
    tokenUrl : str, default is Undefined, optional
        The Token URL.
        Token URL.
    trustEmail : bool, default is Undefined, optional
        When true, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false.
        If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
    uiLocales : bool, default is Undefined, optional
        Pass current locale to identity provider. Defaults to false.
        Pass current locale to identity provider
    userInfoUrl : str, default is Undefined, optional
        User Info URL.
        User Info URL
    validateSignature : bool, default is Undefined, optional
        Enable/disable signature validation of external IDP signatures. Defaults to false.
        Enable/disable signature validation of external IDP signatures.
    """


    acceptsPromptNoneForwardFromClient?: bool

    addReadTokenRoleOnCreate?: bool

    alias?: str

    authenticateByDefault?: bool

    authorizationUrl?: str

    backchannelSupported?: bool

    clientSecretWoVersion?: float

    defaultScopes?: str

    disableTypeClaimCheck?: bool

    disableUserInfo?: bool

    displayName?: str

    enabled?: bool

    extraConfig?: {str:str}

    firstBrokerLoginFlowAlias?: str

    guiOrder?: str

    hideOnLoginPage?: bool

    id?: str

    internalId?: str

    issuer?: str

    jwksUrl?: str

    linkOnly?: bool

    loginHint?: str

    logoutUrl?: str

    orgDomain?: str

    orgRedirectModeEmailMatches?: bool

    organizationId?: str

    postBrokerLoginFlowAlias?: str

    providerId?: str

    realm?: str

    storeToken?: bool

    syncMode?: str

    tokenUrl?: str

    trustEmail?: bool

    uiLocales?: bool

    userInfoUrl?: str

    validateSignature?: bool


schema OidcKeycloakmCrossplaneIoV1alpha1IdentityProviderStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


