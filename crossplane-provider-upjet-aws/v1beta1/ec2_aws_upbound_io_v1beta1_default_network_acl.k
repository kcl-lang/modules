"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema DefaultNetworkACL:
    r"""
    DefaultNetworkACL is the Schema for the DefaultNetworkACLs API. Manage a default network ACL.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "DefaultNetworkACL", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "DefaultNetworkACL" = "DefaultNetworkACL"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpec

    status?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatus


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpec:
    r"""
    DefaultNetworkACLSpec defines the desired state of DefaultNetworkACL

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 default network ACL spec for provider

    Attributes
    ----------
    defaultNetworkAclId : str, default is Undefined, optional
        Network ACL ID to manage. This attribute is exported from aws_vpc, or manually found via the AWS Console.
    defaultNetworkAclIdRef : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDRef, default is Undefined, optional
        default network Acl Id ref
    defaultNetworkAclIdSelector : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDSelector, default is Undefined, optional
        default network Acl Id selector
    egress : [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderEgressItems0], default is Undefined, optional
        Configuration block for an egress rule. Detailed below.
    ingress : [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0], default is Undefined, optional
        Configuration block for an ingress rule. Detailed below.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    subnetIdRefs : [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnetIds.
    subnetIdSelector : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDSelector, default is Undefined, optional
        subnet Id selector
    subnetIds : [str], default is Undefined, optional
        List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    defaultNetworkAclId?: str

    defaultNetworkAclIdRef?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDRef

    defaultNetworkAclIdSelector?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDSelector

    egress?: [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderEgressItems0]

    ingress?: [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0]

    region: str

    subnetIdRefs?: [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDRefsItems0]

    subnetIdSelector?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDSelector

    subnetIds?: [str]

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDRef:
    r"""
    Reference to a VPC in ec2 to populate defaultNetworkAclId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDRefPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDSelector:
    r"""
    Selector for a VPC in ec2 to populate defaultNetworkAclId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderDefaultNetworkACLIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderEgressItems0:
    r"""
    ec2 aws upbound io v1beta1 default network ACL spec for provider egress items0

    Attributes
    ----------
    action : str, default is Undefined, optional
        The action to take.
    cidrBlock : str, default is Undefined, optional
        The CIDR block to match. This must be a valid network mask.
    fromPort : float, default is Undefined, optional
        The from port to match.
    icmpCode : float, default is Undefined, optional
        The ICMP type code to be used. Default 0.
    icmpType : float, default is Undefined, optional
        The ICMP type to be used. Default 0.
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv6 CIDR block.
    $protocol : str, default is Undefined, optional
        The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    ruleNo : float, default is Undefined, optional
        The rule number. Used for ordering.
    toPort : float, default is Undefined, optional
        The to port to match.
    """


    action?: str

    cidrBlock?: str

    fromPort?: float

    icmpCode?: float

    icmpType?: float

    ipv6CidrBlock?: str

    $protocol?: str

    ruleNo?: float

    toPort?: float


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0:
    r"""
    ec2 aws upbound io v1beta1 default network ACL spec for provider ingress items0

    Attributes
    ----------
    action : str, default is Undefined, optional
        The action to take.
    cidrBlock : str, default is Undefined, optional
        The CIDR block to match. This must be a valid network mask.
    cidrBlockRef : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockRef, default is Undefined, optional
        cidr block ref
    cidrBlockSelector : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockSelector, default is Undefined, optional
        cidr block selector
    fromPort : float, default is Undefined, optional
        The from port to match.
    icmpCode : float, default is Undefined, optional
        The ICMP type code to be used. Default 0.
    icmpType : float, default is Undefined, optional
        The ICMP type to be used. Default 0.
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv6 CIDR block.
    $protocol : str, default is Undefined, optional
        The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    ruleNo : float, default is Undefined, optional
        The rule number. Used for ordering.
    toPort : float, default is Undefined, optional
        The to port to match.
    """


    action?: str

    cidrBlock?: str

    cidrBlockRef?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockRef

    cidrBlockSelector?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockSelector

    fromPort?: float

    icmpCode?: float

    icmpType?: float

    ipv6CidrBlock?: str

    $protocol?: str

    ruleNo?: float

    toPort?: float


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockRef:
    r"""
    Reference to a DefaultVPC in ec2 to populate cidrBlock.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockRefPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockSelector:
    r"""
    Selector for a DefaultVPC in ec2 to populate cidrBlock.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockSelectorPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderIngressItems0CidrBlockSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnetIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecForProviderSubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    defaultNetworkAclId : str, default is Undefined, optional
        Network ACL ID to manage. This attribute is exported from aws_vpc, or manually found via the AWS Console.
    defaultNetworkAclIdRef : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDRef, default is Undefined, optional
        default network Acl Id ref
    defaultNetworkAclIdSelector : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDSelector, default is Undefined, optional
        default network Acl Id selector
    egress : [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderEgressItems0], default is Undefined, optional
        Configuration block for an egress rule. Detailed below.
    ingress : [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0], default is Undefined, optional
        Configuration block for an ingress rule. Detailed below.
    subnetIdRefs : [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnetIds.
    subnetIdSelector : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDSelector, default is Undefined, optional
        subnet Id selector
    subnetIds : [str], default is Undefined, optional
        List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    defaultNetworkAclId?: str

    defaultNetworkAclIdRef?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDRef

    defaultNetworkAclIdSelector?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDSelector

    egress?: [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderEgressItems0]

    ingress?: [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0]

    subnetIdRefs?: [Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDRefsItems0]

    subnetIdSelector?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDSelector

    subnetIds?: [str]

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDRef:
    r"""
    Reference to a VPC in ec2 to populate defaultNetworkAclId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDRefPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDSelector:
    r"""
    Selector for a VPC in ec2 to populate defaultNetworkAclId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderDefaultNetworkACLIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderEgressItems0:
    r"""
    ec2 aws upbound io v1beta1 default network ACL spec init provider egress items0

    Attributes
    ----------
    action : str, default is Undefined, optional
        The action to take.
    cidrBlock : str, default is Undefined, optional
        The CIDR block to match. This must be a valid network mask.
    fromPort : float, default is Undefined, optional
        The from port to match.
    icmpCode : float, default is Undefined, optional
        The ICMP type code to be used. Default 0.
    icmpType : float, default is Undefined, optional
        The ICMP type to be used. Default 0.
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv6 CIDR block.
    $protocol : str, default is Undefined, optional
        The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    ruleNo : float, default is Undefined, optional
        The rule number. Used for ordering.
    toPort : float, default is Undefined, optional
        The to port to match.
    """


    action?: str

    cidrBlock?: str

    fromPort?: float

    icmpCode?: float

    icmpType?: float

    ipv6CidrBlock?: str

    $protocol?: str

    ruleNo?: float

    toPort?: float


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0:
    r"""
    ec2 aws upbound io v1beta1 default network ACL spec init provider ingress items0

    Attributes
    ----------
    action : str, default is Undefined, optional
        The action to take.
    cidrBlock : str, default is Undefined, optional
        The CIDR block to match. This must be a valid network mask.
    cidrBlockRef : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockRef, default is Undefined, optional
        cidr block ref
    cidrBlockSelector : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockSelector, default is Undefined, optional
        cidr block selector
    fromPort : float, default is Undefined, optional
        The from port to match.
    icmpCode : float, default is Undefined, optional
        The ICMP type code to be used. Default 0.
    icmpType : float, default is Undefined, optional
        The ICMP type to be used. Default 0.
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv6 CIDR block.
    $protocol : str, default is Undefined, optional
        The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    ruleNo : float, default is Undefined, optional
        The rule number. Used for ordering.
    toPort : float, default is Undefined, optional
        The to port to match.
    """


    action?: str

    cidrBlock?: str

    cidrBlockRef?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockRef

    cidrBlockSelector?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockSelector

    fromPort?: float

    icmpCode?: float

    icmpType?: float

    ipv6CidrBlock?: str

    $protocol?: str

    ruleNo?: float

    toPort?: float


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockRef:
    r"""
    Reference to a DefaultVPC in ec2 to populate cidrBlock.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockRefPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockSelector:
    r"""
    Selector for a DefaultVPC in ec2 to populate cidrBlock.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockSelectorPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderIngressItems0CidrBlockSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnetIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecInitProviderSubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatus:
    r"""
    DefaultNetworkACLStatus defines the observed state of DefaultNetworkACL.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 default network ACL status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN of the Default Network ACL
    defaultNetworkAclId : str, default is Undefined, optional
        Network ACL ID to manage. This attribute is exported from aws_vpc, or manually found via the AWS Console.
    egress : [Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusAtProviderEgressItems0], default is Undefined, optional
        Configuration block for an egress rule. Detailed below.
    id : str, default is Undefined, optional
        ID of the Default Network ACL
    ingress : [Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusAtProviderIngressItems0], default is Undefined, optional
        Configuration block for an ingress rule. Detailed below.
    ownerId : str, default is Undefined, optional
        ID of the AWS account that owns the Default Network ACL
    subnetIds : [str], default is Undefined, optional
        List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    vpcId : str, default is Undefined, optional
        ID of the associated VPC
    """


    arn?: str

    defaultNetworkAclId?: str

    egress?: [Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusAtProviderEgressItems0]

    id?: str

    ingress?: [Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusAtProviderIngressItems0]

    ownerId?: str

    subnetIds?: [str]

    tags?: {str:str}

    tagsAll?: {str:str}

    vpcId?: str


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusAtProviderEgressItems0:
    r"""
    ec2 aws upbound io v1beta1 default network ACL status at provider egress items0

    Attributes
    ----------
    action : str, default is Undefined, optional
        The action to take.
    cidrBlock : str, default is Undefined, optional
        The CIDR block to match. This must be a valid network mask.
    fromPort : float, default is Undefined, optional
        The from port to match.
    icmpCode : float, default is Undefined, optional
        The ICMP type code to be used. Default 0.
    icmpType : float, default is Undefined, optional
        The ICMP type to be used. Default 0.
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv6 CIDR block.
    $protocol : str, default is Undefined, optional
        The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    ruleNo : float, default is Undefined, optional
        The rule number. Used for ordering.
    toPort : float, default is Undefined, optional
        The to port to match.
    """


    action?: str

    cidrBlock?: str

    fromPort?: float

    icmpCode?: float

    icmpType?: float

    ipv6CidrBlock?: str

    $protocol?: str

    ruleNo?: float

    toPort?: float


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusAtProviderIngressItems0:
    r"""
    ec2 aws upbound io v1beta1 default network ACL status at provider ingress items0

    Attributes
    ----------
    action : str, default is Undefined, optional
        The action to take.
    cidrBlock : str, default is Undefined, optional
        The CIDR block to match. This must be a valid network mask.
    fromPort : float, default is Undefined, optional
        The from port to match.
    icmpCode : float, default is Undefined, optional
        The ICMP type code to be used. Default 0.
    icmpType : float, default is Undefined, optional
        The ICMP type to be used. Default 0.
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv6 CIDR block.
    $protocol : str, default is Undefined, optional
        The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    ruleNo : float, default is Undefined, optional
        The rule number. Used for ordering.
    toPort : float, default is Undefined, optional
        The to port to match.
    """


    action?: str

    cidrBlock?: str

    fromPort?: float

    icmpCode?: float

    icmpType?: float

    ipv6CidrBlock?: str

    $protocol?: str

    ruleNo?: float

    toPort?: float


schema Ec2AwsUpboundIoV1beta1DefaultNetworkACLStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


