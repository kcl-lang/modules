"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema LB:
    r"""
    LB is the Schema for the LBs API. Provides a Load Balancer resource.

    Attributes
    ----------
    apiVersion : str, default is "elbv2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "LB", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Elbv2AwsUpboundIoV1beta1LBSpec, default is Undefined, required
        spec
    status : Elbv2AwsUpboundIoV1beta1LBStatus, default is Undefined, optional
        status
    """


    apiVersion: "elbv2.aws.upbound.io/v1beta1" = "elbv2.aws.upbound.io/v1beta1"

    kind: "LB" = "LB"

    metadata?: v1.ObjectMeta

    spec: Elbv2AwsUpboundIoV1beta1LBSpec

    status?: Elbv2AwsUpboundIoV1beta1LBStatus


schema Elbv2AwsUpboundIoV1beta1LBSpec:
    r"""
    LBSpec defines the desired state of LB

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Elbv2AwsUpboundIoV1beta1LBSpecForProvider, default is Undefined, required
        for provider
    initProvider : Elbv2AwsUpboundIoV1beta1LBSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Elbv2AwsUpboundIoV1beta1LBSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Elbv2AwsUpboundIoV1beta1LBSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Elbv2AwsUpboundIoV1beta1LBSpecForProvider

    initProvider?: Elbv2AwsUpboundIoV1beta1LBSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Elbv2AwsUpboundIoV1beta1LBSpecProviderConfigRef

    publishConnectionDetailsTo?: Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Elbv2AwsUpboundIoV1beta1LBSpecWriteConnectionSecretToRef


schema Elbv2AwsUpboundIoV1beta1LBSpecForProvider:
    r"""
    elbv2 aws upbound io v1beta1 l b spec for provider

    Attributes
    ----------
    accessLogs : [Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0], default is Undefined, optional
        Access Logs block. See below.
    clientKeepAlive : float, default is Undefined, optional
        Client keep alive value in seconds. The valid range is 60-604800 seconds. The default is 3600 seconds.
    connectionLogs : [Elbv2AwsUpboundIoV1beta1LBSpecForProviderConnectionLogsItems0], default is Undefined, optional
        Connection Logs block. See below. Only valid for Load Balancers of type application.
    customerOwnedIpv4Pool : str, default is Undefined, optional
        ID of the customer owned ipv4 pool to use for this load balancer.
    desyncMitigationMode : str, default is Undefined, optional
        How the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.
    dnsRecordClientRoutingPolicy : str, default is Undefined, optional
        How traffic is distributed among the load balancer Availability Zones. Possible values are any_availability_zone (default), availability_zone_affinity, or partial_availability_zone_affinity. See   Availability Zone DNS affinity for additional details. Only valid for network type load balancers.
    dropInvalidHeaderFields : bool, default is Undefined, optional
        Whether HTTP headers with header fields that are not valid are removed by the load balancer (true) or routed to targets (false). The default is false. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. Only valid for Load Balancers of type application.
    enableCrossZoneLoadBalancing : bool, default is Undefined, optional
        If true, cross-zone load balancing of the load balancer will be enabled. For network and gateway type load balancers, this feature is disabled by default (false). For application load balancer this feature is always enabled (true) and cannot be disabled. Defaults to false.
    enableDeletionProtection : bool, default is Undefined, optional
        If true, deletion of the load balancer will be disabled via the AWS API. Defaults to false.
    enableHttp2 : bool, default is Undefined, optional
        Whether HTTP/2 is enabled in application load balancers. Defaults to true.
    enableTlsVersionAndCipherSuiteHeaders : bool, default is Undefined, optional
        Whether the two headers (x-amzn-tls-version and x-amzn-tls-cipher-suite), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. Only valid for Load Balancers of type application. Defaults to false
    enableWafFailOpen : bool, default is Undefined, optional
        Whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. Defaults to false.
    enableXffClientPort : bool, default is Undefined, optional
        Whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer in application load balancers. Defaults to false.
    enableZonalShift : bool, default is Undefined, optional
        Whether zonal shift is enabled. Defaults to false.
    enforceSecurityGroupInboundRulesOnPrivateLinkTraffic : str, default is Undefined, optional
        Whether inbound security group rules are enforced for traffic originating from a PrivateLink. Only valid for Load Balancers of type network. The possible values are on and off.
    idleTimeout : float, default is Undefined, optional
        Time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type application. Default: 60.
    internal : bool, default is Undefined, optional
        If true, the LB will be internal. Defaults to false.
    ipAddressType : str, default is Undefined, optional
        Type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 and dualstack.
    loadBalancerType : str, default is Undefined, optional
        Type of load balancer to create. Possible values are application, gateway, or network. The default value is application.
    name : str, default is Undefined, optional
        Name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    preserveHostHeader : bool, default is Undefined, optional
        Whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. Defaults to false.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    securityGroupRefs : [Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroups.
    securityGroupSelector : Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupSelector, default is Undefined, optional
        security group selector
    securityGroups : [str], default is Undefined, optional
        List of security group IDs to assign to the LB. Only valid for Load Balancers of type application or network. For load balancers of type network security groups cannot be added if none are currently present, and cannot all be removed once added. If either of these conditions are met, this will force a recreation of the resource.
    subnetMapping : [Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0], default is Undefined, optional
        Subnet mapping block. See below. For Load Balancers of type network subnet mappings can only be added.
    subnetRefs : [Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnets.
    subnetSelector : Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetSelector, default is Undefined, optional
        subnet selector
    subnets : [str], default is Undefined, optional
        List of subnet IDs to attach to the LB. For Load Balancers of type network subnets can only be added (see Availability Zones), deleting a subnet for load balancers of type network will force a recreation of the resource.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    xffHeaderProcessingMode : str, default is Undefined, optional
        Determines how the load balancer modifies the X-Forwarded-For header in the HTTP request before sending the request to the target. The possible values are append, preserve, and remove. Only valid for Load Balancers of type application. The default is append.
    """


    accessLogs?: [Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0]

    clientKeepAlive?: float

    connectionLogs?: [Elbv2AwsUpboundIoV1beta1LBSpecForProviderConnectionLogsItems0]

    customerOwnedIpv4Pool?: str

    desyncMitigationMode?: str

    dnsRecordClientRoutingPolicy?: str

    dropInvalidHeaderFields?: bool

    enableCrossZoneLoadBalancing?: bool

    enableDeletionProtection?: bool

    enableHttp2?: bool

    enableTlsVersionAndCipherSuiteHeaders?: bool

    enableWafFailOpen?: bool

    enableXffClientPort?: bool

    enableZonalShift?: bool

    enforceSecurityGroupInboundRulesOnPrivateLinkTraffic?: str

    idleTimeout?: float

    internal?: bool

    ipAddressType?: str

    loadBalancerType?: str

    name?: str

    preserveHostHeader?: bool

    region: str

    securityGroupRefs?: [Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupRefsItems0]

    securityGroupSelector?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupSelector

    securityGroups?: [str]

    subnetMapping?: [Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0]

    subnetRefs?: [Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetRefsItems0]

    subnetSelector?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetSelector

    subnets?: [str]

    tags?: {str:str}

    xffHeaderProcessingMode?: str


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b spec for provider access logs items0

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        S3 bucket name to store the logs in.
    bucketRef : Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketRef, default is Undefined, optional
        bucket ref
    bucketSelector : Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketSelector, default is Undefined, optional
        bucket selector
    enabled : bool, default is Undefined, optional
        Boolean to enable / disable access_logs. Defaults to false, even when bucket is specified.
    prefix : str, default is Undefined, optional
        S3 bucket prefix. Logs are stored in the root if not configured.
    """


    bucket?: str

    bucketRef?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketRef

    bucketSelector?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketSelector

    enabled?: bool

    prefix?: str


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketRef:
    r"""
    Reference to a Bucket in s3 to populate bucket.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketRefPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketSelector:
    r"""
    Selector for a Bucket in s3 to populate bucket.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketSelectorPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderAccessLogsItems0BucketSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderConnectionLogsItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b spec for provider connection logs items0

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        S3 bucket name to store the logs in.
    enabled : bool, default is Undefined, optional
        Boolean to enable / disable connection_logs. Defaults to false, even when bucket is specified.
    prefix : str, default is Undefined, optional
        S3 bucket prefix. Logs are stored in the root if not configured.
    """


    bucket?: str

    enabled?: bool

    prefix?: str


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupRefsItems0Policy


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroups.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupSelectorPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSecurityGroupSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b spec for provider subnet mapping items0

    Attributes
    ----------
    allocationId : str, default is Undefined, optional
        Allocation ID of the Elastic IP address for an internet-facing load balancer.
    ipv6Address : str, default is Undefined, optional
        IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
    privateIpv4Address : str, default is Undefined, optional
        Private IPv4 address for an internal load balancer.
    subnetId : str, default is Undefined, optional
        ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
    subnetIdRef : Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDRef, default is Undefined, optional
        subnet Id ref
    subnetIdSelector : Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDSelector, default is Undefined, optional
        subnet Id selector
    """


    allocationId?: str

    ipv6Address?: str

    privateIpv4Address?: str

    subnetId?: str

    subnetIdRef?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDRef

    subnetIdSelector?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDSelector


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDRef:
    r"""
    Reference to a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDRefPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDSelector:
    r"""
    Selector for a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDSelectorPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetMappingItems0SubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetRefsItems0Policy


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnets.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetSelectorPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecForProviderSubnetSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    accessLogs : [Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0], default is Undefined, optional
        Access Logs block. See below.
    clientKeepAlive : float, default is Undefined, optional
        Client keep alive value in seconds. The valid range is 60-604800 seconds. The default is 3600 seconds.
    connectionLogs : [Elbv2AwsUpboundIoV1beta1LBSpecInitProviderConnectionLogsItems0], default is Undefined, optional
        Connection Logs block. See below. Only valid for Load Balancers of type application.
    customerOwnedIpv4Pool : str, default is Undefined, optional
        ID of the customer owned ipv4 pool to use for this load balancer.
    desyncMitigationMode : str, default is Undefined, optional
        How the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.
    dnsRecordClientRoutingPolicy : str, default is Undefined, optional
        How traffic is distributed among the load balancer Availability Zones. Possible values are any_availability_zone (default), availability_zone_affinity, or partial_availability_zone_affinity. See   Availability Zone DNS affinity for additional details. Only valid for network type load balancers.
    dropInvalidHeaderFields : bool, default is Undefined, optional
        Whether HTTP headers with header fields that are not valid are removed by the load balancer (true) or routed to targets (false). The default is false. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. Only valid for Load Balancers of type application.
    enableCrossZoneLoadBalancing : bool, default is Undefined, optional
        If true, cross-zone load balancing of the load balancer will be enabled. For network and gateway type load balancers, this feature is disabled by default (false). For application load balancer this feature is always enabled (true) and cannot be disabled. Defaults to false.
    enableDeletionProtection : bool, default is Undefined, optional
        If true, deletion of the load balancer will be disabled via the AWS API. Defaults to false.
    enableHttp2 : bool, default is Undefined, optional
        Whether HTTP/2 is enabled in application load balancers. Defaults to true.
    enableTlsVersionAndCipherSuiteHeaders : bool, default is Undefined, optional
        Whether the two headers (x-amzn-tls-version and x-amzn-tls-cipher-suite), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. Only valid for Load Balancers of type application. Defaults to false
    enableWafFailOpen : bool, default is Undefined, optional
        Whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. Defaults to false.
    enableXffClientPort : bool, default is Undefined, optional
        Whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer in application load balancers. Defaults to false.
    enableZonalShift : bool, default is Undefined, optional
        Whether zonal shift is enabled. Defaults to false.
    enforceSecurityGroupInboundRulesOnPrivateLinkTraffic : str, default is Undefined, optional
        Whether inbound security group rules are enforced for traffic originating from a PrivateLink. Only valid for Load Balancers of type network. The possible values are on and off.
    idleTimeout : float, default is Undefined, optional
        Time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type application. Default: 60.
    internal : bool, default is Undefined, optional
        If true, the LB will be internal. Defaults to false.
    ipAddressType : str, default is Undefined, optional
        Type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 and dualstack.
    loadBalancerType : str, default is Undefined, optional
        Type of load balancer to create. Possible values are application, gateway, or network. The default value is application.
    name : str, default is Undefined, optional
        Name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    preserveHostHeader : bool, default is Undefined, optional
        Whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. Defaults to false.
    securityGroupRefs : [Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroups.
    securityGroupSelector : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupSelector, default is Undefined, optional
        security group selector
    securityGroups : [str], default is Undefined, optional
        List of security group IDs to assign to the LB. Only valid for Load Balancers of type application or network. For load balancers of type network security groups cannot be added if none are currently present, and cannot all be removed once added. If either of these conditions are met, this will force a recreation of the resource.
    subnetMapping : [Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0], default is Undefined, optional
        Subnet mapping block. See below. For Load Balancers of type network subnet mappings can only be added.
    subnetRefs : [Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnets.
    subnetSelector : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetSelector, default is Undefined, optional
        subnet selector
    subnets : [str], default is Undefined, optional
        List of subnet IDs to attach to the LB. For Load Balancers of type network subnets can only be added (see Availability Zones), deleting a subnet for load balancers of type network will force a recreation of the resource.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    xffHeaderProcessingMode : str, default is Undefined, optional
        Determines how the load balancer modifies the X-Forwarded-For header in the HTTP request before sending the request to the target. The possible values are append, preserve, and remove. Only valid for Load Balancers of type application. The default is append.
    """


    accessLogs?: [Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0]

    clientKeepAlive?: float

    connectionLogs?: [Elbv2AwsUpboundIoV1beta1LBSpecInitProviderConnectionLogsItems0]

    customerOwnedIpv4Pool?: str

    desyncMitigationMode?: str

    dnsRecordClientRoutingPolicy?: str

    dropInvalidHeaderFields?: bool

    enableCrossZoneLoadBalancing?: bool

    enableDeletionProtection?: bool

    enableHttp2?: bool

    enableTlsVersionAndCipherSuiteHeaders?: bool

    enableWafFailOpen?: bool

    enableXffClientPort?: bool

    enableZonalShift?: bool

    enforceSecurityGroupInboundRulesOnPrivateLinkTraffic?: str

    idleTimeout?: float

    internal?: bool

    ipAddressType?: str

    loadBalancerType?: str

    name?: str

    preserveHostHeader?: bool

    securityGroupRefs?: [Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupRefsItems0]

    securityGroupSelector?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupSelector

    securityGroups?: [str]

    subnetMapping?: [Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0]

    subnetRefs?: [Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetRefsItems0]

    subnetSelector?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetSelector

    subnets?: [str]

    tags?: {str:str}

    xffHeaderProcessingMode?: str


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b spec init provider access logs items0

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        S3 bucket name to store the logs in.
    bucketRef : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketRef, default is Undefined, optional
        bucket ref
    bucketSelector : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketSelector, default is Undefined, optional
        bucket selector
    enabled : bool, default is Undefined, optional
        Boolean to enable / disable access_logs. Defaults to false, even when bucket is specified.
    prefix : str, default is Undefined, optional
        S3 bucket prefix. Logs are stored in the root if not configured.
    """


    bucket?: str

    bucketRef?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketRef

    bucketSelector?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketSelector

    enabled?: bool

    prefix?: str


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketRef:
    r"""
    Reference to a Bucket in s3 to populate bucket.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketRefPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketSelector:
    r"""
    Selector for a Bucket in s3 to populate bucket.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketSelectorPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderAccessLogsItems0BucketSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderConnectionLogsItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b spec init provider connection logs items0

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        S3 bucket name to store the logs in.
    enabled : bool, default is Undefined, optional
        Boolean to enable / disable connection_logs. Defaults to false, even when bucket is specified.
    prefix : str, default is Undefined, optional
        S3 bucket prefix. Logs are stored in the root if not configured.
    """


    bucket?: str

    enabled?: bool

    prefix?: str


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupRefsItems0Policy


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroups.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupSelectorPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSecurityGroupSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b spec init provider subnet mapping items0

    Attributes
    ----------
    allocationId : str, default is Undefined, optional
        Allocation ID of the Elastic IP address for an internet-facing load balancer.
    ipv6Address : str, default is Undefined, optional
        IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
    privateIpv4Address : str, default is Undefined, optional
        Private IPv4 address for an internal load balancer.
    subnetId : str, default is Undefined, optional
        ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
    subnetIdRef : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDRef, default is Undefined, optional
        subnet Id ref
    subnetIdSelector : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDSelector, default is Undefined, optional
        subnet Id selector
    """


    allocationId?: str

    ipv6Address?: str

    privateIpv4Address?: str

    subnetId?: str

    subnetIdRef?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDRef

    subnetIdSelector?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDSelector


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDRef:
    r"""
    Reference to a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDRefPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDSelector:
    r"""
    Selector for a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDSelectorPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetMappingItems0SubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetRefsItems0Policy


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnets.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetSelectorPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecInitProviderSubnetSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecProviderConfigRefPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsToConfigRef

    metadata?: Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsToMetadata

    name: str


schema Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsToConfigRefPolicy


schema Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Elbv2AwsUpboundIoV1beta1LBSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Elbv2AwsUpboundIoV1beta1LBStatus:
    r"""
    LBStatus defines the observed state of LB.

    Attributes
    ----------
    atProvider : Elbv2AwsUpboundIoV1beta1LBStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Elbv2AwsUpboundIoV1beta1LBStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Elbv2AwsUpboundIoV1beta1LBStatusAtProvider

    conditions?: [Elbv2AwsUpboundIoV1beta1LBStatusConditionsItems0]

    observedGeneration?: int


schema Elbv2AwsUpboundIoV1beta1LBStatusAtProvider:
    r"""
    elbv2 aws upbound io v1beta1 l b status at provider

    Attributes
    ----------
    accessLogs : [Elbv2AwsUpboundIoV1beta1LBStatusAtProviderAccessLogsItems0], default is Undefined, optional
        Access Logs block. See below.
    arn : str, default is Undefined, optional
        ARN of the load balancer (matches id).
    arnSuffix : str, default is Undefined, optional
        ARN suffix for use with CloudWatch Metrics.
    clientKeepAlive : float, default is Undefined, optional
        Client keep alive value in seconds. The valid range is 60-604800 seconds. The default is 3600 seconds.
    connectionLogs : [Elbv2AwsUpboundIoV1beta1LBStatusAtProviderConnectionLogsItems0], default is Undefined, optional
        Connection Logs block. See below. Only valid for Load Balancers of type application.
    customerOwnedIpv4Pool : str, default is Undefined, optional
        ID of the customer owned ipv4 pool to use for this load balancer.
    desyncMitigationMode : str, default is Undefined, optional
        How the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.
    dnsName : str, default is Undefined, optional
        DNS name of the load balancer.
    dnsRecordClientRoutingPolicy : str, default is Undefined, optional
        How traffic is distributed among the load balancer Availability Zones. Possible values are any_availability_zone (default), availability_zone_affinity, or partial_availability_zone_affinity. See   Availability Zone DNS affinity for additional details. Only valid for network type load balancers.
    dropInvalidHeaderFields : bool, default is Undefined, optional
        Whether HTTP headers with header fields that are not valid are removed by the load balancer (true) or routed to targets (false). The default is false. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. Only valid for Load Balancers of type application.
    enableCrossZoneLoadBalancing : bool, default is Undefined, optional
        If true, cross-zone load balancing of the load balancer will be enabled. For network and gateway type load balancers, this feature is disabled by default (false). For application load balancer this feature is always enabled (true) and cannot be disabled. Defaults to false.
    enableDeletionProtection : bool, default is Undefined, optional
        If true, deletion of the load balancer will be disabled via the AWS API. Defaults to false.
    enableHttp2 : bool, default is Undefined, optional
        Whether HTTP/2 is enabled in application load balancers. Defaults to true.
    enableTlsVersionAndCipherSuiteHeaders : bool, default is Undefined, optional
        Whether the two headers (x-amzn-tls-version and x-amzn-tls-cipher-suite), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. Only valid for Load Balancers of type application. Defaults to false
    enableWafFailOpen : bool, default is Undefined, optional
        Whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. Defaults to false.
    enableXffClientPort : bool, default is Undefined, optional
        Whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer in application load balancers. Defaults to false.
    enableZonalShift : bool, default is Undefined, optional
        Whether zonal shift is enabled. Defaults to false.
    enforceSecurityGroupInboundRulesOnPrivateLinkTraffic : str, default is Undefined, optional
        Whether inbound security group rules are enforced for traffic originating from a PrivateLink. Only valid for Load Balancers of type network. The possible values are on and off.
    id : str, default is Undefined, optional
        ARN of the load balancer (matches arn).
    idleTimeout : float, default is Undefined, optional
        Time in seconds that the connection is allowed to be idle. Only valid for Load Balancers of type application. Default: 60.
    internal : bool, default is Undefined, optional
        If true, the LB will be internal. Defaults to false.
    ipAddressType : str, default is Undefined, optional
        Type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 and dualstack.
    loadBalancerType : str, default is Undefined, optional
        Type of load balancer to create. Possible values are application, gateway, or network. The default value is application.
    name : str, default is Undefined, optional
        Name of the LB. This name must be unique within your AWS account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    preserveHostHeader : bool, default is Undefined, optional
        Whether the Application Load Balancer should preserve the Host header in the HTTP request and send it to the target without any change. Defaults to false.
    securityGroups : [str], default is Undefined, optional
        List of security group IDs to assign to the LB. Only valid for Load Balancers of type application or network. For load balancers of type network security groups cannot be added if none are currently present, and cannot all be removed once added. If either of these conditions are met, this will force a recreation of the resource.
    subnetMapping : [Elbv2AwsUpboundIoV1beta1LBStatusAtProviderSubnetMappingItems0], default is Undefined, optional
        Subnet mapping block. See below. For Load Balancers of type network subnet mappings can only be added.
    subnets : [str], default is Undefined, optional
        List of subnet IDs to attach to the LB. For Load Balancers of type network subnets can only be added (see Availability Zones), deleting a subnet for load balancers of type network will force a recreation of the resource.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    vpcId : str, default is Undefined, optional
        ARN of the load balancer (matches arn).
    xffHeaderProcessingMode : str, default is Undefined, optional
        Determines how the load balancer modifies the X-Forwarded-For header in the HTTP request before sending the request to the target. The possible values are append, preserve, and remove. Only valid for Load Balancers of type application. The default is append.
    zoneId : str, default is Undefined, optional
        Canonical hosted zone ID of the load balancer (to be used in a Route 53 Alias record).
    """


    accessLogs?: [Elbv2AwsUpboundIoV1beta1LBStatusAtProviderAccessLogsItems0]

    arn?: str

    arnSuffix?: str

    clientKeepAlive?: float

    connectionLogs?: [Elbv2AwsUpboundIoV1beta1LBStatusAtProviderConnectionLogsItems0]

    customerOwnedIpv4Pool?: str

    desyncMitigationMode?: str

    dnsName?: str

    dnsRecordClientRoutingPolicy?: str

    dropInvalidHeaderFields?: bool

    enableCrossZoneLoadBalancing?: bool

    enableDeletionProtection?: bool

    enableHttp2?: bool

    enableTlsVersionAndCipherSuiteHeaders?: bool

    enableWafFailOpen?: bool

    enableXffClientPort?: bool

    enableZonalShift?: bool

    enforceSecurityGroupInboundRulesOnPrivateLinkTraffic?: str

    id?: str

    idleTimeout?: float

    internal?: bool

    ipAddressType?: str

    loadBalancerType?: str

    name?: str

    preserveHostHeader?: bool

    securityGroups?: [str]

    subnetMapping?: [Elbv2AwsUpboundIoV1beta1LBStatusAtProviderSubnetMappingItems0]

    subnets?: [str]

    tags?: {str:str}

    tagsAll?: {str:str}

    vpcId?: str

    xffHeaderProcessingMode?: str

    zoneId?: str


schema Elbv2AwsUpboundIoV1beta1LBStatusAtProviderAccessLogsItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b status at provider access logs items0

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        S3 bucket name to store the logs in.
    enabled : bool, default is Undefined, optional
        Boolean to enable / disable access_logs. Defaults to false, even when bucket is specified.
    prefix : str, default is Undefined, optional
        S3 bucket prefix. Logs are stored in the root if not configured.
    """


    bucket?: str

    enabled?: bool

    prefix?: str


schema Elbv2AwsUpboundIoV1beta1LBStatusAtProviderConnectionLogsItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b status at provider connection logs items0

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        S3 bucket name to store the logs in.
    enabled : bool, default is Undefined, optional
        Boolean to enable / disable connection_logs. Defaults to false, even when bucket is specified.
    prefix : str, default is Undefined, optional
        S3 bucket prefix. Logs are stored in the root if not configured.
    """


    bucket?: str

    enabled?: bool

    prefix?: str


schema Elbv2AwsUpboundIoV1beta1LBStatusAtProviderSubnetMappingItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b status at provider subnet mapping items0

    Attributes
    ----------
    allocationId : str, default is Undefined, optional
        Allocation ID of the Elastic IP address for an internet-facing load balancer.
    ipv6Address : str, default is Undefined, optional
        IPv6 address. You associate IPv6 CIDR blocks with your VPC and choose the subnets where you launch both internet-facing and internal Application Load Balancers or Network Load Balancers.
    outpostId : str, default is Undefined, optional
        ID of the Outpost containing the load balancer.
    privateIpv4Address : str, default is Undefined, optional
        Private IPv4 address for an internal load balancer.
    subnetId : str, default is Undefined, optional
        ID of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
    """


    allocationId?: str

    ipv6Address?: str

    outpostId?: str

    privateIpv4Address?: str

    subnetId?: str


schema Elbv2AwsUpboundIoV1beta1LBStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


