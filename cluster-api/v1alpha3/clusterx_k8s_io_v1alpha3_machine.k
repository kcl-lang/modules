"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Machine:
    r"""
    Machine is the Schema for the machines API.


    Deprecated: This type will be removed in one of the next releases.

    Attributes
    ----------
    apiVersion : str, default is "cluster.x-k8s.io/v1alpha3", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Machine", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ClusterxK8sIoV1alpha3MachineSpec, default is Undefined, optional
        spec
    status : ClusterxK8sIoV1alpha3MachineStatus, default is Undefined, optional
        status
    """


    apiVersion: "cluster.x-k8s.io/v1alpha3" = "cluster.x-k8s.io/v1alpha3"

    kind: "Machine" = "Machine"

    metadata?: v1.ObjectMeta

    spec?: ClusterxK8sIoV1alpha3MachineSpec

    status?: ClusterxK8sIoV1alpha3MachineStatus


schema ClusterxK8sIoV1alpha3MachineSpec:
    r"""
    MachineSpec defines the desired state of Machine.

    Attributes
    ----------
    bootstrap : ClusterxK8sIoV1alpha3MachineSpecBootstrap, default is Undefined, required
        bootstrap
    clusterName : str, default is Undefined, required
        ClusterName is the name of the Cluster this object belongs to.
    failureDomain : str, default is Undefined, optional
        FailureDomain is the failure domain the machine will be created in.
        Must match a key in the FailureDomains map stored on the cluster object.
    infrastructureRef : ClusterxK8sIoV1alpha3MachineSpecInfrastructureRef, default is Undefined, required
        infrastructure ref
    nodeDrainTimeout : str, default is Undefined, optional
        NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.
        The default value is 0, meaning that the node can be drained without any time limitations.
        NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
    providerID : str, default is Undefined, optional
        ProviderID is the identification ID of the machine provided by the provider.
        This field must match the provider ID as seen on the node object corresponding to this machine.
        This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler
        with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out
        machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a
        generic out-of-tree provider for autoscaler, this field is required by autoscaler to be
        able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver
        and then a comparison is done to find out unregistered machines and are marked for delete.
        This field will be set by the actuators and consumed by higher level entities like autoscaler that will
        be interfacing with cluster-api as generic provider.
    version : str, default is Undefined, optional
        Version defines the desired Kubernetes version.
        This field is meant to be optionally used by bootstrap providers.
    """


    bootstrap: ClusterxK8sIoV1alpha3MachineSpecBootstrap

    clusterName: str

    failureDomain?: str

    infrastructureRef: ClusterxK8sIoV1alpha3MachineSpecInfrastructureRef

    nodeDrainTimeout?: str

    providerID?: str

    version?: str


    check:
        len(clusterName) >= 1


schema ClusterxK8sIoV1alpha3MachineSpecBootstrap:
    r"""
    Bootstrap is a reference to a local struct which encapsulates
    fields to configure the Machineâ€™s bootstrapping mechanism.

    Attributes
    ----------
    configRef : ClusterxK8sIoV1alpha3MachineSpecBootstrapConfigRef, default is Undefined, optional
        config ref
    data : str, default is Undefined, optional
        Data contains the bootstrap data, such as cloud-init details scripts.
        If nil, the Machine should remain in the Pending state.


        Deprecated: Switch to DataSecretName.
    dataSecretName : str, default is Undefined, optional
        DataSecretName is the name of the secret that stores the bootstrap data script.
        If nil, the Machine should remain in the Pending state.
    """


    configRef?: ClusterxK8sIoV1alpha3MachineSpecBootstrapConfigRef

    data?: str

    dataSecretName?: str


schema ClusterxK8sIoV1alpha3MachineSpecBootstrapConfigRef:
    r"""
    ConfigRef is a reference to a bootstrap provider-specific resource
    that holds configuration details. The reference is optional to
    allow users/operators to specify Bootstrap.Data without
    the need of a controller.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1alpha3MachineSpecInfrastructureRef:
    r"""
    InfrastructureRef is a required reference to a custom resource
    offered by an infrastructure provider.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1alpha3MachineStatus:
    r"""
    MachineStatus defines the observed state of Machine.

    Attributes
    ----------
    addresses : [ClusterxK8sIoV1alpha3MachineStatusAddressesItems0], default is Undefined, optional
        Addresses is a list of addresses assigned to the machine.
        This field is copied from the infrastructure provider reference.
    bootstrapReady : bool, default is Undefined, optional
        BootstrapReady is the state of the bootstrap provider.
    conditions : [ClusterxK8sIoV1alpha3MachineStatusConditionsItems0], default is Undefined, optional
        Conditions defines current service state of the Machine.
    failureMessage : str, default is Undefined, optional
        FailureMessage will be set in the event that there is a terminal problem
        reconciling the Machine and will contain a more verbose string suitable
        for logging and human consumption.


        This field should not be set for transitive errors that a controller
        faces that are expected to be fixed automatically over
        time (like service outages), but instead indicate that something is
        fundamentally wrong with the Machine's spec or the configuration of
        the controller, and that manual intervention is required. Examples
        of terminal errors would be invalid combinations of settings in the
        spec, values that are unsupported by the controller, or the
        responsible controller itself being critically misconfigured.


        Any transient errors that occur during the reconciliation of Machines
        can be added as events to the Machine object and/or logged in the
        controller's output.
    failureReason : str, default is Undefined, optional
        FailureReason will be set in the event that there is a terminal problem
        reconciling the Machine and will contain a succinct value suitable
        for machine interpretation.


        This field should not be set for transitive errors that a controller
        faces that are expected to be fixed automatically over
        time (like service outages), but instead indicate that something is
        fundamentally wrong with the Machine's spec or the configuration of
        the controller, and that manual intervention is required. Examples
        of terminal errors would be invalid combinations of settings in the
        spec, values that are unsupported by the controller, or the
        responsible controller itself being critically misconfigured.


        Any transient errors that occur during the reconciliation of Machines
        can be added as events to the Machine object and/or logged in the
        controller's output.
    infrastructureReady : bool, default is Undefined, optional
        InfrastructureReady is the state of the infrastructure provider.
    lastUpdated : str, default is Undefined, optional
        LastUpdated identifies when the phase of the Machine last transitioned.
    nodeRef : ClusterxK8sIoV1alpha3MachineStatusNodeRef, default is Undefined, optional
        node ref
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest generation observed by the controller.
    phase : str, default is Undefined, optional
        Phase represents the current phase of machine actuation.
        E.g. Pending, Running, Terminating, Failed etc.
    version : str, default is Undefined, optional
        Version specifies the current version of Kubernetes running
        on the corresponding Node. This is meant to be a means of bubbling
        up status from the Node to the Machine.
        It is entirely optional, but useful for end-user UX if itâ€™s present.
    """


    addresses?: [ClusterxK8sIoV1alpha3MachineStatusAddressesItems0]

    bootstrapReady?: bool

    conditions?: [ClusterxK8sIoV1alpha3MachineStatusConditionsItems0]

    failureMessage?: str

    failureReason?: str

    infrastructureReady?: bool

    lastUpdated?: str

    nodeRef?: ClusterxK8sIoV1alpha3MachineStatusNodeRef

    observedGeneration?: int

    phase?: str

    version?: str


schema ClusterxK8sIoV1alpha3MachineStatusAddressesItems0:
    r"""
    MachineAddress contains information for the node's address.

    Attributes
    ----------
    address : str, default is Undefined, required
        The machine address.
    $type : str, default is Undefined, required
        Machine address type, one of Hostname, ExternalIP or InternalIP.
    """


    address: str

    $type: str


schema ClusterxK8sIoV1alpha3MachineStatusConditionsItems0:
    r"""
    Condition defines an observation of a Cluster API resource operational state.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
        This should be when the underlying condition changed. If that is not known, then using the time when
        the API field changed is acceptable.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
        This field may be empty.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition in CamelCase.
        The specific API may choose whether or not this field is considered a guaranteed API.
        This field may not be empty.
    severity : str, default is Undefined, optional
        Severity provides an explicit classification of Reason code, so the users or machines can immediately
        understand the current situation and act accordingly.
        The Severity field MUST be set only when Status=False.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition in CamelCase or in foo.example.com/CamelCase.
        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions
        can be useful (see .node.status.conditions), the ability to deconflict is important.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


schema ClusterxK8sIoV1alpha3MachineStatusNodeRef:
    r"""
    NodeRef will point to the corresponding Node if it exists.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


