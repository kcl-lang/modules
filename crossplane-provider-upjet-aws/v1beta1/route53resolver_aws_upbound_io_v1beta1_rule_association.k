"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema RuleAssociation:
    r"""
    RuleAssociation is the Schema for the RuleAssociations API. Provides a Route53 Resolver rule association.

    Attributes
    ----------
    apiVersion : str, default is "route53resolver.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "RuleAssociation", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpec, default is Undefined, required
        spec
    status : Route53resolverAwsUpboundIoV1beta1RuleAssociationStatus, default is Undefined, optional
        status
    """


    apiVersion: "route53resolver.aws.upbound.io/v1beta1" = "route53resolver.aws.upbound.io/v1beta1"

    kind: "RuleAssociation" = "RuleAssociation"

    metadata?: v1.ObjectMeta

    spec: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpec

    status?: Route53resolverAwsUpboundIoV1beta1RuleAssociationStatus


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpec:
    r"""
    RuleAssociationSpec defines the desired state of RuleAssociation

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProvider, default is Undefined, required
        for provider
    initProvider : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProvider

    initProvider?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecProviderConfigRef

    publishConnectionDetailsTo?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecWriteConnectionSecretToRef


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProvider:
    r"""
    route53resolver aws upbound io v1beta1 rule association spec for provider

    Attributes
    ----------
    name : str, default is Undefined, optional
        A name for the association that you're creating between a resolver rule and a VPC.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    resolverRuleId : str, default is Undefined, optional
        The ID of the resolver rule that you want to associate with the VPC.
    resolverRuleIdRef : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDRef, default is Undefined, optional
        resolver rule Id ref
    resolverRuleIdSelector : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDSelector, default is Undefined, optional
        resolver rule Id selector
    vpcId : str, default is Undefined, optional
        The ID of the VPC that you want to associate the resolver rule with.
    vpcIdRef : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    name?: str

    region: str

    resolverRuleId?: str

    resolverRuleIdRef?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDRef

    resolverRuleIdSelector?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDSelector

    vpcId?: str

    vpcIdRef?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDRef

    vpcIdSelector?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDSelector


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDRef:
    r"""
    Reference to a Rule in route53resolver to populate resolverRuleId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDRefPolicy


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDSelector:
    r"""
    Selector for a Rule in route53resolver to populate resolverRuleId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDSelectorPolicy


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderResolverRuleIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDRefPolicy


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDSelectorPolicy


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecForProviderVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    name : str, default is Undefined, optional
        A name for the association that you're creating between a resolver rule and a VPC.
    resolverRuleId : str, default is Undefined, optional
        The ID of the resolver rule that you want to associate with the VPC.
    resolverRuleIdRef : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDRef, default is Undefined, optional
        resolver rule Id ref
    resolverRuleIdSelector : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDSelector, default is Undefined, optional
        resolver rule Id selector
    vpcId : str, default is Undefined, optional
        The ID of the VPC that you want to associate the resolver rule with.
    vpcIdRef : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    name?: str

    resolverRuleId?: str

    resolverRuleIdRef?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDRef

    resolverRuleIdSelector?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDSelector

    vpcId?: str

    vpcIdRef?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDRef

    vpcIdSelector?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDSelector


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDRef:
    r"""
    Reference to a Rule in route53resolver to populate resolverRuleId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDRefPolicy


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDSelector:
    r"""
    Selector for a Rule in route53resolver to populate resolverRuleId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDSelectorPolicy


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderResolverRuleIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDRefPolicy


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDSelectorPolicy


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecInitProviderVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecProviderConfigRefPolicy


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsToConfigRef

    metadata?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsToMetadata

    name: str


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsToConfigRefPolicy


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationStatus:
    r"""
    RuleAssociationStatus defines the observed state of RuleAssociation.

    Attributes
    ----------
    atProvider : Route53resolverAwsUpboundIoV1beta1RuleAssociationStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Route53resolverAwsUpboundIoV1beta1RuleAssociationStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Route53resolverAwsUpboundIoV1beta1RuleAssociationStatusAtProvider

    conditions?: [Route53resolverAwsUpboundIoV1beta1RuleAssociationStatusConditionsItems0]

    observedGeneration?: int


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationStatusAtProvider:
    r"""
    route53resolver aws upbound io v1beta1 rule association status at provider

    Attributes
    ----------
    id : str, default is Undefined, optional
        The ID of the resolver rule association.
    name : str, default is Undefined, optional
        A name for the association that you're creating between a resolver rule and a VPC.
    resolverRuleId : str, default is Undefined, optional
        The ID of the resolver rule that you want to associate with the VPC.
    vpcId : str, default is Undefined, optional
        The ID of the VPC that you want to associate the resolver rule with.
    """


    id?: str

    name?: str

    resolverRuleId?: str

    vpcId?: str


schema Route53resolverAwsUpboundIoV1beta1RuleAssociationStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


