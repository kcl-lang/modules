"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema ELB:
    r"""
    ELB is the Schema for the ELBs API. Provides an Elastic Load Balancer resource.

    Attributes
    ----------
    apiVersion : str, default is "elb.aws.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ELB", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ElbAwsUpboundIoV1beta2ELBSpec, default is Undefined, required
        spec
    status : ElbAwsUpboundIoV1beta2ELBStatus, default is Undefined, optional
        status
    """


    apiVersion: "elb.aws.upbound.io/v1beta2" = "elb.aws.upbound.io/v1beta2"

    kind: "ELB" = "ELB"

    metadata?: v1.ObjectMeta

    spec: ElbAwsUpboundIoV1beta2ELBSpec

    status?: ElbAwsUpboundIoV1beta2ELBStatus


schema ElbAwsUpboundIoV1beta2ELBSpec:
    r"""
    ELBSpec defines the desired state of ELB

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ElbAwsUpboundIoV1beta2ELBSpecForProvider, default is Undefined, required
        for provider
    initProvider : ElbAwsUpboundIoV1beta2ELBSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ElbAwsUpboundIoV1beta2ELBSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ElbAwsUpboundIoV1beta2ELBSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ElbAwsUpboundIoV1beta2ELBSpecForProvider

    initProvider?: ElbAwsUpboundIoV1beta2ELBSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ElbAwsUpboundIoV1beta2ELBSpecProviderConfigRef

    publishConnectionDetailsTo?: ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ElbAwsUpboundIoV1beta2ELBSpecWriteConnectionSecretToRef


schema ElbAwsUpboundIoV1beta2ELBSpecForProvider:
    r"""
    elb aws upbound io v1beta2 e l b spec for provider

    Attributes
    ----------
    accessLogs : ElbAwsUpboundIoV1beta2ELBSpecForProviderAccessLogs, default is Undefined, optional
        access logs
    availabilityZones : [str], default is Undefined, optional
        The AZ's to serve traffic in.
    connectionDraining : bool, default is Undefined, optional
        Boolean to enable connection draining. Default: false
    connectionDrainingTimeout : float, default is Undefined, optional
        The time in seconds to allow for connections to drain. Default: 300
    crossZoneLoadBalancing : bool, default is Undefined, optional
        Enable cross-zone load balancing. Default: true
    desyncMitigationMode : str, default is Undefined, optional
        Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.
    healthCheck : ElbAwsUpboundIoV1beta2ELBSpecForProviderHealthCheck, default is Undefined, optional
        health check
    idleTimeout : float, default is Undefined, optional
        The time in seconds that the connection is allowed to be idle. Default: 60
    instances : [str], default is Undefined, optional
        A list of instance ids to place in the ELB pool.
    instancesRefs : [ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesRefsItems0], default is Undefined, optional
        References to Instance in ec2 to populate instances.
    instancesSelector : ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesSelector, default is Undefined, optional
        instances selector
    internal : bool, default is Undefined, optional
        If true, ELB will be an internal ELB.
    listener : [ElbAwsUpboundIoV1beta2ELBSpecForProviderListenerItems0], default is Undefined, optional
        A list of listener blocks. Listeners documented below.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    securityGroups : [str], default is Undefined, optional
        A list of security group IDs to assign to the ELB.
        Only valid if creating an ELB within a VPC
    sourceSecurityGroup : str, default is Undefined, optional
        The name of the security group that you can use as
        part of your inbound rules for your load balancer's back-end application
        instances. Use this for Classic or Default VPC only.
    subnets : [str], default is Undefined, optional
        A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
    subnetsRefs : [ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnets.
    subnetsSelector : ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsSelector, default is Undefined, optional
        subnets selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    accessLogs?: ElbAwsUpboundIoV1beta2ELBSpecForProviderAccessLogs

    availabilityZones?: [str]

    connectionDraining?: bool

    connectionDrainingTimeout?: float

    crossZoneLoadBalancing?: bool

    desyncMitigationMode?: str

    healthCheck?: ElbAwsUpboundIoV1beta2ELBSpecForProviderHealthCheck

    idleTimeout?: float

    instances?: [str]

    instancesRefs?: [ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesRefsItems0]

    instancesSelector?: ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesSelector

    internal?: bool

    listener?: [ElbAwsUpboundIoV1beta2ELBSpecForProviderListenerItems0]

    region: str

    securityGroups?: [str]

    sourceSecurityGroup?: str

    subnets?: [str]

    subnetsRefs?: [ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsRefsItems0]

    subnetsSelector?: ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsSelector

    tags?: {str:str}


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderAccessLogs:
    r"""
    An Access Logs block. Access Logs documented below.

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        The S3 bucket name to store the logs in.
    bucketPrefix : str, default is Undefined, optional
        The S3 bucket prefix. Logs are stored in the root if not configured.
    enabled : bool, default is Undefined, optional
        Boolean to enable / disable access_logs. Default is true
    interval : float, default is Undefined, optional
        The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    """


    bucket?: str

    bucketPrefix?: str

    enabled?: bool

    interval?: float


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderHealthCheck:
    r"""
    A health_check block. Health Check documented below.

    Attributes
    ----------
    healthyThreshold : float, default is Undefined, optional
        The number of checks before the instance is declared healthy.
    interval : float, default is Undefined, optional
        The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    target : str, default is Undefined, optional
        The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
        values are:
    timeout : float, default is Undefined, optional
        The length of time before the check times out.
    unhealthyThreshold : float, default is Undefined, optional
        The number of checks before the instance is declared unhealthy.
    """


    healthyThreshold?: float

    interval?: float

    target?: str

    timeout?: float

    unhealthyThreshold?: float


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesRefsItems0Policy


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesSelector:
    r"""
    Selector for a list of Instance in ec2 to populate instances.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesSelectorPolicy


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderInstancesSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderListenerItems0:
    r"""
    elb aws upbound io v1beta2 e l b spec for provider listener items0

    Attributes
    ----------
    instancePort : float, default is Undefined, optional
        The port on the instance to route to
    instanceProtocol : str, default is Undefined, optional
        The protocol to use to the instance. Valid
        values are HTTP, HTTPS, TCP, or SSL
    lbPort : float, default is Undefined, optional
        The port to listen on for the load balancer
    lbProtocol : str, default is Undefined, optional
        The protocol to listen on. Valid values are HTTP,
        HTTPS, TCP, or SSL
    sslCertificateId : str, default is Undefined, optional
        The ARN of an SSL certificate you have
        uploaded to AWS IAM. Note ECDSA-specific restrictions below.  Only valid when
    """


    instancePort?: float

    instanceProtocol?: str

    lbPort?: float

    lbProtocol?: str

    sslCertificateId?: str


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsRefsItems0Policy


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnets.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsSelectorPolicy


schema ElbAwsUpboundIoV1beta2ELBSpecForProviderSubnetsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElbAwsUpboundIoV1beta2ELBSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    accessLogs : ElbAwsUpboundIoV1beta2ELBSpecInitProviderAccessLogs, default is Undefined, optional
        access logs
    availabilityZones : [str], default is Undefined, optional
        The AZ's to serve traffic in.
    connectionDraining : bool, default is Undefined, optional
        Boolean to enable connection draining. Default: false
    connectionDrainingTimeout : float, default is Undefined, optional
        The time in seconds to allow for connections to drain. Default: 300
    crossZoneLoadBalancing : bool, default is Undefined, optional
        Enable cross-zone load balancing. Default: true
    desyncMitigationMode : str, default is Undefined, optional
        Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.
    healthCheck : ElbAwsUpboundIoV1beta2ELBSpecInitProviderHealthCheck, default is Undefined, optional
        health check
    idleTimeout : float, default is Undefined, optional
        The time in seconds that the connection is allowed to be idle. Default: 60
    instances : [str], default is Undefined, optional
        A list of instance ids to place in the ELB pool.
    instancesRefs : [ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesRefsItems0], default is Undefined, optional
        References to Instance in ec2 to populate instances.
    instancesSelector : ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesSelector, default is Undefined, optional
        instances selector
    internal : bool, default is Undefined, optional
        If true, ELB will be an internal ELB.
    listener : [ElbAwsUpboundIoV1beta2ELBSpecInitProviderListenerItems0], default is Undefined, optional
        A list of listener blocks. Listeners documented below.
    securityGroups : [str], default is Undefined, optional
        A list of security group IDs to assign to the ELB.
        Only valid if creating an ELB within a VPC
    sourceSecurityGroup : str, default is Undefined, optional
        The name of the security group that you can use as
        part of your inbound rules for your load balancer's back-end application
        instances. Use this for Classic or Default VPC only.
    subnets : [str], default is Undefined, optional
        A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
    subnetsRefs : [ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnets.
    subnetsSelector : ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsSelector, default is Undefined, optional
        subnets selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    accessLogs?: ElbAwsUpboundIoV1beta2ELBSpecInitProviderAccessLogs

    availabilityZones?: [str]

    connectionDraining?: bool

    connectionDrainingTimeout?: float

    crossZoneLoadBalancing?: bool

    desyncMitigationMode?: str

    healthCheck?: ElbAwsUpboundIoV1beta2ELBSpecInitProviderHealthCheck

    idleTimeout?: float

    instances?: [str]

    instancesRefs?: [ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesRefsItems0]

    instancesSelector?: ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesSelector

    internal?: bool

    listener?: [ElbAwsUpboundIoV1beta2ELBSpecInitProviderListenerItems0]

    securityGroups?: [str]

    sourceSecurityGroup?: str

    subnets?: [str]

    subnetsRefs?: [ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsRefsItems0]

    subnetsSelector?: ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsSelector

    tags?: {str:str}


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderAccessLogs:
    r"""
    An Access Logs block. Access Logs documented below.

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        The S3 bucket name to store the logs in.
    bucketPrefix : str, default is Undefined, optional
        The S3 bucket prefix. Logs are stored in the root if not configured.
    enabled : bool, default is Undefined, optional
        Boolean to enable / disable access_logs. Default is true
    interval : float, default is Undefined, optional
        The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    """


    bucket?: str

    bucketPrefix?: str

    enabled?: bool

    interval?: float


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderHealthCheck:
    r"""
    A health_check block. Health Check documented below.

    Attributes
    ----------
    healthyThreshold : float, default is Undefined, optional
        The number of checks before the instance is declared healthy.
    interval : float, default is Undefined, optional
        The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    target : str, default is Undefined, optional
        The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
        values are:
    timeout : float, default is Undefined, optional
        The length of time before the check times out.
    unhealthyThreshold : float, default is Undefined, optional
        The number of checks before the instance is declared unhealthy.
    """


    healthyThreshold?: float

    interval?: float

    target?: str

    timeout?: float

    unhealthyThreshold?: float


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesRefsItems0Policy


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesSelector:
    r"""
    Selector for a list of Instance in ec2 to populate instances.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesSelectorPolicy


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderInstancesSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderListenerItems0:
    r"""
    elb aws upbound io v1beta2 e l b spec init provider listener items0

    Attributes
    ----------
    instancePort : float, default is Undefined, optional
        The port on the instance to route to
    instanceProtocol : str, default is Undefined, optional
        The protocol to use to the instance. Valid
        values are HTTP, HTTPS, TCP, or SSL
    lbPort : float, default is Undefined, optional
        The port to listen on for the load balancer
    lbProtocol : str, default is Undefined, optional
        The protocol to listen on. Valid values are HTTP,
        HTTPS, TCP, or SSL
    sslCertificateId : str, default is Undefined, optional
        The ARN of an SSL certificate you have
        uploaded to AWS IAM. Note ECDSA-specific restrictions below.  Only valid when
    """


    instancePort?: float

    instanceProtocol?: str

    lbPort?: float

    lbProtocol?: str

    sslCertificateId?: str


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsRefsItems0Policy


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnets.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsSelectorPolicy


schema ElbAwsUpboundIoV1beta2ELBSpecInitProviderSubnetsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElbAwsUpboundIoV1beta2ELBSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElbAwsUpboundIoV1beta2ELBSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElbAwsUpboundIoV1beta2ELBSpecProviderConfigRefPolicy


schema ElbAwsUpboundIoV1beta2ELBSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsToConfigRef

    metadata?: ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsToMetadata

    name: str


schema ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsToConfigRefPolicy


schema ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElbAwsUpboundIoV1beta2ELBSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ElbAwsUpboundIoV1beta2ELBSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ElbAwsUpboundIoV1beta2ELBStatus:
    r"""
    ELBStatus defines the observed state of ELB.

    Attributes
    ----------
    atProvider : ElbAwsUpboundIoV1beta2ELBStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ElbAwsUpboundIoV1beta2ELBStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ElbAwsUpboundIoV1beta2ELBStatusAtProvider

    conditions?: [ElbAwsUpboundIoV1beta2ELBStatusConditionsItems0]

    observedGeneration?: int


schema ElbAwsUpboundIoV1beta2ELBStatusAtProvider:
    r"""
    elb aws upbound io v1beta2 e l b status at provider

    Attributes
    ----------
    accessLogs : ElbAwsUpboundIoV1beta2ELBStatusAtProviderAccessLogs, default is Undefined, optional
        access logs
    arn : str, default is Undefined, optional
        The ARN of the ELB
    availabilityZones : [str], default is Undefined, optional
        The AZ's to serve traffic in.
    connectionDraining : bool, default is Undefined, optional
        Boolean to enable connection draining. Default: false
    connectionDrainingTimeout : float, default is Undefined, optional
        The time in seconds to allow for connections to drain. Default: 300
    crossZoneLoadBalancing : bool, default is Undefined, optional
        Enable cross-zone load balancing. Default: true
    desyncMitigationMode : str, default is Undefined, optional
        Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.
    dnsName : str, default is Undefined, optional
        The DNS name of the ELB
    healthCheck : ElbAwsUpboundIoV1beta2ELBStatusAtProviderHealthCheck, default is Undefined, optional
        health check
    id : str, default is Undefined, optional
        The name of the ELB
    idleTimeout : float, default is Undefined, optional
        The time in seconds that the connection is allowed to be idle. Default: 60
    instances : [str], default is Undefined, optional
        A list of instance ids to place in the ELB pool.
    internal : bool, default is Undefined, optional
        If true, ELB will be an internal ELB.
    listener : [ElbAwsUpboundIoV1beta2ELBStatusAtProviderListenerItems0], default is Undefined, optional
        A list of listener blocks. Listeners documented below.
    securityGroups : [str], default is Undefined, optional
        A list of security group IDs to assign to the ELB.
        Only valid if creating an ELB within a VPC
    sourceSecurityGroup : str, default is Undefined, optional
        The name of the security group that you can use as
        part of your inbound rules for your load balancer's back-end application
        instances. Use this for Classic or Default VPC only.
    sourceSecurityGroupId : str, default is Undefined, optional
        The ID of the security group that you can use as
        part of your inbound rules for your load balancer's back-end application
        instances. Only available on ELBs launched in a VPC.
    subnets : [str], default is Undefined, optional
        A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    zoneId : str, default is Undefined, optional
        The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
    """


    accessLogs?: ElbAwsUpboundIoV1beta2ELBStatusAtProviderAccessLogs

    arn?: str

    availabilityZones?: [str]

    connectionDraining?: bool

    connectionDrainingTimeout?: float

    crossZoneLoadBalancing?: bool

    desyncMitigationMode?: str

    dnsName?: str

    healthCheck?: ElbAwsUpboundIoV1beta2ELBStatusAtProviderHealthCheck

    id?: str

    idleTimeout?: float

    instances?: [str]

    internal?: bool

    listener?: [ElbAwsUpboundIoV1beta2ELBStatusAtProviderListenerItems0]

    securityGroups?: [str]

    sourceSecurityGroup?: str

    sourceSecurityGroupId?: str

    subnets?: [str]

    tags?: {str:str}

    tagsAll?: {str:str}

    zoneId?: str


schema ElbAwsUpboundIoV1beta2ELBStatusAtProviderAccessLogs:
    r"""
    An Access Logs block. Access Logs documented below.

    Attributes
    ----------
    bucket : str, default is Undefined, optional
        The S3 bucket name to store the logs in.
    bucketPrefix : str, default is Undefined, optional
        The S3 bucket prefix. Logs are stored in the root if not configured.
    enabled : bool, default is Undefined, optional
        Boolean to enable / disable access_logs. Default is true
    interval : float, default is Undefined, optional
        The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    """


    bucket?: str

    bucketPrefix?: str

    enabled?: bool

    interval?: float


schema ElbAwsUpboundIoV1beta2ELBStatusAtProviderHealthCheck:
    r"""
    A health_check block. Health Check documented below.

    Attributes
    ----------
    healthyThreshold : float, default is Undefined, optional
        The number of checks before the instance is declared healthy.
    interval : float, default is Undefined, optional
        The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    target : str, default is Undefined, optional
        The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
        values are:
    timeout : float, default is Undefined, optional
        The length of time before the check times out.
    unhealthyThreshold : float, default is Undefined, optional
        The number of checks before the instance is declared unhealthy.
    """


    healthyThreshold?: float

    interval?: float

    target?: str

    timeout?: float

    unhealthyThreshold?: float


schema ElbAwsUpboundIoV1beta2ELBStatusAtProviderListenerItems0:
    r"""
    elb aws upbound io v1beta2 e l b status at provider listener items0

    Attributes
    ----------
    instancePort : float, default is Undefined, optional
        The port on the instance to route to
    instanceProtocol : str, default is Undefined, optional
        The protocol to use to the instance. Valid
        values are HTTP, HTTPS, TCP, or SSL
    lbPort : float, default is Undefined, optional
        The port to listen on for the load balancer
    lbProtocol : str, default is Undefined, optional
        The protocol to listen on. Valid values are HTTP,
        HTTPS, TCP, or SSL
    sslCertificateId : str, default is Undefined, optional
        The ARN of an SSL certificate you have
        uploaded to AWS IAM. Note ECDSA-specific restrictions below.  Only valid when
    """


    instancePort?: float

    instanceProtocol?: str

    lbPort?: float

    lbProtocol?: str

    sslCertificateId?: str


schema ElbAwsUpboundIoV1beta2ELBStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


