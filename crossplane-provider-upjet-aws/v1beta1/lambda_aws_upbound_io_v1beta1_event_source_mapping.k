"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema EventSourceMapping:
    r"""
    EventSourceMapping is the Schema for the EventSourceMappings API. Provides a Lambda event source mapping. This allows Lambda functions to get events from Kinesis, DynamoDB, SQS, Amazon MQ and Managed Streaming for Apache Kafka (MSK).

    Attributes
    ----------
    apiVersion : str, default is "lambda.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "EventSourceMapping", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : LambdaAwsUpboundIoV1beta1EventSourceMappingSpec, default is Undefined, required
        spec
    status : LambdaAwsUpboundIoV1beta1EventSourceMappingStatus, default is Undefined, optional
        status
    """


    apiVersion: "lambda.aws.upbound.io/v1beta1" = "lambda.aws.upbound.io/v1beta1"

    kind: "EventSourceMapping" = "EventSourceMapping"

    metadata?: v1.ObjectMeta

    spec: LambdaAwsUpboundIoV1beta1EventSourceMappingSpec

    status?: LambdaAwsUpboundIoV1beta1EventSourceMappingStatus


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpec:
    r"""
    EventSourceMappingSpec defines the desired state of EventSourceMapping

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProvider, default is Undefined, required
        for provider
    initProvider : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProvider

    initProvider?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecProviderConfigRef

    publishConnectionDetailsTo?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecWriteConnectionSecretToRef


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProvider:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider

    Attributes
    ----------
    amazonManagedKafkaEventSourceConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderAmazonManagedKafkaEventSourceConfigItems0], default is Undefined, optional
        Additional configuration block for Amazon Managed Kafka sources. Incompatible with "self_managed_event_source" and "self_managed_kafka_event_source_config". Detailed below.
    batchSize : float, default is Undefined, optional
        The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to 100 for DynamoDB, Kinesis, MQ and MSK, 10 for SQS.
    bisectBatchOnFunctionError : bool, default is Undefined, optional
        If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to false.
    destinationConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderDestinationConfigItems0], default is Undefined, optional
        An Amazon SQS queue, Amazon SNS topic or Amazon S3 bucket (only available for Kafka sources) destination for failed records. Only available for stream sources (DynamoDB and Kinesis) and Kafka sources (Amazon MSK and Self-managed Apache Kafka). Detailed below.
    documentDbEventSourceConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderDocumentDbEventSourceConfigItems0], default is Undefined, optional
        Configuration settings for a DocumentDB event source. Detailed below.
    enabled : bool, default is Undefined, optional
        Determines if the mapping will be enabled on creation. Defaults to true.
    eventSourceArn : str, default is Undefined, optional
        The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
    filterCriteria : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFilterCriteriaItems0], default is Undefined, optional
        The criteria to use for event filtering Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
    functionName : str, default is Undefined, optional
        The name or the ARN of the Lambda function that will be subscribing to events.
    functionNameRef : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameRef, default is Undefined, optional
        function name ref
    functionNameSelector : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameSelector, default is Undefined, optional
        function name selector
    functionResponseTypes : [str], default is Undefined, optional
        A list of current response type enums applied to the event source mapping for AWS Lambda checkpointing. Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: ReportBatchItemFailures.
    kmsKeyArn : str, default is Undefined, optional
        The ARN of the Key Management Service (KMS) customer managed key that Lambda uses to encrypt your function's filter criteria.
    kmsKeyArnRef : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnRef, default is Undefined, optional
        kms key arn ref
    kmsKeyArnSelector : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnSelector, default is Undefined, optional
        kms key arn selector
    maximumBatchingWindowInSeconds : float, default is Undefined, optional
        The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either maximum_batching_window_in_seconds expires or batch_size has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
    maximumRecordAgeInSeconds : float, default is Undefined, optional
        The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
    maximumRetryAttempts : float, default is Undefined, optional
        The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
    metricsConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderMetricsConfigItems0], default is Undefined, optional
        CloudWatch metrics configuration of the event source. Only available for stream sources (DynamoDB and Kinesis) and SQS queues. Detailed below.
    parallelizationFactor : float, default is Undefined, optional
        The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
    provisionedPollerConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderProvisionedPollerConfigItems0], default is Undefined, optional
        Event poller configuration for the event source. Only valid for Amazon MSK or self-managed Apache Kafka sources. Detailed below.
    queues : [str], default is Undefined, optional
        The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    scalingConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderScalingConfigItems0], default is Undefined, optional
        Scaling configuration of the event source. Only available for SQS queues. Detailed below.
    selfManagedEventSource : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderSelfManagedEventSourceItems0], default is Undefined, optional
        For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include source_access_configuration. Detailed below.
    selfManagedKafkaEventSourceConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderSelfManagedKafkaEventSourceConfigItems0], default is Undefined, optional
        Additional configuration block for Self Managed Kafka sources. Incompatible with "event_source_arn" and "amazon_managed_kafka_event_source_config". Detailed below.
    sourceAccessConfiguration : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderSourceAccessConfigurationItems0], default is Undefined, optional
        :  For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include self_managed_event_source. Detailed below.
    startingPosition : str, default is Undefined, optional
        The position in the stream where AWS Lambda should start reading. Must be one of AT_TIMESTAMP (Kinesis only), LATEST or TRIM_HORIZON if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the AWS DynamoDB Streams API Reference and AWS Kinesis API Reference.
    startingPositionTimestamp : str, default is Undefined, optional
        A timestamp in RFC3339 format of the data record which to start reading when using starting_position set to AT_TIMESTAMP. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    topics : [str], default is Undefined, optional
        The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
    tumblingWindowInSeconds : float, default is Undefined, optional
        The duration in seconds of a processing window for AWS Lambda streaming analytics. The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
    """


    amazonManagedKafkaEventSourceConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderAmazonManagedKafkaEventSourceConfigItems0]

    batchSize?: float

    bisectBatchOnFunctionError?: bool

    destinationConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderDestinationConfigItems0]

    documentDbEventSourceConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderDocumentDbEventSourceConfigItems0]

    enabled?: bool

    eventSourceArn?: str

    filterCriteria?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFilterCriteriaItems0]

    functionName?: str

    functionNameRef?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameRef

    functionNameSelector?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameSelector

    functionResponseTypes?: [str]

    kmsKeyArn?: str

    kmsKeyArnRef?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnRef

    kmsKeyArnSelector?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnSelector

    maximumBatchingWindowInSeconds?: float

    maximumRecordAgeInSeconds?: float

    maximumRetryAttempts?: float

    metricsConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderMetricsConfigItems0]

    parallelizationFactor?: float

    provisionedPollerConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderProvisionedPollerConfigItems0]

    queues?: [str]

    region: str

    scalingConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderScalingConfigItems0]

    selfManagedEventSource?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderSelfManagedEventSourceItems0]

    selfManagedKafkaEventSourceConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderSelfManagedKafkaEventSourceConfigItems0]

    sourceAccessConfiguration?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderSourceAccessConfigurationItems0]

    startingPosition?: str

    startingPositionTimestamp?: str

    tags?: {str:str}

    topics?: [str]

    tumblingWindowInSeconds?: float


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderAmazonManagedKafkaEventSourceConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider amazon managed kafka event source config items0

    Attributes
    ----------
    consumerGroupId : str, default is Undefined, optional
        A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See AmazonManagedKafkaEventSourceConfig Syntax.
    """


    consumerGroupId?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderDestinationConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider destination config items0

    Attributes
    ----------
    onFailure : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderDestinationConfigItems0OnFailureItems0], default is Undefined, optional
        The destination configuration for failed invocations. Detailed below.
    """


    onFailure?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderDestinationConfigItems0OnFailureItems0]


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderDestinationConfigItems0OnFailureItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider destination config items0 on failure items0

    Attributes
    ----------
    destinationArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the destination resource.
    """


    destinationArn?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderDocumentDbEventSourceConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider document db event source config items0

    Attributes
    ----------
    collectionName : str, default is Undefined, optional
        The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
    databaseName : str, default is Undefined, optional
        The name of the database to consume within the DocumentDB cluster.
    fullDocument : str, default is Undefined, optional
        Determines what DocumentDB sends to your event stream during document update operations. If set to UpdateLookup, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. Valid values: UpdateLookup, Default.
    """


    collectionName?: str

    databaseName?: str

    fullDocument?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFilterCriteriaItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider filter criteria items0

    Attributes
    ----------
    $filter : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFilterCriteriaItems0FilterItems0], default is Undefined, optional
        A set of up to 5 filter. If an event satisfies at least one, Lambda sends the event to the function or adds it to the next batch. Detailed below.
    """


    $filter?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFilterCriteriaItems0FilterItems0]


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFilterCriteriaItems0FilterItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider filter criteria items0 filter items0

    Attributes
    ----------
    pattern : str, default is Undefined, optional
        A filter pattern up to 4096 characters. See Filter Rule Syntax.
    """


    pattern?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameRef:
    r"""
    Reference to a Function in lambda to populate functionName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameRefPolicy


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameSelector:
    r"""
    Selector for a Function in lambda to populate functionName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameSelectorPolicy


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderFunctionNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnRef:
    r"""
    Reference to a Key in kms to populate kmsKeyArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnRefPolicy


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnSelector:
    r"""
    Selector for a Key in kms to populate kmsKeyArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnSelectorPolicy


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderKmsKeyArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderMetricsConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider metrics config items0

    Attributes
    ----------
    metrics : [str], default is Undefined, optional
        A list containing the metrics to be produced by the event source mapping. Valid values: EventCount.
    """


    metrics?: [str]


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderProvisionedPollerConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider provisioned poller config items0

    Attributes
    ----------
    maximumPollers : float, default is Undefined, optional
        The maximum number of event pollers this event source can scale up to. The range is between 1 and 2000.
    minimumPollers : float, default is Undefined, optional
        The minimum number of event pollers this event source can scale down to. The range is between 1 and 200.
    """


    maximumPollers?: float

    minimumPollers?: float


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderScalingConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider scaling config items0

    Attributes
    ----------
    maximumConcurrency : float, default is Undefined, optional
        Limits the number of concurrent instances that the Amazon SQS event source can invoke. Must be between 2 and 1000. See Configuring maximum concurrency for Amazon SQS event sources.
    """


    maximumConcurrency?: float


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderSelfManagedEventSourceItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider self managed event source items0

    Attributes
    ----------
    endpoints : {str:str}, default is Undefined, optional
        A map of endpoints for the self managed source.  For Kafka self-managed sources, the key should be KAFKA_BOOTSTRAP_SERVERS and the value should be a string with a comma separated list of broker endpoints.
    """


    endpoints?: {str:str}


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderSelfManagedKafkaEventSourceConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider self managed kafka event source config items0

    Attributes
    ----------
    consumerGroupId : str, default is Undefined, optional
        A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See SelfManagedKafkaEventSourceConfig Syntax.
    """


    consumerGroupId?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecForProviderSourceAccessConfigurationItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec for provider source access configuration items0

    Attributes
    ----------
    $type : str, default is Undefined, optional
        The type of authentication protocol, VPC components, or virtual host for your event source. For valid values, refer to the AWS documentation.
    uri : str, default is Undefined, optional
        The URI for this configuration.  For type VPC_SUBNET the value should be subnet:subnet_id where subnet_id is the value you would find in an aws_subnet resource's id attribute.  For type VPC_SECURITY_GROUP the value should be security_group:security_group_id where security_group_id is the value you would find in an aws_security_group resource's id attribute.
    """


    $type?: str

    uri?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    amazonManagedKafkaEventSourceConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderAmazonManagedKafkaEventSourceConfigItems0], default is Undefined, optional
        Additional configuration block for Amazon Managed Kafka sources. Incompatible with "self_managed_event_source" and "self_managed_kafka_event_source_config". Detailed below.
    batchSize : float, default is Undefined, optional
        The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to 100 for DynamoDB, Kinesis, MQ and MSK, 10 for SQS.
    bisectBatchOnFunctionError : bool, default is Undefined, optional
        If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to false.
    destinationConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderDestinationConfigItems0], default is Undefined, optional
        An Amazon SQS queue, Amazon SNS topic or Amazon S3 bucket (only available for Kafka sources) destination for failed records. Only available for stream sources (DynamoDB and Kinesis) and Kafka sources (Amazon MSK and Self-managed Apache Kafka). Detailed below.
    documentDbEventSourceConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderDocumentDbEventSourceConfigItems0], default is Undefined, optional
        Configuration settings for a DocumentDB event source. Detailed below.
    enabled : bool, default is Undefined, optional
        Determines if the mapping will be enabled on creation. Defaults to true.
    eventSourceArn : str, default is Undefined, optional
        The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
    filterCriteria : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFilterCriteriaItems0], default is Undefined, optional
        The criteria to use for event filtering Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
    functionName : str, default is Undefined, optional
        The name or the ARN of the Lambda function that will be subscribing to events.
    functionNameRef : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameRef, default is Undefined, optional
        function name ref
    functionNameSelector : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameSelector, default is Undefined, optional
        function name selector
    functionResponseTypes : [str], default is Undefined, optional
        A list of current response type enums applied to the event source mapping for AWS Lambda checkpointing. Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: ReportBatchItemFailures.
    kmsKeyArn : str, default is Undefined, optional
        The ARN of the Key Management Service (KMS) customer managed key that Lambda uses to encrypt your function's filter criteria.
    kmsKeyArnRef : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnRef, default is Undefined, optional
        kms key arn ref
    kmsKeyArnSelector : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnSelector, default is Undefined, optional
        kms key arn selector
    maximumBatchingWindowInSeconds : float, default is Undefined, optional
        The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either maximum_batching_window_in_seconds expires or batch_size has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
    maximumRecordAgeInSeconds : float, default is Undefined, optional
        The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
    maximumRetryAttempts : float, default is Undefined, optional
        The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
    metricsConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderMetricsConfigItems0], default is Undefined, optional
        CloudWatch metrics configuration of the event source. Only available for stream sources (DynamoDB and Kinesis) and SQS queues. Detailed below.
    parallelizationFactor : float, default is Undefined, optional
        The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
    provisionedPollerConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderProvisionedPollerConfigItems0], default is Undefined, optional
        Event poller configuration for the event source. Only valid for Amazon MSK or self-managed Apache Kafka sources. Detailed below.
    queues : [str], default is Undefined, optional
        The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
    scalingConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderScalingConfigItems0], default is Undefined, optional
        Scaling configuration of the event source. Only available for SQS queues. Detailed below.
    selfManagedEventSource : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderSelfManagedEventSourceItems0], default is Undefined, optional
        For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include source_access_configuration. Detailed below.
    selfManagedKafkaEventSourceConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderSelfManagedKafkaEventSourceConfigItems0], default is Undefined, optional
        Additional configuration block for Self Managed Kafka sources. Incompatible with "event_source_arn" and "amazon_managed_kafka_event_source_config". Detailed below.
    sourceAccessConfiguration : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderSourceAccessConfigurationItems0], default is Undefined, optional
        :  For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include self_managed_event_source. Detailed below.
    startingPosition : str, default is Undefined, optional
        The position in the stream where AWS Lambda should start reading. Must be one of AT_TIMESTAMP (Kinesis only), LATEST or TRIM_HORIZON if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the AWS DynamoDB Streams API Reference and AWS Kinesis API Reference.
    startingPositionTimestamp : str, default is Undefined, optional
        A timestamp in RFC3339 format of the data record which to start reading when using starting_position set to AT_TIMESTAMP. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    topics : [str], default is Undefined, optional
        The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
    tumblingWindowInSeconds : float, default is Undefined, optional
        The duration in seconds of a processing window for AWS Lambda streaming analytics. The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
    """


    amazonManagedKafkaEventSourceConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderAmazonManagedKafkaEventSourceConfigItems0]

    batchSize?: float

    bisectBatchOnFunctionError?: bool

    destinationConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderDestinationConfigItems0]

    documentDbEventSourceConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderDocumentDbEventSourceConfigItems0]

    enabled?: bool

    eventSourceArn?: str

    filterCriteria?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFilterCriteriaItems0]

    functionName?: str

    functionNameRef?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameRef

    functionNameSelector?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameSelector

    functionResponseTypes?: [str]

    kmsKeyArn?: str

    kmsKeyArnRef?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnRef

    kmsKeyArnSelector?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnSelector

    maximumBatchingWindowInSeconds?: float

    maximumRecordAgeInSeconds?: float

    maximumRetryAttempts?: float

    metricsConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderMetricsConfigItems0]

    parallelizationFactor?: float

    provisionedPollerConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderProvisionedPollerConfigItems0]

    queues?: [str]

    scalingConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderScalingConfigItems0]

    selfManagedEventSource?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderSelfManagedEventSourceItems0]

    selfManagedKafkaEventSourceConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderSelfManagedKafkaEventSourceConfigItems0]

    sourceAccessConfiguration?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderSourceAccessConfigurationItems0]

    startingPosition?: str

    startingPositionTimestamp?: str

    tags?: {str:str}

    topics?: [str]

    tumblingWindowInSeconds?: float


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderAmazonManagedKafkaEventSourceConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider amazon managed kafka event source config items0

    Attributes
    ----------
    consumerGroupId : str, default is Undefined, optional
        A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See AmazonManagedKafkaEventSourceConfig Syntax.
    """


    consumerGroupId?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderDestinationConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider destination config items0

    Attributes
    ----------
    onFailure : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderDestinationConfigItems0OnFailureItems0], default is Undefined, optional
        The destination configuration for failed invocations. Detailed below.
    """


    onFailure?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderDestinationConfigItems0OnFailureItems0]


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderDestinationConfigItems0OnFailureItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider destination config items0 on failure items0

    Attributes
    ----------
    destinationArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the destination resource.
    """


    destinationArn?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderDocumentDbEventSourceConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider document db event source config items0

    Attributes
    ----------
    collectionName : str, default is Undefined, optional
        The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
    databaseName : str, default is Undefined, optional
        The name of the database to consume within the DocumentDB cluster.
    fullDocument : str, default is Undefined, optional
        Determines what DocumentDB sends to your event stream during document update operations. If set to UpdateLookup, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. Valid values: UpdateLookup, Default.
    """


    collectionName?: str

    databaseName?: str

    fullDocument?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFilterCriteriaItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider filter criteria items0

    Attributes
    ----------
    $filter : [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFilterCriteriaItems0FilterItems0], default is Undefined, optional
        A set of up to 5 filter. If an event satisfies at least one, Lambda sends the event to the function or adds it to the next batch. Detailed below.
    """


    $filter?: [LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFilterCriteriaItems0FilterItems0]


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFilterCriteriaItems0FilterItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider filter criteria items0 filter items0

    Attributes
    ----------
    pattern : str, default is Undefined, optional
        A filter pattern up to 4096 characters. See Filter Rule Syntax.
    """


    pattern?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameRef:
    r"""
    Reference to a Function in lambda to populate functionName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameRefPolicy


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameSelector:
    r"""
    Selector for a Function in lambda to populate functionName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameSelectorPolicy


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderFunctionNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnRef:
    r"""
    Reference to a Key in kms to populate kmsKeyArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnRefPolicy


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnSelector:
    r"""
    Selector for a Key in kms to populate kmsKeyArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnSelectorPolicy


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderKmsKeyArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderMetricsConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider metrics config items0

    Attributes
    ----------
    metrics : [str], default is Undefined, optional
        A list containing the metrics to be produced by the event source mapping. Valid values: EventCount.
    """


    metrics?: [str]


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderProvisionedPollerConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider provisioned poller config items0

    Attributes
    ----------
    maximumPollers : float, default is Undefined, optional
        The maximum number of event pollers this event source can scale up to. The range is between 1 and 2000.
    minimumPollers : float, default is Undefined, optional
        The minimum number of event pollers this event source can scale down to. The range is between 1 and 200.
    """


    maximumPollers?: float

    minimumPollers?: float


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderScalingConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider scaling config items0

    Attributes
    ----------
    maximumConcurrency : float, default is Undefined, optional
        Limits the number of concurrent instances that the Amazon SQS event source can invoke. Must be between 2 and 1000. See Configuring maximum concurrency for Amazon SQS event sources.
    """


    maximumConcurrency?: float


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderSelfManagedEventSourceItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider self managed event source items0

    Attributes
    ----------
    endpoints : {str:str}, default is Undefined, optional
        A map of endpoints for the self managed source.  For Kafka self-managed sources, the key should be KAFKA_BOOTSTRAP_SERVERS and the value should be a string with a comma separated list of broker endpoints.
    """


    endpoints?: {str:str}


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderSelfManagedKafkaEventSourceConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider self managed kafka event source config items0

    Attributes
    ----------
    consumerGroupId : str, default is Undefined, optional
        A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See SelfManagedKafkaEventSourceConfig Syntax.
    """


    consumerGroupId?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecInitProviderSourceAccessConfigurationItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping spec init provider source access configuration items0

    Attributes
    ----------
    $type : str, default is Undefined, optional
        The type of authentication protocol, VPC components, or virtual host for your event source. For valid values, refer to the AWS documentation.
    uri : str, default is Undefined, optional
        The URI for this configuration.  For type VPC_SUBNET the value should be subnet:subnet_id where subnet_id is the value you would find in an aws_subnet resource's id attribute.  For type VPC_SECURITY_GROUP the value should be security_group:security_group_id where security_group_id is the value you would find in an aws_security_group resource's id attribute.
    """


    $type?: str

    uri?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecProviderConfigRefPolicy


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsToConfigRef

    metadata?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsToMetadata

    name: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsToConfigRefPolicy


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatus:
    r"""
    EventSourceMappingStatus defines the observed state of EventSourceMapping.

    Attributes
    ----------
    atProvider : LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProvider

    conditions?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusConditionsItems0]

    observedGeneration?: int


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProvider:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider

    Attributes
    ----------
    amazonManagedKafkaEventSourceConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderAmazonManagedKafkaEventSourceConfigItems0], default is Undefined, optional
        Additional configuration block for Amazon Managed Kafka sources. Incompatible with "self_managed_event_source" and "self_managed_kafka_event_source_config". Detailed below.
    arn : str, default is Undefined, optional
        The event source mapping ARN.
    batchSize : float, default is Undefined, optional
        The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to 100 for DynamoDB, Kinesis, MQ and MSK, 10 for SQS.
    bisectBatchOnFunctionError : bool, default is Undefined, optional
        If the function returns an error, split the batch in two and retry. Only available for stream sources (DynamoDB and Kinesis). Defaults to false.
    destinationConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderDestinationConfigItems0], default is Undefined, optional
        An Amazon SQS queue, Amazon SNS topic or Amazon S3 bucket (only available for Kafka sources) destination for failed records. Only available for stream sources (DynamoDB and Kinesis) and Kafka sources (Amazon MSK and Self-managed Apache Kafka). Detailed below.
    documentDbEventSourceConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderDocumentDbEventSourceConfigItems0], default is Undefined, optional
        Configuration settings for a DocumentDB event source. Detailed below.
    enabled : bool, default is Undefined, optional
        Determines if the mapping will be enabled on creation. Defaults to true.
    eventSourceArn : str, default is Undefined, optional
        The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream.  It is incompatible with a Self Managed Kafka source.
    filterCriteria : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderFilterCriteriaItems0], default is Undefined, optional
        The criteria to use for event filtering Kinesis stream, DynamoDB stream, SQS queue event sources. Detailed below.
    functionArn : str, default is Undefined, optional
        The the ARN of the Lambda function the event source mapping is sending events to. (Note: this is a computed value that differs from function_name above.)
    functionName : str, default is Undefined, optional
        The name or the ARN of the Lambda function that will be subscribing to events.
    functionResponseTypes : [str], default is Undefined, optional
        A list of current response type enums applied to the event source mapping for AWS Lambda checkpointing. Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: ReportBatchItemFailures.
    id : str, default is Undefined, optional
        id
    kmsKeyArn : str, default is Undefined, optional
        The ARN of the Key Management Service (KMS) customer managed key that Lambda uses to encrypt your function's filter criteria.
    lastModified : str, default is Undefined, optional
        The date this resource was last modified.
    lastProcessingResult : str, default is Undefined, optional
        The result of the last AWS Lambda invocation of your Lambda function.
    maximumBatchingWindowInSeconds : float, default is Undefined, optional
        The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either maximum_batching_window_in_seconds expires or batch_size has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
    maximumRecordAgeInSeconds : float, default is Undefined, optional
        The maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
    maximumRetryAttempts : float, default is Undefined, optional
        The maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
    metricsConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderMetricsConfigItems0], default is Undefined, optional
        CloudWatch metrics configuration of the event source. Only available for stream sources (DynamoDB and Kinesis) and SQS queues. Detailed below.
    parallelizationFactor : float, default is Undefined, optional
        The number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
    provisionedPollerConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderProvisionedPollerConfigItems0], default is Undefined, optional
        Event poller configuration for the event source. Only valid for Amazon MSK or self-managed Apache Kafka sources. Detailed below.
    queues : [str], default is Undefined, optional
        The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
    scalingConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderScalingConfigItems0], default is Undefined, optional
        Scaling configuration of the event source. Only available for SQS queues. Detailed below.
    selfManagedEventSource : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderSelfManagedEventSourceItems0], default is Undefined, optional
        For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include source_access_configuration. Detailed below.
    selfManagedKafkaEventSourceConfig : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderSelfManagedKafkaEventSourceConfigItems0], default is Undefined, optional
        Additional configuration block for Self Managed Kafka sources. Incompatible with "event_source_arn" and "amazon_managed_kafka_event_source_config". Detailed below.
    sourceAccessConfiguration : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderSourceAccessConfigurationItems0], default is Undefined, optional
        :  For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include self_managed_event_source. Detailed below.
    startingPosition : str, default is Undefined, optional
        The position in the stream where AWS Lambda should start reading. Must be one of AT_TIMESTAMP (Kinesis only), LATEST or TRIM_HORIZON if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the AWS DynamoDB Streams API Reference and AWS Kinesis API Reference.
    startingPositionTimestamp : str, default is Undefined, optional
        A timestamp in RFC3339 format of the data record which to start reading when using starting_position set to AT_TIMESTAMP. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
    state : str, default is Undefined, optional
        The state of the event source mapping.
    stateTransitionReason : str, default is Undefined, optional
        The reason the event source mapping is in its current state.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    topics : [str], default is Undefined, optional
        The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
    tumblingWindowInSeconds : float, default is Undefined, optional
        The duration in seconds of a processing window for AWS Lambda streaming analytics. The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
    uuid : str, default is Undefined, optional
        The UUID of the created event source mapping.
    """


    amazonManagedKafkaEventSourceConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderAmazonManagedKafkaEventSourceConfigItems0]

    arn?: str

    batchSize?: float

    bisectBatchOnFunctionError?: bool

    destinationConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderDestinationConfigItems0]

    documentDbEventSourceConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderDocumentDbEventSourceConfigItems0]

    enabled?: bool

    eventSourceArn?: str

    filterCriteria?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderFilterCriteriaItems0]

    functionArn?: str

    functionName?: str

    functionResponseTypes?: [str]

    id?: str

    kmsKeyArn?: str

    lastModified?: str

    lastProcessingResult?: str

    maximumBatchingWindowInSeconds?: float

    maximumRecordAgeInSeconds?: float

    maximumRetryAttempts?: float

    metricsConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderMetricsConfigItems0]

    parallelizationFactor?: float

    provisionedPollerConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderProvisionedPollerConfigItems0]

    queues?: [str]

    scalingConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderScalingConfigItems0]

    selfManagedEventSource?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderSelfManagedEventSourceItems0]

    selfManagedKafkaEventSourceConfig?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderSelfManagedKafkaEventSourceConfigItems0]

    sourceAccessConfiguration?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderSourceAccessConfigurationItems0]

    startingPosition?: str

    startingPositionTimestamp?: str

    state?: str

    stateTransitionReason?: str

    tags?: {str:str}

    tagsAll?: {str:str}

    topics?: [str]

    tumblingWindowInSeconds?: float

    uuid?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderAmazonManagedKafkaEventSourceConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider amazon managed kafka event source config items0

    Attributes
    ----------
    consumerGroupId : str, default is Undefined, optional
        A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See AmazonManagedKafkaEventSourceConfig Syntax.
    """


    consumerGroupId?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderDestinationConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider destination config items0

    Attributes
    ----------
    onFailure : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderDestinationConfigItems0OnFailureItems0], default is Undefined, optional
        The destination configuration for failed invocations. Detailed below.
    """


    onFailure?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderDestinationConfigItems0OnFailureItems0]


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderDestinationConfigItems0OnFailureItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider destination config items0 on failure items0

    Attributes
    ----------
    destinationArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the destination resource.
    """


    destinationArn?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderDocumentDbEventSourceConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider document db event source config items0

    Attributes
    ----------
    collectionName : str, default is Undefined, optional
        The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
    databaseName : str, default is Undefined, optional
        The name of the database to consume within the DocumentDB cluster.
    fullDocument : str, default is Undefined, optional
        Determines what DocumentDB sends to your event stream during document update operations. If set to UpdateLookup, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. Valid values: UpdateLookup, Default.
    """


    collectionName?: str

    databaseName?: str

    fullDocument?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderFilterCriteriaItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider filter criteria items0

    Attributes
    ----------
    $filter : [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderFilterCriteriaItems0FilterItems0], default is Undefined, optional
        A set of up to 5 filter. If an event satisfies at least one, Lambda sends the event to the function or adds it to the next batch. Detailed below.
    """


    $filter?: [LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderFilterCriteriaItems0FilterItems0]


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderFilterCriteriaItems0FilterItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider filter criteria items0 filter items0

    Attributes
    ----------
    pattern : str, default is Undefined, optional
        A filter pattern up to 4096 characters. See Filter Rule Syntax.
    """


    pattern?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderMetricsConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider metrics config items0

    Attributes
    ----------
    metrics : [str], default is Undefined, optional
        A list containing the metrics to be produced by the event source mapping. Valid values: EventCount.
    """


    metrics?: [str]


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderProvisionedPollerConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider provisioned poller config items0

    Attributes
    ----------
    maximumPollers : float, default is Undefined, optional
        The maximum number of event pollers this event source can scale up to. The range is between 1 and 2000.
    minimumPollers : float, default is Undefined, optional
        The minimum number of event pollers this event source can scale down to. The range is between 1 and 200.
    """


    maximumPollers?: float

    minimumPollers?: float


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderScalingConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider scaling config items0

    Attributes
    ----------
    maximumConcurrency : float, default is Undefined, optional
        Limits the number of concurrent instances that the Amazon SQS event source can invoke. Must be between 2 and 1000. See Configuring maximum concurrency for Amazon SQS event sources.
    """


    maximumConcurrency?: float


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderSelfManagedEventSourceItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider self managed event source items0

    Attributes
    ----------
    endpoints : {str:str}, default is Undefined, optional
        A map of endpoints for the self managed source.  For Kafka self-managed sources, the key should be KAFKA_BOOTSTRAP_SERVERS and the value should be a string with a comma separated list of broker endpoints.
    """


    endpoints?: {str:str}


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderSelfManagedKafkaEventSourceConfigItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider self managed kafka event source config items0

    Attributes
    ----------
    consumerGroupId : str, default is Undefined, optional
        A Kafka consumer group ID between 1 and 200 characters for use when creating this event source mapping. If one is not specified, this value will be automatically generated. See SelfManagedKafkaEventSourceConfig Syntax.
    """


    consumerGroupId?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusAtProviderSourceAccessConfigurationItems0:
    r"""
    lambda aws upbound io v1beta1 event source mapping status at provider source access configuration items0

    Attributes
    ----------
    $type : str, default is Undefined, optional
        The type of authentication protocol, VPC components, or virtual host for your event source. For valid values, refer to the AWS documentation.
    uri : str, default is Undefined, optional
        The URI for this configuration.  For type VPC_SUBNET the value should be subnet:subnet_id where subnet_id is the value you would find in an aws_subnet resource's id attribute.  For type VPC_SECURITY_GROUP the value should be security_group:security_group_id where security_group_id is the value you would find in an aws_security_group resource's id attribute.
    """


    $type?: str

    uri?: str


schema LambdaAwsUpboundIoV1beta1EventSourceMappingStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


