"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema LBTargetGroup:
    r"""
    LBTargetGroup is the Schema for the LBTargetGroups API. Provides a Target Group resource for use with Load Balancers.

    Attributes
    ----------
    apiVersion : str, default is "elbv2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "LBTargetGroup", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpec, default is Undefined, required
        spec
    status : Elbv2AwsUpboundIoV1beta1LBTargetGroupStatus, default is Undefined, optional
        status
    """


    apiVersion: "elbv2.aws.upbound.io/v1beta1" = "elbv2.aws.upbound.io/v1beta1"

    kind: "LBTargetGroup" = "LBTargetGroup"

    metadata?: v1.ObjectMeta

    spec: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpec

    status?: Elbv2AwsUpboundIoV1beta1LBTargetGroupStatus


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpec:
    r"""
    LBTargetGroupSpec defines the desired state of LBTargetGroup

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProvider, default is Undefined, required
        for provider
    initProvider : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProvider

    initProvider?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecProviderConfigRef

    publishConnectionDetailsTo?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecWriteConnectionSecretToRef


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProvider:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec for provider

    Attributes
    ----------
    connectionTermination : bool, default is Undefined, optional
        Whether to terminate connections at the end of the deregistration timeout on Network Load Balancers. See doc for more information. Default is false.
    deregistrationDelay : str, default is Undefined, optional
        Amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds.
    healthCheck : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderHealthCheckItems0], default is Undefined, optional
        Health Check configuration block. Detailed below.
    ipAddressType : str, default is Undefined, optional
        The type of IP addresses used by the target group, only supported when target type is set to ip. Possible values are ipv4 or ipv6.
    lambdaMultiValueHeadersEnabled : bool, default is Undefined, optional
        Whether the request and response headers exchanged between the load balancer and the Lambda function include arrays of values or strings. Only applies when target_type is lambda. Default is false.
    loadBalancingAlgorithmType : str, default is Undefined, optional
        Determines how the load balancer selects targets when routing requests. Only applicable for Application Load Balancer Target Groups. The value is round_robin, least_outstanding_requests, or weighted_random. The default is round_robin.
    loadBalancingAnomalyMitigation : str, default is Undefined, optional
        Determines whether to enable target anomaly mitigation.  Target anomaly mitigation is only supported by the weighted_random load balancing algorithm type.  See doc for more information.  The value is "on" or "off". The default is "off".
    loadBalancingCrossZoneEnabled : str, default is Undefined, optional
        Indicates whether cross zone load balancing is enabled. The value is "true", "false" or "use_load_balancer_configuration". The default is "use_load_balancer_configuration".
    name : str, default is Undefined, optional
        Name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    port : float, default is Undefined, optional
        (May be required, Forces new resource) Port on which targets receive traffic, unless overridden when registering a specific target. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
    preserveClientIp : str, default is Undefined, optional
        Whether client IP preservation is enabled. See doc for more information.
    $protocol : str, default is Undefined, optional
        (May be required, Forces new resource) Protocol to use for routing traffic to the targets.
        Should be one of GENEVE, HTTP, HTTPS, TCP, TCP_UDP, TLS, or UDP.
        Required when target_type is instance, ip, or alb.
        Does not apply when target_type is lambda.
    protocolVersion : str, default is Undefined, optional
        Only applicable when protocol is HTTP or HTTPS. The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1
    proxyProtocolV2 : bool, default is Undefined, optional
        Whether to enable support for proxy protocol v2 on Network Load Balancers. See doc for more information. Default is false.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    slowStart : float, default is Undefined, optional
        Amount time for targets to warm up before the load balancer sends them a full share of requests. The range is 30-900 seconds or 0 to disable. The default value is 0 seconds.
    stickiness : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderStickinessItems0], default is Undefined, optional
        Stickiness configuration block. Detailed below.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    targetFailover : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetFailoverItems0], default is Undefined, optional
        Target failover block. Only applicable for Gateway Load Balancer target groups. See target_failover for more information.
    targetGroupHealth : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetGroupHealthItems0], default is Undefined, optional
        Target health requirements block. See target_group_health for more information.
    targetHealthState : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetHealthStateItems0], default is Undefined, optional
        Target health state block. Only applicable for Network Load Balancer target groups when protocol is TCP or TLS. See target_health_state for more information.
    targetType : str, default is Undefined, optional
        Type of target that you must specify when registering targets with this target group.
        See doc for supported values.
        The default is instance.
    vpcId : str, default is Undefined, optional
        Identifier of the VPC in which to create the target group. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
    vpcIdRef : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    connectionTermination?: bool

    deregistrationDelay?: str

    healthCheck?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderHealthCheckItems0]

    ipAddressType?: str

    lambdaMultiValueHeadersEnabled?: bool

    loadBalancingAlgorithmType?: str

    loadBalancingAnomalyMitigation?: str

    loadBalancingCrossZoneEnabled?: str

    name?: str

    port?: float

    preserveClientIp?: str

    $protocol?: str

    protocolVersion?: str

    proxyProtocolV2?: bool

    region: str

    slowStart?: float

    stickiness?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderStickinessItems0]

    tags?: {str:str}

    targetFailover?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetFailoverItems0]

    targetGroupHealth?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetGroupHealthItems0]

    targetHealthState?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetHealthStateItems0]

    targetType?: str

    vpcId?: str

    vpcIdRef?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDRef

    vpcIdSelector?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDSelector


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderHealthCheckItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec for provider health check items0

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Whether health checks are enabled. Defaults to true.
    healthyThreshold : float, default is Undefined, optional
        Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
    interval : float, default is Undefined, optional
        Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For lambda target groups, it needs to be greater than the timeout of the underlying lambda. Defaults to 30.
    matcher : str, default is Undefined, optional
        separated individual values (e.g., "200,202") or a range of values (e.g., "200-299").
    path : str, default is Undefined, optional
        (May be required) Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
    port : str, default is Undefined, optional
        The port the load balancer uses when performing health checks on targets.
        Valid values are either traffic-port, to use the same port as the target group, or a valid port number between 1 and 65536.
        Default is traffic-port.
    $protocol : str, default is Undefined, optional
        Protocol the load balancer uses when performing health checks on targets.
        Must be one of TCP, HTTP, or HTTPS.
        The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS.
        Default is HTTP.
        Cannot be specified when the target_type is lambda.
    timeout : float, default is Undefined, optional
        Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
    unhealthyThreshold : float, default is Undefined, optional
        Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
    """


    enabled?: bool

    healthyThreshold?: float

    interval?: float

    matcher?: str

    path?: str

    port?: str

    $protocol?: str

    timeout?: float

    unhealthyThreshold?: float


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderStickinessItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec for provider stickiness items0

    Attributes
    ----------
    cookieDuration : float, default is Undefined, optional
        Only used when the type is lb_cookie. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
    cookieName : str, default is Undefined, optional
        Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is app_cookie.
    enabled : bool, default is Undefined, optional
        Whether health checks are enabled. Defaults to true.
    $type : str, default is Undefined, optional
        The type of sticky sessions. The only current possible values are lb_cookie, app_cookie for ALBs, source_ip for NLBs, and source_ip_dest_ip, source_ip_dest_ip_proto for GWLBs.
    """


    cookieDuration?: float

    cookieName?: str

    enabled?: bool

    $type?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetFailoverItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec for provider target failover items0

    Attributes
    ----------
    onDeregistration : str, default is Undefined, optional
        Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are rebalance and no_rebalance. Must match the attribute value set for on_unhealthy. Default: no_rebalance.
    onUnhealthy : str, default is Undefined, optional
        Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are rebalance and no_rebalance. Must match the attribute value set for on_deregistration. Default: no_rebalance.
    """


    onDeregistration?: str

    onUnhealthy?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetGroupHealthItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec for provider target group health items0

    Attributes
    ----------
    dnsFailover : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetGroupHealthItems0DNSFailoverItems0], default is Undefined, optional
        Block to configure DNS Failover requirements. See DNS Failover below for details on attributes.
    unhealthyStateRouting : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetGroupHealthItems0UnhealthyStateRoutingItems0], default is Undefined, optional
        Block to configure Unhealthy State Routing requirements. See Unhealthy State Routing below for details on attributes.
    """


    dnsFailover?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetGroupHealthItems0DNSFailoverItems0]

    unhealthyStateRouting?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetGroupHealthItems0UnhealthyStateRoutingItems0]


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetGroupHealthItems0DNSFailoverItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec for provider target group health items0 DNS failover items0

    Attributes
    ----------
    minimumHealthyTargetsCount : str, default is Undefined, optional
        The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are off or an integer from 1 to the maximum number of targets. The default is off.
    minimumHealthyTargetsPercentage : str, default is Undefined, optional
        The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are off or an integer from 1 to 100. The default is off.
    """


    minimumHealthyTargetsCount?: str

    minimumHealthyTargetsPercentage?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetGroupHealthItems0UnhealthyStateRoutingItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec for provider target group health items0 unhealthy state routing items0

    Attributes
    ----------
    minimumHealthyTargetsCount : float, default is Undefined, optional
        The minimum number of targets that must be healthy. If the number of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are 1 to the maximum number of targets. The default is 1.
    minimumHealthyTargetsPercentage : str, default is Undefined, optional
        The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are off or an integer from 1 to 100. The default is off.
    """


    minimumHealthyTargetsCount?: float

    minimumHealthyTargetsPercentage?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderTargetHealthStateItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec for provider target health state items0

    Attributes
    ----------
    enableUnhealthyConnectionTermination : bool, default is Undefined, optional
        Indicates whether the load balancer terminates connections to unhealthy targets. Possible values are true or false. Default: true.
    unhealthyDrainingInterval : float, default is Undefined, optional
        Indicates the time to wait for in-flight requests to complete when a target becomes unhealthy. The range is 0-360000. This value has to be set only if enable_unhealthy_connection_termination is set to false. Default: 0.
    """


    enableUnhealthyConnectionTermination?: bool

    unhealthyDrainingInterval?: float


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDRefPolicy


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDSelectorPolicy


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecForProviderVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    connectionTermination : bool, default is Undefined, optional
        Whether to terminate connections at the end of the deregistration timeout on Network Load Balancers. See doc for more information. Default is false.
    deregistrationDelay : str, default is Undefined, optional
        Amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds.
    healthCheck : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderHealthCheckItems0], default is Undefined, optional
        Health Check configuration block. Detailed below.
    ipAddressType : str, default is Undefined, optional
        The type of IP addresses used by the target group, only supported when target type is set to ip. Possible values are ipv4 or ipv6.
    lambdaMultiValueHeadersEnabled : bool, default is Undefined, optional
        Whether the request and response headers exchanged between the load balancer and the Lambda function include arrays of values or strings. Only applies when target_type is lambda. Default is false.
    loadBalancingAlgorithmType : str, default is Undefined, optional
        Determines how the load balancer selects targets when routing requests. Only applicable for Application Load Balancer Target Groups. The value is round_robin, least_outstanding_requests, or weighted_random. The default is round_robin.
    loadBalancingAnomalyMitigation : str, default is Undefined, optional
        Determines whether to enable target anomaly mitigation.  Target anomaly mitigation is only supported by the weighted_random load balancing algorithm type.  See doc for more information.  The value is "on" or "off". The default is "off".
    loadBalancingCrossZoneEnabled : str, default is Undefined, optional
        Indicates whether cross zone load balancing is enabled. The value is "true", "false" or "use_load_balancer_configuration". The default is "use_load_balancer_configuration".
    name : str, default is Undefined, optional
        Name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    port : float, default is Undefined, optional
        (May be required, Forces new resource) Port on which targets receive traffic, unless overridden when registering a specific target. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
    preserveClientIp : str, default is Undefined, optional
        Whether client IP preservation is enabled. See doc for more information.
    $protocol : str, default is Undefined, optional
        (May be required, Forces new resource) Protocol to use for routing traffic to the targets.
        Should be one of GENEVE, HTTP, HTTPS, TCP, TCP_UDP, TLS, or UDP.
        Required when target_type is instance, ip, or alb.
        Does not apply when target_type is lambda.
    protocolVersion : str, default is Undefined, optional
        Only applicable when protocol is HTTP or HTTPS. The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1
    proxyProtocolV2 : bool, default is Undefined, optional
        Whether to enable support for proxy protocol v2 on Network Load Balancers. See doc for more information. Default is false.
    slowStart : float, default is Undefined, optional
        Amount time for targets to warm up before the load balancer sends them a full share of requests. The range is 30-900 seconds or 0 to disable. The default value is 0 seconds.
    stickiness : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderStickinessItems0], default is Undefined, optional
        Stickiness configuration block. Detailed below.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    targetFailover : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetFailoverItems0], default is Undefined, optional
        Target failover block. Only applicable for Gateway Load Balancer target groups. See target_failover for more information.
    targetGroupHealth : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetGroupHealthItems0], default is Undefined, optional
        Target health requirements block. See target_group_health for more information.
    targetHealthState : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetHealthStateItems0], default is Undefined, optional
        Target health state block. Only applicable for Network Load Balancer target groups when protocol is TCP or TLS. See target_health_state for more information.
    targetType : str, default is Undefined, optional
        Type of target that you must specify when registering targets with this target group.
        See doc for supported values.
        The default is instance.
    vpcId : str, default is Undefined, optional
        Identifier of the VPC in which to create the target group. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
    vpcIdRef : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    connectionTermination?: bool

    deregistrationDelay?: str

    healthCheck?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderHealthCheckItems0]

    ipAddressType?: str

    lambdaMultiValueHeadersEnabled?: bool

    loadBalancingAlgorithmType?: str

    loadBalancingAnomalyMitigation?: str

    loadBalancingCrossZoneEnabled?: str

    name?: str

    port?: float

    preserveClientIp?: str

    $protocol?: str

    protocolVersion?: str

    proxyProtocolV2?: bool

    slowStart?: float

    stickiness?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderStickinessItems0]

    tags?: {str:str}

    targetFailover?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetFailoverItems0]

    targetGroupHealth?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetGroupHealthItems0]

    targetHealthState?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetHealthStateItems0]

    targetType?: str

    vpcId?: str

    vpcIdRef?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDRef

    vpcIdSelector?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDSelector


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderHealthCheckItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec init provider health check items0

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Whether health checks are enabled. Defaults to true.
    healthyThreshold : float, default is Undefined, optional
        Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
    interval : float, default is Undefined, optional
        Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For lambda target groups, it needs to be greater than the timeout of the underlying lambda. Defaults to 30.
    matcher : str, default is Undefined, optional
        separated individual values (e.g., "200,202") or a range of values (e.g., "200-299").
    path : str, default is Undefined, optional
        (May be required) Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
    port : str, default is Undefined, optional
        The port the load balancer uses when performing health checks on targets.
        Valid values are either traffic-port, to use the same port as the target group, or a valid port number between 1 and 65536.
        Default is traffic-port.
    $protocol : str, default is Undefined, optional
        Protocol the load balancer uses when performing health checks on targets.
        Must be one of TCP, HTTP, or HTTPS.
        The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS.
        Default is HTTP.
        Cannot be specified when the target_type is lambda.
    timeout : float, default is Undefined, optional
        Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
    unhealthyThreshold : float, default is Undefined, optional
        Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
    """


    enabled?: bool

    healthyThreshold?: float

    interval?: float

    matcher?: str

    path?: str

    port?: str

    $protocol?: str

    timeout?: float

    unhealthyThreshold?: float


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderStickinessItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec init provider stickiness items0

    Attributes
    ----------
    cookieDuration : float, default is Undefined, optional
        Only used when the type is lb_cookie. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
    cookieName : str, default is Undefined, optional
        Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is app_cookie.
    enabled : bool, default is Undefined, optional
        Whether health checks are enabled. Defaults to true.
    $type : str, default is Undefined, optional
        The type of sticky sessions. The only current possible values are lb_cookie, app_cookie for ALBs, source_ip for NLBs, and source_ip_dest_ip, source_ip_dest_ip_proto for GWLBs.
    """


    cookieDuration?: float

    cookieName?: str

    enabled?: bool

    $type?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetFailoverItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec init provider target failover items0

    Attributes
    ----------
    onDeregistration : str, default is Undefined, optional
        Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are rebalance and no_rebalance. Must match the attribute value set for on_unhealthy. Default: no_rebalance.
    onUnhealthy : str, default is Undefined, optional
        Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are rebalance and no_rebalance. Must match the attribute value set for on_deregistration. Default: no_rebalance.
    """


    onDeregistration?: str

    onUnhealthy?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetGroupHealthItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec init provider target group health items0

    Attributes
    ----------
    dnsFailover : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetGroupHealthItems0DNSFailoverItems0], default is Undefined, optional
        Block to configure DNS Failover requirements. See DNS Failover below for details on attributes.
    unhealthyStateRouting : [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetGroupHealthItems0UnhealthyStateRoutingItems0], default is Undefined, optional
        Block to configure Unhealthy State Routing requirements. See Unhealthy State Routing below for details on attributes.
    """


    dnsFailover?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetGroupHealthItems0DNSFailoverItems0]

    unhealthyStateRouting?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetGroupHealthItems0UnhealthyStateRoutingItems0]


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetGroupHealthItems0DNSFailoverItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec init provider target group health items0 DNS failover items0

    Attributes
    ----------
    minimumHealthyTargetsCount : str, default is Undefined, optional
        The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are off or an integer from 1 to the maximum number of targets. The default is off.
    minimumHealthyTargetsPercentage : str, default is Undefined, optional
        The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are off or an integer from 1 to 100. The default is off.
    """


    minimumHealthyTargetsCount?: str

    minimumHealthyTargetsPercentage?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetGroupHealthItems0UnhealthyStateRoutingItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec init provider target group health items0 unhealthy state routing items0

    Attributes
    ----------
    minimumHealthyTargetsCount : float, default is Undefined, optional
        The minimum number of targets that must be healthy. If the number of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are 1 to the maximum number of targets. The default is 1.
    minimumHealthyTargetsPercentage : str, default is Undefined, optional
        The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are off or an integer from 1 to 100. The default is off.
    """


    minimumHealthyTargetsCount?: float

    minimumHealthyTargetsPercentage?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderTargetHealthStateItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group spec init provider target health state items0

    Attributes
    ----------
    enableUnhealthyConnectionTermination : bool, default is Undefined, optional
        Indicates whether the load balancer terminates connections to unhealthy targets. Possible values are true or false. Default: true.
    unhealthyDrainingInterval : float, default is Undefined, optional
        Indicates the time to wait for in-flight requests to complete when a target becomes unhealthy. The range is 0-360000. This value has to be set only if enable_unhealthy_connection_termination is set to false. Default: 0.
    """


    enableUnhealthyConnectionTermination?: bool

    unhealthyDrainingInterval?: float


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDRefPolicy


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDSelectorPolicy


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecInitProviderVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecProviderConfigRefPolicy


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsToConfigRef

    metadata?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsToMetadata

    name: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsToConfigRefPolicy


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupStatus:
    r"""
    LBTargetGroupStatus defines the observed state of LBTargetGroup.

    Attributes
    ----------
    atProvider : Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProvider

    conditions?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusConditionsItems0]

    observedGeneration?: int


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProvider:
    r"""
    elbv2 aws upbound io v1beta1 l b target group status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN of the Target Group (matches id).
    arnSuffix : str, default is Undefined, optional
        ARN suffix for use with CloudWatch Metrics.
    connectionTermination : bool, default is Undefined, optional
        Whether to terminate connections at the end of the deregistration timeout on Network Load Balancers. See doc for more information. Default is false.
    deregistrationDelay : str, default is Undefined, optional
        Amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds.
    healthCheck : [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderHealthCheckItems0], default is Undefined, optional
        Health Check configuration block. Detailed below.
    id : str, default is Undefined, optional
        ARN of the Target Group (matches arn).
    ipAddressType : str, default is Undefined, optional
        The type of IP addresses used by the target group, only supported when target type is set to ip. Possible values are ipv4 or ipv6.
    lambdaMultiValueHeadersEnabled : bool, default is Undefined, optional
        Whether the request and response headers exchanged between the load balancer and the Lambda function include arrays of values or strings. Only applies when target_type is lambda. Default is false.
    loadBalancerArns : [str], default is Undefined, optional
        ARNs of the Load Balancers associated with the Target Group.
    loadBalancingAlgorithmType : str, default is Undefined, optional
        Determines how the load balancer selects targets when routing requests. Only applicable for Application Load Balancer Target Groups. The value is round_robin, least_outstanding_requests, or weighted_random. The default is round_robin.
    loadBalancingAnomalyMitigation : str, default is Undefined, optional
        Determines whether to enable target anomaly mitigation.  Target anomaly mitigation is only supported by the weighted_random load balancing algorithm type.  See doc for more information.  The value is "on" or "off". The default is "off".
    loadBalancingCrossZoneEnabled : str, default is Undefined, optional
        Indicates whether cross zone load balancing is enabled. The value is "true", "false" or "use_load_balancer_configuration". The default is "use_load_balancer_configuration".
    name : str, default is Undefined, optional
        Name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    port : float, default is Undefined, optional
        (May be required, Forces new resource) Port on which targets receive traffic, unless overridden when registering a specific target. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
    preserveClientIp : str, default is Undefined, optional
        Whether client IP preservation is enabled. See doc for more information.
    $protocol : str, default is Undefined, optional
        (May be required, Forces new resource) Protocol to use for routing traffic to the targets.
        Should be one of GENEVE, HTTP, HTTPS, TCP, TCP_UDP, TLS, or UDP.
        Required when target_type is instance, ip, or alb.
        Does not apply when target_type is lambda.
    protocolVersion : str, default is Undefined, optional
        Only applicable when protocol is HTTP or HTTPS. The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1
    proxyProtocolV2 : bool, default is Undefined, optional
        Whether to enable support for proxy protocol v2 on Network Load Balancers. See doc for more information. Default is false.
    slowStart : float, default is Undefined, optional
        Amount time for targets to warm up before the load balancer sends them a full share of requests. The range is 30-900 seconds or 0 to disable. The default value is 0 seconds.
    stickiness : [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderStickinessItems0], default is Undefined, optional
        Stickiness configuration block. Detailed below.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    targetFailover : [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetFailoverItems0], default is Undefined, optional
        Target failover block. Only applicable for Gateway Load Balancer target groups. See target_failover for more information.
    targetGroupHealth : [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetGroupHealthItems0], default is Undefined, optional
        Target health requirements block. See target_group_health for more information.
    targetHealthState : [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetHealthStateItems0], default is Undefined, optional
        Target health state block. Only applicable for Network Load Balancer target groups when protocol is TCP or TLS. See target_health_state for more information.
    targetType : str, default is Undefined, optional
        Type of target that you must specify when registering targets with this target group.
        See doc for supported values.
        The default is instance.
    vpcId : str, default is Undefined, optional
        Identifier of the VPC in which to create the target group. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
    """


    arn?: str

    arnSuffix?: str

    connectionTermination?: bool

    deregistrationDelay?: str

    healthCheck?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderHealthCheckItems0]

    id?: str

    ipAddressType?: str

    lambdaMultiValueHeadersEnabled?: bool

    loadBalancerArns?: [str]

    loadBalancingAlgorithmType?: str

    loadBalancingAnomalyMitigation?: str

    loadBalancingCrossZoneEnabled?: str

    name?: str

    port?: float

    preserveClientIp?: str

    $protocol?: str

    protocolVersion?: str

    proxyProtocolV2?: bool

    slowStart?: float

    stickiness?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderStickinessItems0]

    tags?: {str:str}

    tagsAll?: {str:str}

    targetFailover?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetFailoverItems0]

    targetGroupHealth?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetGroupHealthItems0]

    targetHealthState?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetHealthStateItems0]

    targetType?: str

    vpcId?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderHealthCheckItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group status at provider health check items0

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Whether health checks are enabled. Defaults to true.
    healthyThreshold : float, default is Undefined, optional
        Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
    interval : float, default is Undefined, optional
        Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For lambda target groups, it needs to be greater than the timeout of the underlying lambda. Defaults to 30.
    matcher : str, default is Undefined, optional
        separated individual values (e.g., "200,202") or a range of values (e.g., "200-299").
    path : str, default is Undefined, optional
        (May be required) Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
    port : str, default is Undefined, optional
        The port the load balancer uses when performing health checks on targets.
        Valid values are either traffic-port, to use the same port as the target group, or a valid port number between 1 and 65536.
        Default is traffic-port.
    $protocol : str, default is Undefined, optional
        Protocol the load balancer uses when performing health checks on targets.
        Must be one of TCP, HTTP, or HTTPS.
        The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS.
        Default is HTTP.
        Cannot be specified when the target_type is lambda.
    timeout : float, default is Undefined, optional
        Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
    unhealthyThreshold : float, default is Undefined, optional
        Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
    """


    enabled?: bool

    healthyThreshold?: float

    interval?: float

    matcher?: str

    path?: str

    port?: str

    $protocol?: str

    timeout?: float

    unhealthyThreshold?: float


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderStickinessItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group status at provider stickiness items0

    Attributes
    ----------
    cookieDuration : float, default is Undefined, optional
        Only used when the type is lb_cookie. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
    cookieName : str, default is Undefined, optional
        Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is app_cookie.
    enabled : bool, default is Undefined, optional
        Whether health checks are enabled. Defaults to true.
    $type : str, default is Undefined, optional
        The type of sticky sessions. The only current possible values are lb_cookie, app_cookie for ALBs, source_ip for NLBs, and source_ip_dest_ip, source_ip_dest_ip_proto for GWLBs.
    """


    cookieDuration?: float

    cookieName?: str

    enabled?: bool

    $type?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetFailoverItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group status at provider target failover items0

    Attributes
    ----------
    onDeregistration : str, default is Undefined, optional
        Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are rebalance and no_rebalance. Must match the attribute value set for on_unhealthy. Default: no_rebalance.
    onUnhealthy : str, default is Undefined, optional
        Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are rebalance and no_rebalance. Must match the attribute value set for on_deregistration. Default: no_rebalance.
    """


    onDeregistration?: str

    onUnhealthy?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetGroupHealthItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group status at provider target group health items0

    Attributes
    ----------
    dnsFailover : [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetGroupHealthItems0DNSFailoverItems0], default is Undefined, optional
        Block to configure DNS Failover requirements. See DNS Failover below for details on attributes.
    unhealthyStateRouting : [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetGroupHealthItems0UnhealthyStateRoutingItems0], default is Undefined, optional
        Block to configure Unhealthy State Routing requirements. See Unhealthy State Routing below for details on attributes.
    """


    dnsFailover?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetGroupHealthItems0DNSFailoverItems0]

    unhealthyStateRouting?: [Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetGroupHealthItems0UnhealthyStateRoutingItems0]


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetGroupHealthItems0DNSFailoverItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group status at provider target group health items0 DNS failover items0

    Attributes
    ----------
    minimumHealthyTargetsCount : str, default is Undefined, optional
        The minimum number of targets that must be healthy. If the number of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are off or an integer from 1 to the maximum number of targets. The default is off.
    minimumHealthyTargetsPercentage : str, default is Undefined, optional
        The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, mark the zone as unhealthy in DNS, so that traffic is routed only to healthy zones. The possible values are off or an integer from 1 to 100. The default is off.
    """


    minimumHealthyTargetsCount?: str

    minimumHealthyTargetsPercentage?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetGroupHealthItems0UnhealthyStateRoutingItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group status at provider target group health items0 unhealthy state routing items0

    Attributes
    ----------
    minimumHealthyTargetsCount : float, default is Undefined, optional
        The minimum number of targets that must be healthy. If the number of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are 1 to the maximum number of targets. The default is 1.
    minimumHealthyTargetsPercentage : str, default is Undefined, optional
        The minimum percentage of targets that must be healthy. If the percentage of healthy targets is below this value, send traffic to all targets, including unhealthy targets. The possible values are off or an integer from 1 to 100. The default is off.
    """


    minimumHealthyTargetsCount?: float

    minimumHealthyTargetsPercentage?: str


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusAtProviderTargetHealthStateItems0:
    r"""
    elbv2 aws upbound io v1beta1 l b target group status at provider target health state items0

    Attributes
    ----------
    enableUnhealthyConnectionTermination : bool, default is Undefined, optional
        Indicates whether the load balancer terminates connections to unhealthy targets. Possible values are true or false. Default: true.
    unhealthyDrainingInterval : float, default is Undefined, optional
        Indicates the time to wait for in-flight requests to complete when a target becomes unhealthy. The range is 0-360000. This value has to be set only if enable_unhealthy_connection_termination is set to false. Default: 0.
    """


    enableUnhealthyConnectionTermination?: bool

    unhealthyDrainingInterval?: float


schema Elbv2AwsUpboundIoV1beta1LBTargetGroupStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


