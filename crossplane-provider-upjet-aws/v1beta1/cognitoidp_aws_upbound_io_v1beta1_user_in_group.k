"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema UserInGroup:
    r"""
    UserInGroup is the Schema for the UserInGroups API. Adds the specified user to the specified group.

    Attributes
    ----------
    apiVersion : str, default is "cognitoidp.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "UserInGroup", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : CognitoidpAwsUpboundIoV1beta1UserInGroupSpec, default is Undefined, required
        spec
    status : CognitoidpAwsUpboundIoV1beta1UserInGroupStatus, default is Undefined, optional
        status
    """


    apiVersion: "cognitoidp.aws.upbound.io/v1beta1" = "cognitoidp.aws.upbound.io/v1beta1"

    kind: "UserInGroup" = "UserInGroup"

    metadata?: v1.ObjectMeta

    spec: CognitoidpAwsUpboundIoV1beta1UserInGroupSpec

    status?: CognitoidpAwsUpboundIoV1beta1UserInGroupStatus


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpec:
    r"""
    UserInGroupSpec defines the desired state of UserInGroup

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProvider, default is Undefined, required
        for provider
    initProvider : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProvider

    initProvider?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecProviderConfigRef

    publishConnectionDetailsTo?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecWriteConnectionSecretToRef


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProvider:
    r"""
    cognitoidp aws upbound io v1beta1 user in group spec for provider

    Attributes
    ----------
    groupName : str, default is Undefined, optional
        The name of the group to which the user is to be added.
    groupNameRef : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameRef, default is Undefined, optional
        group name ref
    groupNameSelector : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameSelector, default is Undefined, optional
        group name selector
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    userPoolId : str, default is Undefined, optional
        The user pool ID of the user and group.
    userPoolIdRef : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDRef, default is Undefined, optional
        user pool Id ref
    userPoolIdSelector : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDSelector, default is Undefined, optional
        user pool Id selector
    username : str, default is Undefined, optional
        The username of the user to be added to the group.
    usernameRef : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameRef, default is Undefined, optional
        username ref
    usernameSelector : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameSelector, default is Undefined, optional
        username selector
    """


    groupName?: str

    groupNameRef?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameRef

    groupNameSelector?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameSelector

    region: str

    userPoolId?: str

    userPoolIdRef?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDRef

    userPoolIdSelector?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDSelector

    username?: str

    usernameRef?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameRef

    usernameSelector?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameSelector


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameRef:
    r"""
    Reference to a UserGroup in cognitoidp to populate groupName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameSelector:
    r"""
    Selector for a UserGroup in cognitoidp to populate groupName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderGroupNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDRef:
    r"""
    Reference to a UserPool in cognitoidp to populate userPoolId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDSelector:
    r"""
    Selector for a UserPool in cognitoidp to populate userPoolId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUserPoolIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameRef:
    r"""
    Reference to a User in cognitoidp to populate username.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameSelector:
    r"""
    Selector for a User in cognitoidp to populate username.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecForProviderUsernameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    groupName : str, default is Undefined, optional
        The name of the group to which the user is to be added.
    groupNameRef : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameRef, default is Undefined, optional
        group name ref
    groupNameSelector : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameSelector, default is Undefined, optional
        group name selector
    userPoolId : str, default is Undefined, optional
        The user pool ID of the user and group.
    userPoolIdRef : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDRef, default is Undefined, optional
        user pool Id ref
    userPoolIdSelector : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDSelector, default is Undefined, optional
        user pool Id selector
    username : str, default is Undefined, optional
        The username of the user to be added to the group.
    usernameRef : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameRef, default is Undefined, optional
        username ref
    usernameSelector : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameSelector, default is Undefined, optional
        username selector
    """


    groupName?: str

    groupNameRef?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameRef

    groupNameSelector?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameSelector

    userPoolId?: str

    userPoolIdRef?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDRef

    userPoolIdSelector?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDSelector

    username?: str

    usernameRef?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameRef

    usernameSelector?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameSelector


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameRef:
    r"""
    Reference to a UserGroup in cognitoidp to populate groupName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameSelector:
    r"""
    Selector for a UserGroup in cognitoidp to populate groupName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderGroupNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDRef:
    r"""
    Reference to a UserPool in cognitoidp to populate userPoolId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDSelector:
    r"""
    Selector for a UserPool in cognitoidp to populate userPoolId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUserPoolIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameRef:
    r"""
    Reference to a User in cognitoidp to populate username.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameSelector:
    r"""
    Selector for a User in cognitoidp to populate username.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecInitProviderUsernameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecProviderConfigRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsToConfigRef

    metadata?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsToMetadata

    name: str


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsToConfigRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema CognitoidpAwsUpboundIoV1beta1UserInGroupSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema CognitoidpAwsUpboundIoV1beta1UserInGroupStatus:
    r"""
    UserInGroupStatus defines the observed state of UserInGroup.

    Attributes
    ----------
    atProvider : CognitoidpAwsUpboundIoV1beta1UserInGroupStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [CognitoidpAwsUpboundIoV1beta1UserInGroupStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: CognitoidpAwsUpboundIoV1beta1UserInGroupStatusAtProvider

    conditions?: [CognitoidpAwsUpboundIoV1beta1UserInGroupStatusConditionsItems0]

    observedGeneration?: int


schema CognitoidpAwsUpboundIoV1beta1UserInGroupStatusAtProvider:
    r"""
    cognitoidp aws upbound io v1beta1 user in group status at provider

    Attributes
    ----------
    groupName : str, default is Undefined, optional
        The name of the group to which the user is to be added.
    id : str, default is Undefined, optional
        id
    userPoolId : str, default is Undefined, optional
        The user pool ID of the user and group.
    username : str, default is Undefined, optional
        The username of the user to be added to the group.
    """


    groupName?: str

    id?: str

    userPoolId?: str

    username?: str


schema CognitoidpAwsUpboundIoV1beta1UserInGroupStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


