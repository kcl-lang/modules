"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema ClusterClass:
    r"""
    ClusterClass is a template which can be used to create managed topologies.

    Attributes
    ----------
    apiVersion : str, default is "cluster.x-k8s.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ClusterClass", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ClusterxK8sIoV1beta1ClusterClassSpec, default is Undefined, optional
        spec
    status : ClusterxK8sIoV1beta1ClusterClassStatus, default is Undefined, optional
        status
    """


    apiVersion: "cluster.x-k8s.io/v1beta1" = "cluster.x-k8s.io/v1beta1"

    kind: "ClusterClass" = "ClusterClass"

    metadata?: v1.ObjectMeta

    spec?: ClusterxK8sIoV1beta1ClusterClassSpec

    status?: ClusterxK8sIoV1beta1ClusterClassStatus


schema ClusterxK8sIoV1beta1ClusterClassSpec:
    r"""
    ClusterClassSpec describes the desired state of the ClusterClass.

    Attributes
    ----------
    controlPlane : ClusterxK8sIoV1beta1ClusterClassSpecControlPlane, default is Undefined, optional
        control plane
    infrastructure : ClusterxK8sIoV1beta1ClusterClassSpecInfrastructure, default is Undefined, optional
        infrastructure
    patches : [ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0], default is Undefined, optional
        Patches defines the patches which are applied to customize
        referenced templates of a ClusterClass.
        Note: Patches will be applied in the order of the array.
    variables : [ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0], default is Undefined, optional
        Variables defines the variables which can be configured
        in the Cluster topology and are then used in patches.
    workers : ClusterxK8sIoV1beta1ClusterClassSpecWorkers, default is Undefined, optional
        workers
    """


    controlPlane?: ClusterxK8sIoV1beta1ClusterClassSpecControlPlane

    infrastructure?: ClusterxK8sIoV1beta1ClusterClassSpecInfrastructure

    patches?: [ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0]

    variables?: [ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0]

    workers?: ClusterxK8sIoV1beta1ClusterClassSpecWorkers


schema ClusterxK8sIoV1beta1ClusterClassSpecControlPlane:
    r"""
    ControlPlane is a reference to a local struct that holds the details
    for provisioning the Control Plane for the Cluster.

    Attributes
    ----------
    machineHealthCheck : ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineHealthCheck, default is Undefined, optional
        machine health check
    machineInfrastructure : ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineInfrastructure, default is Undefined, optional
        machine infrastructure
    metadata : ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMetadata, default is Undefined, optional
        metadata
    namingStrategy : ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneNamingStrategy, default is Undefined, optional
        naming strategy
    nodeDeletionTimeout : str, default is Undefined, optional
        NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine
        hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.
        Defaults to 10 seconds.
        NOTE: This value can be overridden while defining a Cluster.Topology.
    nodeDrainTimeout : str, default is Undefined, optional
        NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.
        The default value is 0, meaning that the node can be drained without any time limitations.
        NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
        NOTE: This value can be overridden while defining a Cluster.Topology.
    nodeVolumeDetachTimeout : str, default is Undefined, optional
        NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes
        to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
        NOTE: This value can be overridden while defining a Cluster.Topology.
    ref : ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneRef, default is Undefined, required
        ref
    """


    machineHealthCheck?: ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineHealthCheck

    machineInfrastructure?: ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineInfrastructure

    metadata?: ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMetadata

    namingStrategy?: ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneNamingStrategy

    nodeDeletionTimeout?: str

    nodeDrainTimeout?: str

    nodeVolumeDetachTimeout?: str

    ref: ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneRef


schema ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineHealthCheck:
    r"""
    MachineHealthCheck defines a MachineHealthCheck for this ControlPlaneClass.
    This field is supported if and only if the ControlPlane provider template
    referenced above is Machine based and supports setting replicas.

    Attributes
    ----------
    maxUnhealthy : int | str, default is Undefined, optional
        Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by
        "selector" are not healthy.
    nodeStartupTimeout : str, default is Undefined, optional
        NodeStartupTimeout allows to set the maximum time for MachineHealthCheck
        to consider a Machine unhealthy if a corresponding Node isn't associated
        through a `Spec.ProviderID` field.


        The duration set in this field is compared to the greatest of:
        - Cluster's infrastructure ready condition timestamp (if and when available)
        - Control Plane's initialized condition timestamp (if and when available)
        - Machine's infrastructure ready condition timestamp (if and when available)
        - Machine's metadata creation timestamp


        Defaults to 10 minutes.
        If you wish to disable this feature, set the value explicitly to 0.
    remediationTemplate : ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineHealthCheckRemediationTemplate, default is Undefined, optional
        remediation template
    unhealthyConditions : [ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineHealthCheckUnhealthyConditionsItems0], default is Undefined, optional
        UnhealthyConditions contains a list of the conditions that determine
        whether a node is considered unhealthy. The conditions are combined in a
        logical OR, i.e. if any of the conditions is met, the node is unhealthy.
    unhealthyRange : str, default is Undefined, optional
        Any further remediation is only allowed if the number of machines selected by "selector" as not healthy
        is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy.
        Eg. "[3-5]" - This means that remediation will be allowed only when:
        (a) there are at least 3 unhealthy machines (and)
        (b) there are at most 5 unhealthy machines
    """


    maxUnhealthy?: int | str

    nodeStartupTimeout?: str

    remediationTemplate?: ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineHealthCheckRemediationTemplate

    unhealthyConditions?: [ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineHealthCheckUnhealthyConditionsItems0]

    unhealthyRange?: str


    check:
        _regex_match(str(unhealthyRange), r"^\[[0-9]+-[0-9]+\]$") if unhealthyRange


schema ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineHealthCheckRemediationTemplate:
    r"""
    RemediationTemplate is a reference to a remediation template
    provided by an infrastructure provider.


    This field is completely optional, when filled, the MachineHealthCheck controller
    creates a new object from the template referenced and hands off remediation of the machine to
    a controller that lives outside of Cluster API.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineHealthCheckUnhealthyConditionsItems0:
    r"""
    UnhealthyCondition represents a Node condition type and value with a timeout
    specified as a duration.  When the named condition has been in the given
    status for at least the timeout value, a node is considered unhealthy.

    Attributes
    ----------
    status : str, default is Undefined, required
        status
    timeout : str, default is Undefined, required
        timeout
    $type : str, default is Undefined, required
        type
    """


    status: str

    timeout: str

    $type: str


    check:
        len(status) >= 1
        len($type) >= 1


schema ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineInfrastructure:
    r"""
    MachineInfrastructure defines the metadata and infrastructure information
    for control plane machines.


    This field is supported if and only if the control plane provider template
    referenced above is Machine based and supports setting replicas.

    Attributes
    ----------
    ref : ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineInfrastructureRef, default is Undefined, required
        ref
    """


    ref: ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineInfrastructureRef


schema ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMachineInfrastructureRef:
    r"""
    Ref is a required reference to a custom resource
    offered by a provider.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneMetadata:
    r"""
    Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane
    if the ControlPlaneTemplate referenced is machine based. If not, it is applied only to the
    ControlPlane.
    At runtime this metadata is merged with the corresponding metadata from the topology.


    This field is supported if and only if the control plane provider template
    referenced is Machine based.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: http://kubernetes.io/docs/user-guide/labels
    """


    annotations?: {str:str}

    labels?: {str:str}


schema ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneNamingStrategy:
    r"""
    NamingStrategy allows changing the naming pattern used when creating the control plane provider object.

    Attributes
    ----------
    template : str, default is Undefined, optional
        Template defines the template to use for generating the name of the ControlPlane object.
        If not defined, it will fallback to `{{ .cluster.name }}-{{ .random }}`.
        If the templated string exceeds 63 characters, it will be trimmed to 58 characters and will
        get concatenated with a random suffix of length 5.
        The templating mechanism provides the following arguments:
        * `.cluster.name`: The name of the cluster object.
        * `.random`: A random alphanumeric string, without vowels, of length 5.
    """


    template?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecControlPlaneRef:
    r"""
    Ref is a required reference to a custom resource
    offered by a provider.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecInfrastructure:
    r"""
    Infrastructure is a reference to a provider-specific template that holds
    the details for provisioning infrastructure specific cluster
    for the underlying provider.
    The underlying provider is responsible for the implementation
    of the template to an infrastructure cluster.

    Attributes
    ----------
    ref : ClusterxK8sIoV1beta1ClusterClassSpecInfrastructureRef, default is Undefined, required
        ref
    """


    ref: ClusterxK8sIoV1beta1ClusterClassSpecInfrastructureRef


schema ClusterxK8sIoV1beta1ClusterClassSpecInfrastructureRef:
    r"""
    Ref is a required reference to a custom resource
    offered by a provider.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0:
    r"""
    ClusterClassPatch defines a patch which is applied to customize the referenced templates.

    Attributes
    ----------
    definitions : [ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0], default is Undefined, optional
        Definitions define inline patches.
        Note: Patches will be applied in the order of the array.
        Note: Exactly one of Definitions or External must be set.
    description : str, default is Undefined, optional
        Description is a human-readable description of this patch.
    enabledIf : str, default is Undefined, optional
        EnabledIf is a Go template to be used to calculate if a patch should be enabled.
        It can reference variables defined in .spec.variables and builtin variables.
        The patch will be enabled if the template evaluates to `true`, otherwise it will
        be disabled.
        If EnabledIf is not set, the patch will be enabled per default.
    external : ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0External, default is Undefined, optional
        external
    name : str, default is Undefined, required
        Name of the patch.
    """


    definitions?: [ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0]

    description?: str

    enabledIf?: str

    external?: ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0External

    name: str


schema ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0:
    r"""
    PatchDefinition defines a patch which is applied to customize the referenced templates.

    Attributes
    ----------
    jsonPatches : [ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0JSONPatchesItems0], default is Undefined, required
        JSONPatches defines the patches which should be applied on the templates
        matching the selector.
        Note: Patches will be applied in the order of the array.
    selector : ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0Selector, default is Undefined, required
        selector
    """


    jsonPatches: [ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0JSONPatchesItems0]

    selector: ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0Selector


schema ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0JSONPatchesItems0:
    r"""
    JSONPatch defines a JSON patch.

    Attributes
    ----------
    op : str, default is Undefined, required
        Op defines the operation of the patch.
        Note: Only `add`, `replace` and `remove` are supported.
    path : str, default is Undefined, required
        Path defines the path of the patch.
        Note: Only the spec of a template can be patched, thus the path has to start with /spec/.
        Note: For now the only allowed array modifications are `append` and `prepend`, i.e.:
        * for op: `add`: only index 0 (prepend) and - (append) are allowed
        * for op: `replace` or `remove`: no indexes are allowed
    value : any, default is Undefined, optional
        Value defines the value of the patch.
        Note: Either Value or ValueFrom is required for add and replace
        operations. Only one of them is allowed to be set at the same time.
        Note: We have to use apiextensionsv1.JSON instead of our JSON type,
        because controller-tools has a hard-coded schema for apiextensionsv1.JSON
        which cannot be produced by another type (unset type field).
        Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
    valueFrom : ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0JSONPatchesItems0ValueFrom, default is Undefined, optional
        value from
    """


    op: str

    path: str

    value?: any

    valueFrom?: ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0JSONPatchesItems0ValueFrom


schema ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0JSONPatchesItems0ValueFrom:
    r"""
    ValueFrom defines the value of the patch.
    Note: Either Value or ValueFrom is required for add and replace
    operations. Only one of them is allowed to be set at the same time.

    Attributes
    ----------
    template : str, default is Undefined, optional
        Template is the Go template to be used to calculate the value.
        A template can reference variables defined in .spec.variables and builtin variables.
        Note: The template must evaluate to a valid YAML or JSON value.
    variable : str, default is Undefined, optional
        Variable is the variable to be used as value.
        Variable can be one of the variables defined in .spec.variables or a builtin variable.
    """


    template?: str

    variable?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0Selector:
    r"""
    Selector defines on which templates the patch should be applied.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion filters templates by apiVersion.
    kind : str, default is Undefined, required
        Kind filters templates by kind.
    matchResources : ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0SelectorMatchResources, default is Undefined, required
        match resources
    """


    apiVersion: str

    kind: str

    matchResources: ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0SelectorMatchResources


schema ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0SelectorMatchResources:
    r"""
    MatchResources selects templates based on where they are referenced.

    Attributes
    ----------
    controlPlane : bool, default is Undefined, optional
        ControlPlane selects templates referenced in .spec.ControlPlane.
        Note: this will match the controlPlane and also the controlPlane
        machineInfrastructure (depending on the kind and apiVersion).
    infrastructureCluster : bool, default is Undefined, optional
        InfrastructureCluster selects templates referenced in .spec.infrastructure.
    machineDeploymentClass : ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0SelectorMatchResourcesMachineDeploymentClass, default is Undefined, optional
        machine deployment class
    machinePoolClass : ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0SelectorMatchResourcesMachinePoolClass, default is Undefined, optional
        machine pool class
    """


    controlPlane?: bool

    infrastructureCluster?: bool

    machineDeploymentClass?: ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0SelectorMatchResourcesMachineDeploymentClass

    machinePoolClass?: ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0SelectorMatchResourcesMachinePoolClass


schema ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0SelectorMatchResourcesMachineDeploymentClass:
    r"""
    MachineDeploymentClass selects templates referenced in specific MachineDeploymentClasses in
    .spec.workers.machineDeployments.

    Attributes
    ----------
    names : [str], default is Undefined, optional
        Names selects templates by class names.
    """


    names?: [str]


schema ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0DefinitionsItems0SelectorMatchResourcesMachinePoolClass:
    r"""
    MachinePoolClass selects templates referenced in specific MachinePoolClasses in
    .spec.workers.machinePools.

    Attributes
    ----------
    names : [str], default is Undefined, optional
        Names selects templates by class names.
    """


    names?: [str]


schema ClusterxK8sIoV1beta1ClusterClassSpecPatchesItems0External:
    r"""
    External defines an external patch.
    Note: Exactly one of Definitions or External must be set.

    Attributes
    ----------
    discoverVariablesExtension : str, default is Undefined, optional
        DiscoverVariablesExtension references an extension which is called to discover variables.
    generateExtension : str, default is Undefined, optional
        GenerateExtension references an extension which is called to generate patches.
    settings : {str:str}, default is Undefined, optional
        Settings defines key value pairs to be passed to the extensions.
        Values defined here take precedence over the values defined in the
        corresponding ExtensionConfig.
    validateExtension : str, default is Undefined, optional
        ValidateExtension references an extension which is called to validate the topology.
    """


    discoverVariablesExtension?: str

    generateExtension?: str

    settings?: {str:str}

    validateExtension?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0:
    r"""
    ClusterClassVariable defines a variable which can
    be configured in the Cluster topology and used in patches.

    Attributes
    ----------
    metadata : ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0Metadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name of the variable.
    required : bool, default is Undefined, required
        Required specifies if the variable is required.
        Note: this applies to the variable as a whole and thus the
        top-level object defined in the schema. If nested fields are
        required, this will be specified inside the schema.
    $schema : ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0Schema, default is Undefined, required
        schema
    """


    metadata?: ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0Metadata

    name: str

    required: bool

    $schema: ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0Schema


schema ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0Metadata:
    r"""
    Metadata is the metadata of a variable.
    It can be used to add additional data for higher level tools to
    a ClusterClassVariable.


    Deprecated: This field is deprecated and is going to be removed in the next apiVersion. Please use XMetadata in JSONSchemaProps instead.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map that can be used to store and
        retrieve arbitrary metadata.
        They are not queryable.
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) variables.
    """


    annotations?: {str:str}

    labels?: {str:str}


schema ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0Schema:
    r"""
    Schema defines the schema of the variable.

    Attributes
    ----------
    openAPIV3Schema : ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0SchemaOpenAPIV3Schema, default is Undefined, required
        open API v3 schema
    """


    openAPIV3Schema: ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0SchemaOpenAPIV3Schema


schema ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0SchemaOpenAPIV3Schema:
    r"""
    OpenAPIV3Schema defines the schema of a variable via OpenAPI v3
    schema. The schema is a subset of the schema used in
    Kubernetes CRDs.

    Attributes
    ----------
    additionalProperties : any, default is Undefined, optional
        AdditionalProperties specifies the schema of values in a map (keys are always strings).
        NOTE: Can only be set if type is object.
        NOTE: AdditionalProperties is mutually exclusive with Properties.
        NOTE: This field uses PreserveUnknownFields and Schemaless,
        because recursive validation is not possible.
    default : any, default is Undefined, optional
        Default is the default value of the variable.
        NOTE: Can be set for all types.
    description : str, default is Undefined, optional
        Description is a human-readable description of this variable.
    enum : [any], default is Undefined, optional
        Enum is the list of valid values of the variable.
        NOTE: Can be set for all types.
    example : any, default is Undefined, optional
        Example is an example for this variable.
    exclusiveMaximum : bool, default is Undefined, optional
        ExclusiveMaximum specifies if the Maximum is exclusive.
        NOTE: Can only be set if type is integer or number.
    exclusiveMinimum : bool, default is Undefined, optional
        ExclusiveMinimum specifies if the Minimum is exclusive.
        NOTE: Can only be set if type is integer or number.
    format : str, default is Undefined, optional
        Format is an OpenAPI v3 format string. Unknown formats are ignored.
        For a list of supported formats please see: (of the k8s.io/apiextensions-apiserver version we're currently using)
        https://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go
        NOTE: Can only be set if type is string.
    items : any, default is Undefined, optional
        Items specifies fields of an array.
        NOTE: Can only be set if type is array.
        NOTE: This field uses PreserveUnknownFields and Schemaless,
        because recursive validation is not possible.
    maxItems : int, default is Undefined, optional
        MaxItems is the max length of an array variable.
        NOTE: Can only be set if type is array.
    maxLength : int, default is Undefined, optional
        MaxLength is the max length of a string variable.
        NOTE: Can only be set if type is string.
    maxProperties : int, default is Undefined, optional
        MaxProperties is the maximum amount of entries in a map or properties in an object.
        NOTE: Can only be set if type is object.
    maximum : int, default is Undefined, optional
        Maximum is the maximum of an integer or number variable.
        If ExclusiveMaximum is false, the variable is valid if it is lower than, or equal to, the value of Maximum.
        If ExclusiveMaximum is true, the variable is valid if it is strictly lower than the value of Maximum.
        NOTE: Can only be set if type is integer or number.
    minItems : int, default is Undefined, optional
        MinItems is the min length of an array variable.
        NOTE: Can only be set if type is array.
    minLength : int, default is Undefined, optional
        MinLength is the min length of a string variable.
        NOTE: Can only be set if type is string.
    minProperties : int, default is Undefined, optional
        MinProperties is the minimum amount of entries in a map or properties in an object.
        NOTE: Can only be set if type is object.
    minimum : int, default is Undefined, optional
        Minimum is the minimum of an integer or number variable.
        If ExclusiveMinimum is false, the variable is valid if it is greater than, or equal to, the value of Minimum.
        If ExclusiveMinimum is true, the variable is valid if it is strictly greater than the value of Minimum.
        NOTE: Can only be set if type is integer or number.
    pattern : str, default is Undefined, optional
        Pattern is the regex which a string variable must match.
        NOTE: Can only be set if type is string.
    properties : any, default is Undefined, optional
        Properties specifies fields of an object.
        NOTE: Can only be set if type is object.
        NOTE: Properties is mutually exclusive with AdditionalProperties.
        NOTE: This field uses PreserveUnknownFields and Schemaless,
        because recursive validation is not possible.
    required : [str], default is Undefined, optional
        Required specifies which fields of an object are required.
        NOTE: Can only be set if type is object.
    $type : str, default is Undefined, required
        Type is the type of the variable.
        Valid values are: object, array, string, integer, number or boolean.
    uniqueItems : bool, default is Undefined, optional
        UniqueItems specifies if items in an array must be unique.
        NOTE: Can only be set if type is array.
    "x-kubernetes-preserve-unknown-fields" : bool, default is Undefined, optional
        XPreserveUnknownFields allows setting fields in a variable object
        which are not defined in the variable schema. This affects fields recursively,
        except if nested properties or additionalProperties are specified in the schema.
    "x-kubernetes-validations" : [ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0SchemaOpenAPIV3SchemaXKubernetesValidationsItems0], default is Undefined, optional
        XValidations describes a list of validation rules written in the CEL expression language.
    "x-metadata" : ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0SchemaOpenAPIV3SchemaXMetadata, default is Undefined, optional
        x metadata
    """


    additionalProperties?: any

    default?: any

    description?: str

    enum?: [any]

    example?: any

    exclusiveMaximum?: bool

    exclusiveMinimum?: bool

    format?: str

    items?: any

    maxItems?: int

    maxLength?: int

    maxProperties?: int

    maximum?: int

    minItems?: int

    minLength?: int

    minProperties?: int

    minimum?: int

    pattern?: str

    properties?: any

    required?: [str]

    $type: str

    uniqueItems?: bool

    "x-kubernetes-preserve-unknown-fields"?: bool

    "x-kubernetes-validations"?: [ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0SchemaOpenAPIV3SchemaXKubernetesValidationsItems0]

    "x-metadata"?: ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0SchemaOpenAPIV3SchemaXMetadata


schema ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0SchemaOpenAPIV3SchemaXKubernetesValidationsItems0:
    r"""
    ValidationRule describes a validation rule written in the CEL expression language.

    Attributes
    ----------
    fieldPath : str, default is Undefined, optional
        FieldPath represents the field path returned when the validation fails.
        It must be a relative JSON path (i.e. with array notation) scoped to the location of this x-kubernetes-validations extension in the schema and refer to an existing field.
        e.g. when validation checks if a specific attribute `foo` under a map `testMap`, the fieldPath could be set to `.testMap.foo`
        If the validation checks two lists must have unique attributes, the fieldPath could be set to either of the list: e.g. `.testList`
        It does not support list numeric index.
        It supports child operation to refer to an existing field currently. Refer to [JSONPath support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/) for more info.
        Numeric index of array is not supported.
        For field name which contains special characters, use `['specialName']` to refer the field name.
        e.g. for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set to `.testList['foo.34$']`
    message : str, default is Undefined, optional
        Message represents the message displayed when validation fails. The message is required if the Rule contains
        line breaks. The message must not contain line breaks.
        If unset, the message is "failed rule: {Rule}".
        e.g. "must be a URL with the host matching spec.host"
    messageExpression : str, default is Undefined, optional
        MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails.
        Since messageExpression is used as a failure message, it must evaluate to a string.
        If both message and messageExpression are present on a rule, then messageExpression will be used if validation
        fails. If messageExpression results in a runtime error, the validation failure message is produced
        as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string
        that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset.
        messageExpression has access to all the same variables as the rule; the only difference is the return type.
        Example:
        "x must be less than max ("+string(self.max)+")"
    reason : str, default is "FieldValueInvalid", optional
        Reason provides a machine-readable validation failure reason that is returned to the caller when a request fails this validation rule.
        The currently supported reasons are: "FieldValueInvalid", "FieldValueForbidden", "FieldValueRequired", "FieldValueDuplicate".
        If not set, default to use "FieldValueInvalid".
        All future added reasons must be accepted by clients when reading this value and unknown reasons should be treated as FieldValueInvalid.
    $rule : str, default is Undefined, required
        Rule represents the expression which will be evaluated by CEL.
        ref: https://github.com/google/cel-spec
        The Rule is scoped to the location of the x-kubernetes-validations extension in the schema.
        The `self` variable in the CEL expression is bound to the scoped value.
        If the Rule is scoped to an object with properties, the accessible properties of the object are field selectable
        via `self.field` and field presence can be checked via `has(self.field)`.
        If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map
        are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map
        are accessible via CEL macros and functions such as `self.all(...)`.
        If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and
        functions.
        If the Rule is scoped to a scalar, `self` is bound to the scalar value.
        Examples:
        - Rule scoped to a map of objects: {"rule": "self.components['Widget'].priority < 10"}
        - Rule scoped to a list of integers: {"rule": "self.values.all(value, value >= 0 && value < 100)"}
        - Rule scoped to a string value: {"rule": "self.startsWith('kube')"}


        Unknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL
        expressions. This includes:
        - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields.
        - Object properties where the property schema is of an "unknown type". An "unknown type" is recursively defined as:
          - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
          - An array where the items schema is of an "unknown type"
          - An object where the additionalProperties schema is of an "unknown type"


        Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
        Accessible property names are escaped according to the following rules when accessed in the expression:
        - '__' escapes to '__underscores__'
        - '.' escapes to '__dot__'
        - '-' escapes to '__dash__'
        - '/' escapes to '__slash__'
        - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
        	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
        	  "import", "let", "loop", "package", "namespace", "return".
        Examples:
          - Rule accessing a property named "namespace": {"rule": "self.__namespace__ > 0"}
          - Rule accessing a property named "x-prop": {"rule": "self.x__dash__prop > 0"}
          - Rule accessing a property named "redact__d": {"rule": "self.redact__underscores__d > 0"}


        If `rule` makes use of the `oldSelf` variable it is implicitly a
        `transition rule`.


        By default, the `oldSelf` variable is the same type as `self`.


        Transition rules by default are applied only on UPDATE requests and are
        skipped if an old value could not be found.
    """


    fieldPath?: str

    message?: str

    messageExpression?: str

    reason?: "FieldValueInvalid" | "FieldValueForbidden" | "FieldValueRequired" | "FieldValueDuplicate" = "FieldValueInvalid"

    $rule: str


schema ClusterxK8sIoV1beta1ClusterClassSpecVariablesItems0SchemaOpenAPIV3SchemaXMetadata:
    r"""
    XMetadata is the metadata of a variable or a nested field within a variable.
    It can be used to add additional data for higher level tools.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map that can be used to store and
        retrieve arbitrary metadata.
        They are not queryable.
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) variables.
    """


    annotations?: {str:str}

    labels?: {str:str}


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkers:
    r"""
    Workers describes the worker nodes for the cluster.
    It is a collection of node types which can be used to create
    the worker nodes of the cluster.

    Attributes
    ----------
    machineDeployments : [ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0], default is Undefined, optional
        MachineDeployments is a list of machine deployment classes that can be used to create
        a set of worker nodes.
    machinePools : [ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0], default is Undefined, optional
        MachinePools is a list of machine pool classes that can be used to create
        a set of worker nodes.
    """


    machineDeployments?: [ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0]

    machinePools?: [ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0]


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0:
    r"""
    MachineDeploymentClass serves as a template to define a set of worker nodes of the cluster
    provisioned using the `ClusterClass`.

    Attributes
    ----------
    class : str, default is Undefined, required
        Class denotes a type of worker node present in the cluster,
        this name MUST be unique within a ClusterClass and can be referenced
        in the Cluster to create a managed MachineDeployment.
    failureDomain : str, default is Undefined, optional
        FailureDomain is the failure domain the machines will be created in.
        Must match a key in the FailureDomains map stored on the cluster object.
        NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
    machineHealthCheck : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0MachineHealthCheck, default is Undefined, optional
        machine health check
    minReadySeconds : int, default is Undefined, optional
        Minimum number of seconds for which a newly created machine should
        be ready.
        Defaults to 0 (machine will be considered available as soon as it
        is ready)
        NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
    namingStrategy : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0NamingStrategy, default is Undefined, optional
        naming strategy
    nodeDeletionTimeout : str, default is Undefined, optional
        NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine
        hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely.
        Defaults to 10 seconds.
        NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
    nodeDrainTimeout : str, default is Undefined, optional
        NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.
        The default value is 0, meaning that the node can be drained without any time limitations.
        NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
        NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
    nodeVolumeDetachTimeout : str, default is Undefined, optional
        NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes
        to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
        NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
    strategy : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0Strategy, default is Undefined, optional
        strategy
    template : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0Template, default is Undefined, required
        template
    """


    class: str

    failureDomain?: str

    machineHealthCheck?: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0MachineHealthCheck

    minReadySeconds?: int

    namingStrategy?: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0NamingStrategy

    nodeDeletionTimeout?: str

    nodeDrainTimeout?: str

    nodeVolumeDetachTimeout?: str

    strategy?: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0Strategy

    template: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0Template


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0MachineHealthCheck:
    r"""
    MachineHealthCheck defines a MachineHealthCheck for this MachineDeploymentClass.

    Attributes
    ----------
    maxUnhealthy : int | str, default is Undefined, optional
        Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by
        "selector" are not healthy.
    nodeStartupTimeout : str, default is Undefined, optional
        NodeStartupTimeout allows to set the maximum time for MachineHealthCheck
        to consider a Machine unhealthy if a corresponding Node isn't associated
        through a `Spec.ProviderID` field.


        The duration set in this field is compared to the greatest of:
        - Cluster's infrastructure ready condition timestamp (if and when available)
        - Control Plane's initialized condition timestamp (if and when available)
        - Machine's infrastructure ready condition timestamp (if and when available)
        - Machine's metadata creation timestamp


        Defaults to 10 minutes.
        If you wish to disable this feature, set the value explicitly to 0.
    remediationTemplate : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0MachineHealthCheckRemediationTemplate, default is Undefined, optional
        remediation template
    unhealthyConditions : [ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0MachineHealthCheckUnhealthyConditionsItems0], default is Undefined, optional
        UnhealthyConditions contains a list of the conditions that determine
        whether a node is considered unhealthy. The conditions are combined in a
        logical OR, i.e. if any of the conditions is met, the node is unhealthy.
    unhealthyRange : str, default is Undefined, optional
        Any further remediation is only allowed if the number of machines selected by "selector" as not healthy
        is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy.
        Eg. "[3-5]" - This means that remediation will be allowed only when:
        (a) there are at least 3 unhealthy machines (and)
        (b) there are at most 5 unhealthy machines
    """


    maxUnhealthy?: int | str

    nodeStartupTimeout?: str

    remediationTemplate?: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0MachineHealthCheckRemediationTemplate

    unhealthyConditions?: [ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0MachineHealthCheckUnhealthyConditionsItems0]

    unhealthyRange?: str


    check:
        _regex_match(str(unhealthyRange), r"^\[[0-9]+-[0-9]+\]$") if unhealthyRange


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0MachineHealthCheckRemediationTemplate:
    r"""
    RemediationTemplate is a reference to a remediation template
    provided by an infrastructure provider.


    This field is completely optional, when filled, the MachineHealthCheck controller
    creates a new object from the template referenced and hands off remediation of the machine to
    a controller that lives outside of Cluster API.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0MachineHealthCheckUnhealthyConditionsItems0:
    r"""
    UnhealthyCondition represents a Node condition type and value with a timeout
    specified as a duration.  When the named condition has been in the given
    status for at least the timeout value, a node is considered unhealthy.

    Attributes
    ----------
    status : str, default is Undefined, required
        status
    timeout : str, default is Undefined, required
        timeout
    $type : str, default is Undefined, required
        type
    """


    status: str

    timeout: str

    $type: str


    check:
        len(status) >= 1
        len($type) >= 1


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0NamingStrategy:
    r"""
    NamingStrategy allows changing the naming pattern used when creating the MachineDeployment.

    Attributes
    ----------
    template : str, default is Undefined, optional
        Template defines the template to use for generating the name of the MachineDeployment object.
        If not defined, it will fallback to `{{ .cluster.name }}-{{ .machineDeployment.topologyName }}-{{ .random }}`.
        If the templated string exceeds 63 characters, it will be trimmed to 58 characters and will
        get concatenated with a random suffix of length 5.
        The templating mechanism provides the following arguments:
        * `.cluster.name`: The name of the cluster object.
        * `.random`: A random alphanumeric string, without vowels, of length 5.
        * `.machineDeployment.topologyName`: The name of the MachineDeployment topology (Cluster.spec.topology.workers.machineDeployments[].name).
    """


    template?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0Strategy:
    r"""
    The deployment strategy to use to replace existing machines with
    new ones.
    NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.

    Attributes
    ----------
    remediation : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0StrategyRemediation, default is Undefined, optional
        remediation
    rollingUpdate : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0StrategyRollingUpdate, default is Undefined, optional
        rolling update
    $type : str, default is Undefined, optional
        Type of deployment. Allowed values are RollingUpdate and OnDelete.
        The default is RollingUpdate.
    """


    remediation?: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0StrategyRemediation

    rollingUpdate?: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0StrategyRollingUpdate

    $type?: "RollingUpdate" | "OnDelete"


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0StrategyRemediation:
    r"""
    Remediation controls the strategy of remediating unhealthy machines
    and how remediating operations should occur during the lifecycle of the dependant MachineSets.

    Attributes
    ----------
    maxInFlight : int | str, default is Undefined, optional
        MaxInFlight determines how many in flight remediations should happen at the same time.


        Remediation only happens on the MachineSet with the most current revision, while
        older MachineSets (usually present during rollout operations) aren't allowed to remediate.


        Note: In general (independent of remediations), unhealthy machines are always
        prioritized during scale down operations over healthy ones.


        MaxInFlight can be set to a fixed number or a percentage.
        Example: when this is set to 20%, the MachineSet controller deletes at most 20% of
        the desired replicas.


        If not set, remediation is limited to all machines (bounded by replicas)
        under the active MachineSet's management.
    """


    maxInFlight?: int | str


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0StrategyRollingUpdate:
    r"""
    Rolling update config params. Present only if
    MachineDeploymentStrategyType = RollingUpdate.

    Attributes
    ----------
    deletePolicy : str, default is Undefined, optional
        DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling.
        Valid values are "Random, "Newest", "Oldest"
        When no value is supplied, the default DeletePolicy of MachineSet is used
    maxSurge : int | str, default is Undefined, optional
        The maximum number of machines that can be scheduled above the
        desired number of machines.
        Value can be an absolute number (ex: 5) or a percentage of
        desired machines (ex: 10%).
        This can not be 0 if MaxUnavailable is 0.
        Absolute number is calculated from percentage by rounding up.
        Defaults to 1.
        Example: when this is set to 30%, the new MachineSet can be scaled
        up immediately when the rolling update starts, such that the total
        number of old and new machines do not exceed 130% of desired
        machines. Once old machines have been killed, new MachineSet can
        be scaled up further, ensuring that total number of machines running
        at any time during the update is at most 130% of desired machines.
    maxUnavailable : int | str, default is Undefined, optional
        The maximum number of machines that can be unavailable during the update.
        Value can be an absolute number (ex: 5) or a percentage of desired
        machines (ex: 10%).
        Absolute number is calculated from percentage by rounding down.
        This can not be 0 if MaxSurge is 0.
        Defaults to 0.
        Example: when this is set to 30%, the old MachineSet can be scaled
        down to 70% of desired machines immediately when the rolling update
        starts. Once new machines are ready, old MachineSet can be scaled
        down further, followed by scaling up the new MachineSet, ensuring
        that the total number of machines available at all times
        during the update is at least 70% of desired machines.
    """


    deletePolicy?: "Random" | "Newest" | "Oldest"

    maxSurge?: int | str

    maxUnavailable?: int | str


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0Template:
    r"""
    Template is a local struct containing a collection of templates for creation of
    MachineDeployment objects representing a set of worker nodes.

    Attributes
    ----------
    bootstrap : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateBootstrap, default is Undefined, required
        bootstrap
    infrastructure : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateInfrastructure, default is Undefined, required
        infrastructure
    metadata : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateMetadata, default is Undefined, optional
        metadata
    """


    bootstrap: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateBootstrap

    infrastructure: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateInfrastructure

    metadata?: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateMetadata


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateBootstrap:
    r"""
    Bootstrap contains the bootstrap template reference to be used
    for the creation of worker Machines.

    Attributes
    ----------
    ref : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateBootstrapRef, default is Undefined, required
        ref
    """


    ref: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateBootstrapRef


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateBootstrapRef:
    r"""
    Ref is a required reference to a custom resource
    offered by a provider.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateInfrastructure:
    r"""
    Infrastructure contains the infrastructure template reference to be used
    for the creation of worker Machines.

    Attributes
    ----------
    ref : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateInfrastructureRef, default is Undefined, required
        ref
    """


    ref: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateInfrastructureRef


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateInfrastructureRef:
    r"""
    Ref is a required reference to a custom resource
    offered by a provider.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachineDeploymentsItems0TemplateMetadata:
    r"""
    Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment.
    At runtime this metadata is merged with the corresponding metadata from the topology.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: http://kubernetes.io/docs/user-guide/labels
    """


    annotations?: {str:str}

    labels?: {str:str}


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0:
    r"""
    MachinePoolClass serves as a template to define a pool of worker nodes of the cluster
    provisioned using `ClusterClass`.

    Attributes
    ----------
    class : str, default is Undefined, required
        Class denotes a type of machine pool present in the cluster,
        this name MUST be unique within a ClusterClass and can be referenced
        in the Cluster to create a managed MachinePool.
    failureDomains : [str], default is Undefined, optional
        FailureDomains is the list of failure domains the MachinePool should be attached to.
        Must match a key in the FailureDomains map stored on the cluster object.
        NOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass.
    minReadySeconds : int, default is Undefined, optional
        Minimum number of seconds for which a newly created machine pool should
        be ready.
        Defaults to 0 (machine will be considered available as soon as it
        is ready)
        NOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass.
    namingStrategy : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0NamingStrategy, default is Undefined, optional
        naming strategy
    nodeDeletionTimeout : str, default is Undefined, optional
        NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine
        hosts after the Machine Pool is marked for deletion. A duration of 0 will retry deletion indefinitely.
        Defaults to 10 seconds.
        NOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass.
    nodeDrainTimeout : str, default is Undefined, optional
        NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.
        The default value is 0, meaning that the node can be drained without any time limitations.
        NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
        NOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass.
    nodeVolumeDetachTimeout : str, default is Undefined, optional
        NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes
        to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
        NOTE: This value can be overridden while defining a Cluster.Topology using this MachinePoolClass.
    template : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0Template, default is Undefined, required
        template
    """


    class: str

    failureDomains?: [str]

    minReadySeconds?: int

    namingStrategy?: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0NamingStrategy

    nodeDeletionTimeout?: str

    nodeDrainTimeout?: str

    nodeVolumeDetachTimeout?: str

    template: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0Template


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0NamingStrategy:
    r"""
    NamingStrategy allows changing the naming pattern used when creating the MachinePool.

    Attributes
    ----------
    template : str, default is Undefined, optional
        Template defines the template to use for generating the name of the MachinePool object.
        If not defined, it will fallback to `{{ .cluster.name }}-{{ .machinePool.topologyName }}-{{ .random }}`.
        If the templated string exceeds 63 characters, it will be trimmed to 58 characters and will
        get concatenated with a random suffix of length 5.
        The templating mechanism provides the following arguments:
        * `.cluster.name`: The name of the cluster object.
        * `.random`: A random alphanumeric string, without vowels, of length 5.
        * `.machinePool.topologyName`: The name of the MachinePool topology (Cluster.spec.topology.workers.machinePools[].name).
    """


    template?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0Template:
    r"""
    Template is a local struct containing a collection of templates for creation of
    MachinePools objects representing a pool of worker nodes.

    Attributes
    ----------
    bootstrap : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateBootstrap, default is Undefined, required
        bootstrap
    infrastructure : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateInfrastructure, default is Undefined, required
        infrastructure
    metadata : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateMetadata, default is Undefined, optional
        metadata
    """


    bootstrap: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateBootstrap

    infrastructure: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateInfrastructure

    metadata?: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateMetadata


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateBootstrap:
    r"""
    Bootstrap contains the bootstrap template reference to be used
    for the creation of the Machines in the MachinePool.

    Attributes
    ----------
    ref : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateBootstrapRef, default is Undefined, required
        ref
    """


    ref: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateBootstrapRef


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateBootstrapRef:
    r"""
    Ref is a required reference to a custom resource
    offered by a provider.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateInfrastructure:
    r"""
    Infrastructure contains the infrastructure template reference to be used
    for the creation of the MachinePool.

    Attributes
    ----------
    ref : ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateInfrastructureRef, default is Undefined, required
        ref
    """


    ref: ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateInfrastructureRef


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateInfrastructureRef:
    r"""
    Ref is a required reference to a custom resource
    offered by a provider.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    fieldPath : str, default is Undefined, optional
        If referring to a piece of an object instead of an entire object, this string
        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
        For example, if the object reference is to a container within a pod, this would take on a value like:
        "spec.containers{name}" (where "name" refers to the name of the container that triggered
        the event) or if no container name is specified "spec.containers[2]" (container with
        index 2 in this pod). This syntax is chosen only to have some well-defined way of
        referencing a part of an object.
        TODO: this design is not final and this field is subject to change in the future.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resourceVersion : str, default is Undefined, optional
        Specific resourceVersion to which this reference is made, if any.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    uid : str, default is Undefined, optional
        UID of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """


    apiVersion?: str

    fieldPath?: str

    kind?: str

    name?: str

    namespace?: str

    resourceVersion?: str

    uid?: str


schema ClusterxK8sIoV1beta1ClusterClassSpecWorkersMachinePoolsItems0TemplateMetadata:
    r"""
    Metadata is the metadata applied to the MachinePool.
    At runtime this metadata is merged with the corresponding metadata from the topology.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: http://kubernetes.io/docs/user-guide/labels
    """


    annotations?: {str:str}

    labels?: {str:str}


schema ClusterxK8sIoV1beta1ClusterClassStatus:
    r"""
    ClusterClassStatus defines the observed state of the ClusterClass.

    Attributes
    ----------
    conditions : [ClusterxK8sIoV1beta1ClusterClassStatusConditionsItems0], default is Undefined, optional
        Conditions defines current observed state of the ClusterClass.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest generation observed by the controller.
    variables : [ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0], default is Undefined, optional
        Variables is a list of ClusterClassStatusVariable that are defined for the ClusterClass.
    """


    conditions?: [ClusterxK8sIoV1beta1ClusterClassStatusConditionsItems0]

    observedGeneration?: int

    variables?: [ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0]


schema ClusterxK8sIoV1beta1ClusterClassStatusConditionsItems0:
    r"""
    Condition defines an observation of a Cluster API resource operational state.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        Last time the condition transitioned from one status to another.
        This should be when the underlying condition changed. If that is not known, then using the time when
        the API field changed is acceptable.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
        This field may be empty.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition in CamelCase.
        The specific API may choose whether or not this field is considered a guaranteed API.
        This field may not be empty.
    severity : str, default is Undefined, optional
        Severity provides an explicit classification of Reason code, so the users or machines can immediately
        understand the current situation and act accordingly.
        The Severity field MUST be set only when Status=False.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition in CamelCase or in foo.example.com/CamelCase.
        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions
        can be useful (see .node.status.conditions), the ability to deconflict is important.
    """


    lastTransitionTime: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


schema ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0:
    r"""
    ClusterClassStatusVariable defines a variable which appears in the status of a ClusterClass.

    Attributes
    ----------
    definitions : [ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0], default is Undefined, required
        Definitions is a list of definitions for a variable.
    definitionsConflict : bool, default is Undefined, optional
        DefinitionsConflict specifies whether or not there are conflicting definitions for a single variable name.
    name : str, default is Undefined, required
        Name is the name of the variable.
    """


    definitions: [ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0]

    definitionsConflict?: bool

    name: str


schema ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0:
    r"""
    ClusterClassStatusVariableDefinition defines a variable which appears in the status of a ClusterClass.

    Attributes
    ----------
    from : str, default is Undefined, required
        From specifies the origin of the variable definition.
        This will be `inline` for variables defined in the ClusterClass or the name of a patch defined in the ClusterClass
        for variables discovered from a DiscoverVariables runtime extensions.
    metadata : ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0Metadata, default is Undefined, optional
        metadata
    required : bool, default is Undefined, required
        Required specifies if the variable is required.
        Note: this applies to the variable as a whole and thus the
        top-level object defined in the schema. If nested fields are
        required, this will be specified inside the schema.
    $schema : ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0Schema, default is Undefined, required
        schema
    """


    from: str

    metadata?: ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0Metadata

    required: bool

    $schema: ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0Schema


schema ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0Metadata:
    r"""
    Metadata is the metadata of a variable.
    It can be used to add additional data for higher level tools to
    a ClusterClassVariable.


    Deprecated: This field is deprecated and is going to be removed in the next apiVersion.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map that can be used to store and
        retrieve arbitrary metadata.
        They are not queryable.
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) variables.
    """


    annotations?: {str:str}

    labels?: {str:str}


schema ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0Schema:
    r"""
    Schema defines the schema of the variable.

    Attributes
    ----------
    openAPIV3Schema : ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0SchemaOpenAPIV3Schema, default is Undefined, required
        open API v3 schema
    """


    openAPIV3Schema: ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0SchemaOpenAPIV3Schema


schema ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0SchemaOpenAPIV3Schema:
    r"""
    OpenAPIV3Schema defines the schema of a variable via OpenAPI v3
    schema. The schema is a subset of the schema used in
    Kubernetes CRDs.

    Attributes
    ----------
    additionalProperties : any, default is Undefined, optional
        AdditionalProperties specifies the schema of values in a map (keys are always strings).
        NOTE: Can only be set if type is object.
        NOTE: AdditionalProperties is mutually exclusive with Properties.
        NOTE: This field uses PreserveUnknownFields and Schemaless,
        because recursive validation is not possible.
    default : any, default is Undefined, optional
        Default is the default value of the variable.
        NOTE: Can be set for all types.
    description : str, default is Undefined, optional
        Description is a human-readable description of this variable.
    enum : [any], default is Undefined, optional
        Enum is the list of valid values of the variable.
        NOTE: Can be set for all types.
    example : any, default is Undefined, optional
        Example is an example for this variable.
    exclusiveMaximum : bool, default is Undefined, optional
        ExclusiveMaximum specifies if the Maximum is exclusive.
        NOTE: Can only be set if type is integer or number.
    exclusiveMinimum : bool, default is Undefined, optional
        ExclusiveMinimum specifies if the Minimum is exclusive.
        NOTE: Can only be set if type is integer or number.
    format : str, default is Undefined, optional
        Format is an OpenAPI v3 format string. Unknown formats are ignored.
        For a list of supported formats please see: (of the k8s.io/apiextensions-apiserver version we're currently using)
        https://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go
        NOTE: Can only be set if type is string.
    items : any, default is Undefined, optional
        Items specifies fields of an array.
        NOTE: Can only be set if type is array.
        NOTE: This field uses PreserveUnknownFields and Schemaless,
        because recursive validation is not possible.
    maxItems : int, default is Undefined, optional
        MaxItems is the max length of an array variable.
        NOTE: Can only be set if type is array.
    maxLength : int, default is Undefined, optional
        MaxLength is the max length of a string variable.
        NOTE: Can only be set if type is string.
    maxProperties : int, default is Undefined, optional
        MaxProperties is the maximum amount of entries in a map or properties in an object.
        NOTE: Can only be set if type is object.
    maximum : int, default is Undefined, optional
        Maximum is the maximum of an integer or number variable.
        If ExclusiveMaximum is false, the variable is valid if it is lower than, or equal to, the value of Maximum.
        If ExclusiveMaximum is true, the variable is valid if it is strictly lower than the value of Maximum.
        NOTE: Can only be set if type is integer or number.
    minItems : int, default is Undefined, optional
        MinItems is the min length of an array variable.
        NOTE: Can only be set if type is array.
    minLength : int, default is Undefined, optional
        MinLength is the min length of a string variable.
        NOTE: Can only be set if type is string.
    minProperties : int, default is Undefined, optional
        MinProperties is the minimum amount of entries in a map or properties in an object.
        NOTE: Can only be set if type is object.
    minimum : int, default is Undefined, optional
        Minimum is the minimum of an integer or number variable.
        If ExclusiveMinimum is false, the variable is valid if it is greater than, or equal to, the value of Minimum.
        If ExclusiveMinimum is true, the variable is valid if it is strictly greater than the value of Minimum.
        NOTE: Can only be set if type is integer or number.
    pattern : str, default is Undefined, optional
        Pattern is the regex which a string variable must match.
        NOTE: Can only be set if type is string.
    properties : any, default is Undefined, optional
        Properties specifies fields of an object.
        NOTE: Can only be set if type is object.
        NOTE: Properties is mutually exclusive with AdditionalProperties.
        NOTE: This field uses PreserveUnknownFields and Schemaless,
        because recursive validation is not possible.
    required : [str], default is Undefined, optional
        Required specifies which fields of an object are required.
        NOTE: Can only be set if type is object.
    $type : str, default is Undefined, required
        Type is the type of the variable.
        Valid values are: object, array, string, integer, number or boolean.
    uniqueItems : bool, default is Undefined, optional
        UniqueItems specifies if items in an array must be unique.
        NOTE: Can only be set if type is array.
    "x-kubernetes-preserve-unknown-fields" : bool, default is Undefined, optional
        XPreserveUnknownFields allows setting fields in a variable object
        which are not defined in the variable schema. This affects fields recursively,
        except if nested properties or additionalProperties are specified in the schema.
    "x-kubernetes-validations" : [ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0SchemaOpenAPIV3SchemaXKubernetesValidationsItems0], default is Undefined, optional
        XValidations describes a list of validation rules written in the CEL expression language.
    "x-metadata" : ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0SchemaOpenAPIV3SchemaXMetadata, default is Undefined, optional
        x metadata
    """


    additionalProperties?: any

    default?: any

    description?: str

    enum?: [any]

    example?: any

    exclusiveMaximum?: bool

    exclusiveMinimum?: bool

    format?: str

    items?: any

    maxItems?: int

    maxLength?: int

    maxProperties?: int

    maximum?: int

    minItems?: int

    minLength?: int

    minProperties?: int

    minimum?: int

    pattern?: str

    properties?: any

    required?: [str]

    $type: str

    uniqueItems?: bool

    "x-kubernetes-preserve-unknown-fields"?: bool

    "x-kubernetes-validations"?: [ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0SchemaOpenAPIV3SchemaXKubernetesValidationsItems0]

    "x-metadata"?: ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0SchemaOpenAPIV3SchemaXMetadata


schema ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0SchemaOpenAPIV3SchemaXKubernetesValidationsItems0:
    r"""
    ValidationRule describes a validation rule written in the CEL expression language.

    Attributes
    ----------
    fieldPath : str, default is Undefined, optional
        FieldPath represents the field path returned when the validation fails.
        It must be a relative JSON path (i.e. with array notation) scoped to the location of this x-kubernetes-validations extension in the schema and refer to an existing field.
        e.g. when validation checks if a specific attribute `foo` under a map `testMap`, the fieldPath could be set to `.testMap.foo`
        If the validation checks two lists must have unique attributes, the fieldPath could be set to either of the list: e.g. `.testList`
        It does not support list numeric index.
        It supports child operation to refer to an existing field currently. Refer to [JSONPath support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/) for more info.
        Numeric index of array is not supported.
        For field name which contains special characters, use `['specialName']` to refer the field name.
        e.g. for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set to `.testList['foo.34$']`
    message : str, default is Undefined, optional
        Message represents the message displayed when validation fails. The message is required if the Rule contains
        line breaks. The message must not contain line breaks.
        If unset, the message is "failed rule: {Rule}".
        e.g. "must be a URL with the host matching spec.host"
    messageExpression : str, default is Undefined, optional
        MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails.
        Since messageExpression is used as a failure message, it must evaluate to a string.
        If both message and messageExpression are present on a rule, then messageExpression will be used if validation
        fails. If messageExpression results in a runtime error, the validation failure message is produced
        as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string
        that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset.
        messageExpression has access to all the same variables as the rule; the only difference is the return type.
        Example:
        "x must be less than max ("+string(self.max)+")"
    reason : str, default is "FieldValueInvalid", optional
        Reason provides a machine-readable validation failure reason that is returned to the caller when a request fails this validation rule.
        The currently supported reasons are: "FieldValueInvalid", "FieldValueForbidden", "FieldValueRequired", "FieldValueDuplicate".
        If not set, default to use "FieldValueInvalid".
        All future added reasons must be accepted by clients when reading this value and unknown reasons should be treated as FieldValueInvalid.
    $rule : str, default is Undefined, required
        Rule represents the expression which will be evaluated by CEL.
        ref: https://github.com/google/cel-spec
        The Rule is scoped to the location of the x-kubernetes-validations extension in the schema.
        The `self` variable in the CEL expression is bound to the scoped value.
        If the Rule is scoped to an object with properties, the accessible properties of the object are field selectable
        via `self.field` and field presence can be checked via `has(self.field)`.
        If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map
        are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map
        are accessible via CEL macros and functions such as `self.all(...)`.
        If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and
        functions.
        If the Rule is scoped to a scalar, `self` is bound to the scalar value.
        Examples:
        - Rule scoped to a map of objects: {"rule": "self.components['Widget'].priority < 10"}
        - Rule scoped to a list of integers: {"rule": "self.values.all(value, value >= 0 && value < 100)"}
        - Rule scoped to a string value: {"rule": "self.startsWith('kube')"}


        Unknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL
        expressions. This includes:
        - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields.
        - Object properties where the property schema is of an "unknown type". An "unknown type" is recursively defined as:
          - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
          - An array where the items schema is of an "unknown type"
          - An object where the additionalProperties schema is of an "unknown type"


        Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
        Accessible property names are escaped according to the following rules when accessed in the expression:
        - '__' escapes to '__underscores__'
        - '.' escapes to '__dot__'
        - '-' escapes to '__dash__'
        - '/' escapes to '__slash__'
        - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:
        	  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",
        	  "import", "let", "loop", "package", "namespace", "return".
        Examples:
          - Rule accessing a property named "namespace": {"rule": "self.__namespace__ > 0"}
          - Rule accessing a property named "x-prop": {"rule": "self.x__dash__prop > 0"}
          - Rule accessing a property named "redact__d": {"rule": "self.redact__underscores__d > 0"}


        If `rule` makes use of the `oldSelf` variable it is implicitly a
        `transition rule`.


        By default, the `oldSelf` variable is the same type as `self`.


        Transition rules by default are applied only on UPDATE requests and are
        skipped if an old value could not be found.
    """


    fieldPath?: str

    message?: str

    messageExpression?: str

    reason?: "FieldValueInvalid" | "FieldValueForbidden" | "FieldValueRequired" | "FieldValueDuplicate" = "FieldValueInvalid"

    $rule: str


schema ClusterxK8sIoV1beta1ClusterClassStatusVariablesItems0DefinitionsItems0SchemaOpenAPIV3SchemaXMetadata:
    r"""
    XMetadata is the metadata of a variable or a nested field within a variable.
    It can be used to add additional data for higher level tools.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map that can be used to store and
        retrieve arbitrary metadata.
        They are not queryable.
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) variables.
    """


    annotations?: {str:str}

    labels?: {str:str}


