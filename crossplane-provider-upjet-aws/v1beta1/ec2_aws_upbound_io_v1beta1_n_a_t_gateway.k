"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema NATGateway:
    r"""
    NATGateway is the Schema for the NATGateways API. Provides a resource to create a VPC NAT Gateway.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "NATGateway", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1NATGatewaySpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1NATGatewayStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "NATGateway" = "NATGateway"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1NATGatewaySpec

    status?: Ec2AwsUpboundIoV1beta1NATGatewayStatus


schema Ec2AwsUpboundIoV1beta1NATGatewaySpec:
    r"""
    NATGatewaySpec defines the desired state of NATGateway

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1NATGatewaySpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1NATGatewaySpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1NATGatewaySpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1NATGatewaySpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 n a t gateway spec for provider

    Attributes
    ----------
    allocationId : str, default is Undefined, optional
        The Allocation ID of the Elastic IP address for the NAT Gateway. Required for connectivity_type of public.
    allocationIdRef : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDRef, default is Undefined, optional
        allocation Id ref
    allocationIdSelector : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDSelector, default is Undefined, optional
        allocation Id selector
    connectivityType : str, default is Undefined, optional
        Connectivity type for the NAT Gateway. Valid values are private and public. Defaults to public.
    privateIp : str, default is Undefined, optional
        The private IPv4 address to assign to the NAT Gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    secondaryAllocationIds : [str], default is Undefined, optional
        A list of secondary allocation EIP IDs for this NAT Gateway.
    secondaryAllocationIdsRefs : [Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsRefsItems0], default is Undefined, optional
        References to EIP in ec2 to populate secondaryAllocationIds.
    secondaryAllocationIdsSelector : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsSelector, default is Undefined, optional
        secondary allocation ids selector
    secondaryPrivateIpAddressCount : float, default is Undefined, optional
        [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
    secondaryPrivateIpAddresses : [str], default is Undefined, optional
        A list of secondary private IPv4 addresses to assign to the NAT Gateway.
    subnetId : str, default is Undefined, optional
        The Subnet ID of the subnet in which to place the NAT Gateway.
    subnetIdRef : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDRef, default is Undefined, optional
        subnet Id ref
    subnetIdSelector : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDSelector, default is Undefined, optional
        subnet Id selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    allocationId?: str

    allocationIdRef?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDRef

    allocationIdSelector?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDSelector

    connectivityType?: str

    privateIp?: str

    region: str

    secondaryAllocationIds?: [str]

    secondaryAllocationIdsRefs?: [Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsRefsItems0]

    secondaryAllocationIdsSelector?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsSelector

    secondaryPrivateIpAddressCount?: float

    secondaryPrivateIpAddresses?: [str]

    subnetId?: str

    subnetIdRef?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDRef

    subnetIdSelector?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDSelector

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDRef:
    r"""
    Reference to a EIP in ec2 to populate allocationId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDRefPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDSelector:
    r"""
    Selector for a EIP in ec2 to populate allocationId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderAllocationIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsSelector:
    r"""
    Selector for a list of EIP in ec2 to populate secondaryAllocationIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsSelectorPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSecondaryAllocationIdsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDRef:
    r"""
    Reference to a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDRefPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDSelector:
    r"""
    Selector for a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecForProviderSubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    allocationId : str, default is Undefined, optional
        The Allocation ID of the Elastic IP address for the NAT Gateway. Required for connectivity_type of public.
    allocationIdRef : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDRef, default is Undefined, optional
        allocation Id ref
    allocationIdSelector : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDSelector, default is Undefined, optional
        allocation Id selector
    connectivityType : str, default is Undefined, optional
        Connectivity type for the NAT Gateway. Valid values are private and public. Defaults to public.
    privateIp : str, default is Undefined, optional
        The private IPv4 address to assign to the NAT Gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
    secondaryAllocationIds : [str], default is Undefined, optional
        A list of secondary allocation EIP IDs for this NAT Gateway.
    secondaryAllocationIdsRefs : [Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsRefsItems0], default is Undefined, optional
        References to EIP in ec2 to populate secondaryAllocationIds.
    secondaryAllocationIdsSelector : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsSelector, default is Undefined, optional
        secondary allocation ids selector
    secondaryPrivateIpAddressCount : float, default is Undefined, optional
        [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
    secondaryPrivateIpAddresses : [str], default is Undefined, optional
        A list of secondary private IPv4 addresses to assign to the NAT Gateway.
    subnetId : str, default is Undefined, optional
        The Subnet ID of the subnet in which to place the NAT Gateway.
    subnetIdRef : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDRef, default is Undefined, optional
        subnet Id ref
    subnetIdSelector : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDSelector, default is Undefined, optional
        subnet Id selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    allocationId?: str

    allocationIdRef?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDRef

    allocationIdSelector?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDSelector

    connectivityType?: str

    privateIp?: str

    secondaryAllocationIds?: [str]

    secondaryAllocationIdsRefs?: [Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsRefsItems0]

    secondaryAllocationIdsSelector?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsSelector

    secondaryPrivateIpAddressCount?: float

    secondaryPrivateIpAddresses?: [str]

    subnetId?: str

    subnetIdRef?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDRef

    subnetIdSelector?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDSelector

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDRef:
    r"""
    Reference to a EIP in ec2 to populate allocationId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDRefPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDSelector:
    r"""
    Selector for a EIP in ec2 to populate allocationId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderAllocationIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsSelector:
    r"""
    Selector for a list of EIP in ec2 to populate secondaryAllocationIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsSelectorPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSecondaryAllocationIdsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDRef:
    r"""
    Reference to a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDRefPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDSelector:
    r"""
    Selector for a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecInitProviderSubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1NATGatewaySpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1NATGatewayStatus:
    r"""
    NATGatewayStatus defines the observed state of NATGateway.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1NATGatewayStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1NATGatewayStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1NATGatewayStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1NATGatewayStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1NATGatewayStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 n a t gateway status at provider

    Attributes
    ----------
    allocationId : str, default is Undefined, optional
        The Allocation ID of the Elastic IP address for the NAT Gateway. Required for connectivity_type of public.
    associationId : str, default is Undefined, optional
        The association ID of the Elastic IP address that's associated with the NAT Gateway. Only available when connectivity_type is public.
    connectivityType : str, default is Undefined, optional
        Connectivity type for the NAT Gateway. Valid values are private and public. Defaults to public.
    id : str, default is Undefined, optional
        The ID of the NAT Gateway.
    networkInterfaceId : str, default is Undefined, optional
        The ID of the network interface associated with the NAT Gateway.
    privateIp : str, default is Undefined, optional
        The private IPv4 address to assign to the NAT Gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
    publicIp : str, default is Undefined, optional
        The Elastic IP address associated with the NAT Gateway.
    secondaryAllocationIds : [str], default is Undefined, optional
        A list of secondary allocation EIP IDs for this NAT Gateway.
    secondaryPrivateIpAddressCount : float, default is Undefined, optional
        [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
    secondaryPrivateIpAddresses : [str], default is Undefined, optional
        A list of secondary private IPv4 addresses to assign to the NAT Gateway.
    subnetId : str, default is Undefined, optional
        The Subnet ID of the subnet in which to place the NAT Gateway.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    """


    allocationId?: str

    associationId?: str

    connectivityType?: str

    id?: str

    networkInterfaceId?: str

    privateIp?: str

    publicIp?: str

    secondaryAllocationIds?: [str]

    secondaryPrivateIpAddressCount?: float

    secondaryPrivateIpAddresses?: [str]

    subnetId?: str

    tags?: {str:str}

    tagsAll?: {str:str}


schema Ec2AwsUpboundIoV1beta1NATGatewayStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


