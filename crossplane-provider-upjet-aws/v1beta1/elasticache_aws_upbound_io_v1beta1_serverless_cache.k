"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema ServerlessCache:
    r"""
    ServerlessCache is the Schema for the ServerlessCaches API. Provides an ElastiCache Serverless Cache resource.

    Attributes
    ----------
    apiVersion : str, default is "elasticache.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ServerlessCache", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpec, default is Undefined, required
        spec
    status : ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatus, default is Undefined, optional
        status
    """


    apiVersion: "elasticache.aws.upbound.io/v1beta1" = "elasticache.aws.upbound.io/v1beta1"

    kind: "ServerlessCache" = "ServerlessCache"

    metadata?: v1.ObjectMeta

    spec: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpec

    status?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatus


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpec:
    r"""
    ServerlessCacheSpec defines the desired state of ServerlessCache

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProvider, default is Undefined, required
        for provider
    initProvider : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProvider

    initProvider?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecProviderConfigRef

    publishConnectionDetailsTo?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecWriteConnectionSecretToRef


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProvider:
    r"""
    elasticache aws upbound io v1beta1 serverless cache spec for provider

    Attributes
    ----------
    cacheUsageLimits : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderCacheUsageLimitsItems0], default is Undefined, optional
        Sets the cache usage limits for storage and ElastiCache Processing Units for the cache. See cache_usage_limits Block for details.
    dailySnapshotTime : str, default is Undefined, optional
        The daily time that snapshots will be created from the new serverless cache. Only supported for engine types "redis" or "valkey". Defaults to 0.
    description : str, default is Undefined, optional
        User-provided description for the serverless cache. The default is NULL.
    engine : str, default is Undefined, optional
        –  Name of the cache engine to be used for this cache cluster. Valid values are memcached, redis or valkey.
    kmsKeyId : str, default is Undefined, optional
        ARN of the customer managed key for encrypting the data at rest. If no KMS key is provided, a default service key is used.
    kmsKeyIdRef : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDRef, default is Undefined, optional
        kms key Id ref
    kmsKeyIdSelector : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDSelector, default is Undefined, optional
        kms key Id selector
    majorEngineVersion : str, default is Undefined, optional
        –  The version of the cache engine that will be used to create the serverless cache.
        See Describe Cache Engine Versions in the AWS Documentation for supported versions.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    securityGroupIdRefs : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroupIds.
    securityGroupIdSelector : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDSelector, default is Undefined, optional
        security group Id selector
    securityGroupIds : [str], default is Undefined, optional
        A list of the one or more VPC security groups to be associated with the serverless cache. The security group will authorize traffic access for the VPC end-point (private-link). If no other information is given this will be the VPC’s Default Security Group that is associated with the cluster VPC end-point.
    snapshotArnsToRestore : [str], default is Undefined, optional
        The list of ARN(s) of the snapshot that the new serverless cache will be created from. Available for Redis only.
    snapshotRetentionLimit : float, default is Undefined, optional
        The number of snapshots that will be retained for the serverless cache that is being created. As new snapshots beyond this limit are added, the oldest snapshots will be deleted on a rolling basis. Available for Redis only.
    subnetIdRefs : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnetIds.
    subnetIdSelector : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDSelector, default is Undefined, optional
        subnet Id selector
    subnetIds : [str], default is Undefined, optional
        –  A list of the identifiers of the subnets where the VPC endpoint for the serverless cache will be deployed. All the subnetIds must belong to the same VPC.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    userGroupId : str, default is Undefined, optional
        The identifier of the UserGroup to be associated with the serverless cache. Available for Redis only. Default is NULL.
    """


    cacheUsageLimits?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderCacheUsageLimitsItems0]

    dailySnapshotTime?: str

    description?: str

    engine?: str

    kmsKeyId?: str

    kmsKeyIdRef?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDRef

    kmsKeyIdSelector?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDSelector

    majorEngineVersion?: str

    region: str

    securityGroupIdRefs?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDRefsItems0]

    securityGroupIdSelector?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDSelector

    securityGroupIds?: [str]

    snapshotArnsToRestore?: [str]

    snapshotRetentionLimit?: float

    subnetIdRefs?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDRefsItems0]

    subnetIdSelector?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDSelector

    subnetIds?: [str]

    tags?: {str:str}

    userGroupId?: str


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderCacheUsageLimitsItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache spec for provider cache usage limits items0

    Attributes
    ----------
    dataStorage : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderCacheUsageLimitsItems0DataStorageItems0], default is Undefined, optional
        The maximum data storage limit in the cache, expressed in Gigabytes. See data_storage Block for details.
    ecpuPerSecond : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderCacheUsageLimitsItems0EcpuPerSecondItems0], default is Undefined, optional
        The configuration for the number of ElastiCache Processing Units (ECPU) the cache can consume per second. See ecpu_per_second Block for details.
    """


    dataStorage?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderCacheUsageLimitsItems0DataStorageItems0]

    ecpuPerSecond?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderCacheUsageLimitsItems0EcpuPerSecondItems0]


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderCacheUsageLimitsItems0DataStorageItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache spec for provider cache usage limits items0 data storage items0

    Attributes
    ----------
    maximum : float, default is Undefined, optional
        The upper limit for data storage the cache is set to use. Must be between 1 and 5,000.
    minimum : float, default is Undefined, optional
        The lower limit for data storage the cache is set to use. Must be between 1 and 5,000.
    unit : str, default is Undefined, optional
        The unit that the storage is measured in, in GB.
    """


    maximum?: float

    minimum?: float

    unit?: str


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderCacheUsageLimitsItems0EcpuPerSecondItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache spec for provider cache usage limits items0 ecpu per second items0

    Attributes
    ----------
    maximum : float, default is Undefined, optional
        The maximum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
    minimum : float, default is Undefined, optional
        The minimum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
    """


    maximum?: float

    minimum?: float


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDRef:
    r"""
    Reference to a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDRefPolicy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDSelector:
    r"""
    Selector for a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDSelectorPolicy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderKmsKeyIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDRefsItems0Policy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDSelectorPolicy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSecurityGroupIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDRefsItems0Policy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnetIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDSelectorPolicy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecForProviderSubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    cacheUsageLimits : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderCacheUsageLimitsItems0], default is Undefined, optional
        Sets the cache usage limits for storage and ElastiCache Processing Units for the cache. See cache_usage_limits Block for details.
    dailySnapshotTime : str, default is Undefined, optional
        The daily time that snapshots will be created from the new serverless cache. Only supported for engine types "redis" or "valkey". Defaults to 0.
    description : str, default is Undefined, optional
        User-provided description for the serverless cache. The default is NULL.
    engine : str, default is Undefined, optional
        –  Name of the cache engine to be used for this cache cluster. Valid values are memcached, redis or valkey.
    kmsKeyId : str, default is Undefined, optional
        ARN of the customer managed key for encrypting the data at rest. If no KMS key is provided, a default service key is used.
    kmsKeyIdRef : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDRef, default is Undefined, optional
        kms key Id ref
    kmsKeyIdSelector : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDSelector, default is Undefined, optional
        kms key Id selector
    majorEngineVersion : str, default is Undefined, optional
        –  The version of the cache engine that will be used to create the serverless cache.
        See Describe Cache Engine Versions in the AWS Documentation for supported versions.
    securityGroupIdRefs : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroupIds.
    securityGroupIdSelector : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDSelector, default is Undefined, optional
        security group Id selector
    securityGroupIds : [str], default is Undefined, optional
        A list of the one or more VPC security groups to be associated with the serverless cache. The security group will authorize traffic access for the VPC end-point (private-link). If no other information is given this will be the VPC’s Default Security Group that is associated with the cluster VPC end-point.
    snapshotArnsToRestore : [str], default is Undefined, optional
        The list of ARN(s) of the snapshot that the new serverless cache will be created from. Available for Redis only.
    snapshotRetentionLimit : float, default is Undefined, optional
        The number of snapshots that will be retained for the serverless cache that is being created. As new snapshots beyond this limit are added, the oldest snapshots will be deleted on a rolling basis. Available for Redis only.
    subnetIdRefs : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnetIds.
    subnetIdSelector : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDSelector, default is Undefined, optional
        subnet Id selector
    subnetIds : [str], default is Undefined, optional
        –  A list of the identifiers of the subnets where the VPC endpoint for the serverless cache will be deployed. All the subnetIds must belong to the same VPC.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    userGroupId : str, default is Undefined, optional
        The identifier of the UserGroup to be associated with the serverless cache. Available for Redis only. Default is NULL.
    """


    cacheUsageLimits?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderCacheUsageLimitsItems0]

    dailySnapshotTime?: str

    description?: str

    engine?: str

    kmsKeyId?: str

    kmsKeyIdRef?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDRef

    kmsKeyIdSelector?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDSelector

    majorEngineVersion?: str

    securityGroupIdRefs?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDRefsItems0]

    securityGroupIdSelector?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDSelector

    securityGroupIds?: [str]

    snapshotArnsToRestore?: [str]

    snapshotRetentionLimit?: float

    subnetIdRefs?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDRefsItems0]

    subnetIdSelector?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDSelector

    subnetIds?: [str]

    tags?: {str:str}

    userGroupId?: str


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderCacheUsageLimitsItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache spec init provider cache usage limits items0

    Attributes
    ----------
    dataStorage : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderCacheUsageLimitsItems0DataStorageItems0], default is Undefined, optional
        The maximum data storage limit in the cache, expressed in Gigabytes. See data_storage Block for details.
    ecpuPerSecond : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderCacheUsageLimitsItems0EcpuPerSecondItems0], default is Undefined, optional
        The configuration for the number of ElastiCache Processing Units (ECPU) the cache can consume per second. See ecpu_per_second Block for details.
    """


    dataStorage?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderCacheUsageLimitsItems0DataStorageItems0]

    ecpuPerSecond?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderCacheUsageLimitsItems0EcpuPerSecondItems0]


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderCacheUsageLimitsItems0DataStorageItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache spec init provider cache usage limits items0 data storage items0

    Attributes
    ----------
    maximum : float, default is Undefined, optional
        The upper limit for data storage the cache is set to use. Must be between 1 and 5,000.
    minimum : float, default is Undefined, optional
        The lower limit for data storage the cache is set to use. Must be between 1 and 5,000.
    unit : str, default is Undefined, optional
        The unit that the storage is measured in, in GB.
    """


    maximum?: float

    minimum?: float

    unit?: str


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderCacheUsageLimitsItems0EcpuPerSecondItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache spec init provider cache usage limits items0 ecpu per second items0

    Attributes
    ----------
    maximum : float, default is Undefined, optional
        The maximum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
    minimum : float, default is Undefined, optional
        The minimum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
    """


    maximum?: float

    minimum?: float


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDRef:
    r"""
    Reference to a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDRefPolicy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDSelector:
    r"""
    Selector for a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDSelectorPolicy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderKmsKeyIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDRefsItems0Policy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDSelectorPolicy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSecurityGroupIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDRefsItems0Policy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnetIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDSelectorPolicy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecInitProviderSubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecProviderConfigRefPolicy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsToConfigRef

    metadata?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsToMetadata

    name: str


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsToConfigRefPolicy


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatus:
    r"""
    ServerlessCacheStatus defines the observed state of ServerlessCache.

    Attributes
    ----------
    atProvider : ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProvider

    conditions?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusConditionsItems0]

    observedGeneration?: int


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProvider:
    r"""
    elasticache aws upbound io v1beta1 serverless cache status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the serverless cache.
    cacheUsageLimits : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderCacheUsageLimitsItems0], default is Undefined, optional
        Sets the cache usage limits for storage and ElastiCache Processing Units for the cache. See cache_usage_limits Block for details.
    createTime : str, default is Undefined, optional
        Timestamp of when the serverless cache was created.
    dailySnapshotTime : str, default is Undefined, optional
        The daily time that snapshots will be created from the new serverless cache. Only supported for engine types "redis" or "valkey". Defaults to 0.
    description : str, default is Undefined, optional
        User-provided description for the serverless cache. The default is NULL.
    endpoint : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderEndpointItems0], default is Undefined, optional
        Represents the information required for client programs to connect to a cache node. See endpoint Block for details.
    engine : str, default is Undefined, optional
        –  Name of the cache engine to be used for this cache cluster. Valid values are memcached, redis or valkey.
    fullEngineVersion : str, default is Undefined, optional
        The name and version number of the engine the serverless cache is compatible with.
    id : str, default is Undefined, optional
        id
    kmsKeyId : str, default is Undefined, optional
        ARN of the customer managed key for encrypting the data at rest. If no KMS key is provided, a default service key is used.
    majorEngineVersion : str, default is Undefined, optional
        –  The version of the cache engine that will be used to create the serverless cache.
        See Describe Cache Engine Versions in the AWS Documentation for supported versions.
    readerEndpoint : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderReaderEndpointItems0], default is Undefined, optional
        Represents the information required for client programs to connect to a cache node. See reader_endpoint Block for details.
    securityGroupIds : [str], default is Undefined, optional
        A list of the one or more VPC security groups to be associated with the serverless cache. The security group will authorize traffic access for the VPC end-point (private-link). If no other information is given this will be the VPC’s Default Security Group that is associated with the cluster VPC end-point.
    snapshotArnsToRestore : [str], default is Undefined, optional
        The list of ARN(s) of the snapshot that the new serverless cache will be created from. Available for Redis only.
    snapshotRetentionLimit : float, default is Undefined, optional
        The number of snapshots that will be retained for the serverless cache that is being created. As new snapshots beyond this limit are added, the oldest snapshots will be deleted on a rolling basis. Available for Redis only.
    status : str, default is Undefined, optional
        The current status of the serverless cache. The allowed values are CREATING, AVAILABLE, DELETING, CREATE-FAILED and MODIFYING.
    subnetIds : [str], default is Undefined, optional
        –  A list of the identifiers of the subnets where the VPC endpoint for the serverless cache will be deployed. All the subnetIds must belong to the same VPC.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        tags all
    userGroupId : str, default is Undefined, optional
        The identifier of the UserGroup to be associated with the serverless cache. Available for Redis only. Default is NULL.
    """


    arn?: str

    cacheUsageLimits?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderCacheUsageLimitsItems0]

    createTime?: str

    dailySnapshotTime?: str

    description?: str

    endpoint?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderEndpointItems0]

    engine?: str

    fullEngineVersion?: str

    id?: str

    kmsKeyId?: str

    majorEngineVersion?: str

    readerEndpoint?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderReaderEndpointItems0]

    securityGroupIds?: [str]

    snapshotArnsToRestore?: [str]

    snapshotRetentionLimit?: float

    status?: str

    subnetIds?: [str]

    tags?: {str:str}

    tagsAll?: {str:str}

    userGroupId?: str


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderCacheUsageLimitsItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache status at provider cache usage limits items0

    Attributes
    ----------
    dataStorage : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderCacheUsageLimitsItems0DataStorageItems0], default is Undefined, optional
        The maximum data storage limit in the cache, expressed in Gigabytes. See data_storage Block for details.
    ecpuPerSecond : [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderCacheUsageLimitsItems0EcpuPerSecondItems0], default is Undefined, optional
        The configuration for the number of ElastiCache Processing Units (ECPU) the cache can consume per second. See ecpu_per_second Block for details.
    """


    dataStorage?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderCacheUsageLimitsItems0DataStorageItems0]

    ecpuPerSecond?: [ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderCacheUsageLimitsItems0EcpuPerSecondItems0]


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderCacheUsageLimitsItems0DataStorageItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache status at provider cache usage limits items0 data storage items0

    Attributes
    ----------
    maximum : float, default is Undefined, optional
        The upper limit for data storage the cache is set to use. Must be between 1 and 5,000.
    minimum : float, default is Undefined, optional
        The lower limit for data storage the cache is set to use. Must be between 1 and 5,000.
    unit : str, default is Undefined, optional
        The unit that the storage is measured in, in GB.
    """


    maximum?: float

    minimum?: float

    unit?: str


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderCacheUsageLimitsItems0EcpuPerSecondItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache status at provider cache usage limits items0 ecpu per second items0

    Attributes
    ----------
    maximum : float, default is Undefined, optional
        The maximum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
    minimum : float, default is Undefined, optional
        The minimum number of ECPUs the cache can consume per second. Must be between 1,000 and 15,000,000.
    """


    maximum?: float

    minimum?: float


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderEndpointItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache status at provider endpoint items0

    Attributes
    ----------
    address : str, default is Undefined, optional
        The DNS hostname of the cache node.
    port : float, default is Undefined, optional
        The port number that the cache engine is listening on. Set as integer.
    """


    address?: str

    port?: float


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusAtProviderReaderEndpointItems0:
    r"""
    elasticache aws upbound io v1beta1 serverless cache status at provider reader endpoint items0

    Attributes
    ----------
    address : str, default is Undefined, optional
        The DNS hostname of the cache node.
    port : float, default is Undefined, optional
        The port number that the cache engine is listening on. Set as integer.
    """


    address?: str

    port?: float


schema ElasticacheAwsUpboundIoV1beta1ServerlessCacheStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


