"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema DefaultSubnet:
    r"""
    DefaultSubnet is the Schema for the DefaultSubnets API. Manage a default subnet resource.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "DefaultSubnet", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1DefaultSubnetSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1DefaultSubnetStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "DefaultSubnet" = "DefaultSubnet"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1DefaultSubnetSpec

    status?: Ec2AwsUpboundIoV1beta1DefaultSubnetStatus


schema Ec2AwsUpboundIoV1beta1DefaultSubnetSpec:
    r"""
    DefaultSubnetSpec defines the desired state of DefaultSubnet

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1DefaultSubnetSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1DefaultSubnetSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1DefaultSubnetSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1DefaultSubnetSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1DefaultSubnetSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1DefaultSubnetSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1DefaultSubnetSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1DefaultSubnetSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1DefaultSubnetSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 default subnet spec for provider

    Attributes
    ----------
    assignIpv6AddressOnCreation : bool, default is Undefined, optional
        assign Ipv6 address on creation
    availabilityZone : str, default is Undefined, optional
        is required
    customerOwnedIpv4Pool : str, default is Undefined, optional
        customer owned Ipv4 pool
    enableDns64 : bool, default is Undefined, optional
        enable dns64
    enableResourceNameDnsARecordOnLaunch : bool, default is Undefined, optional
        enable resource name Dns a record on launch
    enableResourceNameDnsAaaaRecordOnLaunch : bool, default is Undefined, optional
        enable resource name Dns aaaa record on launch
    forceDestroy : bool, default is Undefined, optional
        Whether destroying the resource deletes the default subnet. Default: false
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv4 CIDR block assigned to the subnet
    ipv6Native : bool, default is Undefined, optional
        ipv6 native
    mapCustomerOwnedIpOnLaunch : bool, default is Undefined, optional
        map customer owned Ip on launch
    mapPublicIpOnLaunch : bool, default is Undefined, optional
        is true
    privateDnsHostnameTypeOnLaunch : str, default is Undefined, optional
        private Dns hostname type on launch
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    tags : {str:str}, default is Undefined, optional
        tags
    """


    assignIpv6AddressOnCreation?: bool

    availabilityZone?: str

    customerOwnedIpv4Pool?: str

    enableDns64?: bool

    enableResourceNameDnsARecordOnLaunch?: bool

    enableResourceNameDnsAaaaRecordOnLaunch?: bool

    forceDestroy?: bool

    ipv6CidrBlock?: str

    ipv6Native?: bool

    mapCustomerOwnedIpOnLaunch?: bool

    mapPublicIpOnLaunch?: bool

    privateDnsHostnameTypeOnLaunch?: str

    region: str

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1DefaultSubnetSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    assignIpv6AddressOnCreation : bool, default is Undefined, optional
        assign Ipv6 address on creation
    availabilityZone : str, default is Undefined, optional
        is required
    customerOwnedIpv4Pool : str, default is Undefined, optional
        customer owned Ipv4 pool
    enableDns64 : bool, default is Undefined, optional
        enable dns64
    enableResourceNameDnsARecordOnLaunch : bool, default is Undefined, optional
        enable resource name Dns a record on launch
    enableResourceNameDnsAaaaRecordOnLaunch : bool, default is Undefined, optional
        enable resource name Dns aaaa record on launch
    forceDestroy : bool, default is Undefined, optional
        Whether destroying the resource deletes the default subnet. Default: false
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv4 CIDR block assigned to the subnet
    ipv6Native : bool, default is Undefined, optional
        ipv6 native
    mapCustomerOwnedIpOnLaunch : bool, default is Undefined, optional
        map customer owned Ip on launch
    mapPublicIpOnLaunch : bool, default is Undefined, optional
        is true
    privateDnsHostnameTypeOnLaunch : str, default is Undefined, optional
        private Dns hostname type on launch
    tags : {str:str}, default is Undefined, optional
        tags
    """


    assignIpv6AddressOnCreation?: bool

    availabilityZone?: str

    customerOwnedIpv4Pool?: str

    enableDns64?: bool

    enableResourceNameDnsARecordOnLaunch?: bool

    enableResourceNameDnsAaaaRecordOnLaunch?: bool

    forceDestroy?: bool

    ipv6CidrBlock?: str

    ipv6Native?: bool

    mapCustomerOwnedIpOnLaunch?: bool

    mapPublicIpOnLaunch?: bool

    privateDnsHostnameTypeOnLaunch?: str

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1DefaultSubnetSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1DefaultSubnetSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1DefaultSubnetSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1DefaultSubnetSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1DefaultSubnetSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1DefaultSubnetSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1DefaultSubnetStatus:
    r"""
    DefaultSubnetStatus defines the observed state of DefaultSubnet.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1DefaultSubnetStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1DefaultSubnetStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1DefaultSubnetStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1DefaultSubnetStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1DefaultSubnetStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 default subnet status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        arn
    assignIpv6AddressOnCreation : bool, default is Undefined, optional
        assign Ipv6 address on creation
    availabilityZone : str, default is Undefined, optional
        is required
    availabilityZoneId : str, default is Undefined, optional
        , cidr_block and vpc_id arguments become computed attributes
    cidrBlock : str, default is Undefined, optional
        The IPv4 CIDR block assigned to the subnet
    customerOwnedIpv4Pool : str, default is Undefined, optional
        customer owned Ipv4 pool
    enableDns64 : bool, default is Undefined, optional
        enable dns64
    enableLniAtDeviceIndex : float, default is Undefined, optional
        enable lni at device index
    enableResourceNameDnsARecordOnLaunch : bool, default is Undefined, optional
        enable resource name Dns a record on launch
    enableResourceNameDnsAaaaRecordOnLaunch : bool, default is Undefined, optional
        enable resource name Dns aaaa record on launch
    existingDefaultSubnet : bool, default is Undefined, optional
        existing default subnet
    forceDestroy : bool, default is Undefined, optional
        Whether destroying the resource deletes the default subnet. Default: false
    id : str, default is Undefined, optional
        id
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv4 CIDR block assigned to the subnet
    ipv6CidrBlockAssociationId : str, default is Undefined, optional
        ipv6 cidr block association Id
    ipv6Native : bool, default is Undefined, optional
        ipv6 native
    mapCustomerOwnedIpOnLaunch : bool, default is Undefined, optional
        map customer owned Ip on launch
    mapPublicIpOnLaunch : bool, default is Undefined, optional
        is true
    outpostArn : str, default is Undefined, optional
        outpost arn
    ownerId : str, default is Undefined, optional
        owner Id
    privateDnsHostnameTypeOnLaunch : str, default is Undefined, optional
        private Dns hostname type on launch
    tags : {str:str}, default is Undefined, optional
        tags
    tagsAll : {str:str}, default is Undefined, optional
        tags all
    vpcId : str, default is Undefined, optional
        The ID of the VPC the subnet is in
    """


    arn?: str

    assignIpv6AddressOnCreation?: bool

    availabilityZone?: str

    availabilityZoneId?: str

    cidrBlock?: str

    customerOwnedIpv4Pool?: str

    enableDns64?: bool

    enableLniAtDeviceIndex?: float

    enableResourceNameDnsARecordOnLaunch?: bool

    enableResourceNameDnsAaaaRecordOnLaunch?: bool

    existingDefaultSubnet?: bool

    forceDestroy?: bool

    id?: str

    ipv6CidrBlock?: str

    ipv6CidrBlockAssociationId?: str

    ipv6Native?: bool

    mapCustomerOwnedIpOnLaunch?: bool

    mapPublicIpOnLaunch?: bool

    outpostArn?: str

    ownerId?: str

    privateDnsHostnameTypeOnLaunch?: str

    tags?: {str:str}

    tagsAll?: {str:str}

    vpcId?: str


schema Ec2AwsUpboundIoV1beta1DefaultSubnetStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


