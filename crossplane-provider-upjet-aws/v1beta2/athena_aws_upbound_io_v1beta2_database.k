"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Database:
    r"""
    Database is the Schema for the Databases API. Provides an Athena database.

    Attributes
    ----------
    apiVersion : str, default is "athena.aws.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Database", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AthenaAwsUpboundIoV1beta2DatabaseSpec, default is Undefined, required
        spec
    status : AthenaAwsUpboundIoV1beta2DatabaseStatus, default is Undefined, optional
        status
    """


    apiVersion: "athena.aws.upbound.io/v1beta2" = "athena.aws.upbound.io/v1beta2"

    kind: "Database" = "Database"

    metadata?: v1.ObjectMeta

    spec: AthenaAwsUpboundIoV1beta2DatabaseSpec

    status?: AthenaAwsUpboundIoV1beta2DatabaseStatus


schema AthenaAwsUpboundIoV1beta2DatabaseSpec:
    r"""
    DatabaseSpec defines the desired state of Database

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : AthenaAwsUpboundIoV1beta2DatabaseSpecForProvider, default is Undefined, required
        for provider
    initProvider : AthenaAwsUpboundIoV1beta2DatabaseSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : AthenaAwsUpboundIoV1beta2DatabaseSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : AthenaAwsUpboundIoV1beta2DatabaseSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: AthenaAwsUpboundIoV1beta2DatabaseSpecForProvider

    initProvider?: AthenaAwsUpboundIoV1beta2DatabaseSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: AthenaAwsUpboundIoV1beta2DatabaseSpecProviderConfigRef

    publishConnectionDetailsTo?: AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: AthenaAwsUpboundIoV1beta2DatabaseSpecWriteConnectionSecretToRef


schema AthenaAwsUpboundIoV1beta2DatabaseSpecForProvider:
    r"""
    athena aws upbound io v1beta2 database spec for provider

    Attributes
    ----------
    aclConfiguration : AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderACLConfiguration, default is Undefined, optional
        acl configuration
    bucket : str, default is Undefined, optional
        Name of S3 bucket to save the results of the query execution.
    bucketRef : AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketRef, default is Undefined, optional
        bucket ref
    bucketSelector : AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketSelector, default is Undefined, optional
        bucket selector
    comment : str, default is Undefined, optional
        Description of the database.
    encryptionConfiguration : AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderEncryptionConfiguration, default is Undefined, optional
        encryption configuration
    expectedBucketOwner : str, default is Undefined, optional
        AWS account ID that you expect to be the owner of the Amazon S3 bucket.
    forceDestroy : bool, default is Undefined, optional
        Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are not recoverable.
    properties : {str:str}, default is Undefined, optional
        Key-value map of custom metadata properties for the database definition.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    """


    aclConfiguration?: AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderACLConfiguration

    bucket?: str

    bucketRef?: AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketRef

    bucketSelector?: AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketSelector

    comment?: str

    encryptionConfiguration?: AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderEncryptionConfiguration

    expectedBucketOwner?: str

    forceDestroy?: bool

    properties?: {str:str}

    region: str


schema AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderACLConfiguration:
    r"""
    That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.

    Attributes
    ----------
    s3AclOption : str, default is Undefined, optional
        Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
    """


    s3AclOption?: str


schema AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketRef:
    r"""
    Reference to a Bucket in s3 to populate bucket.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketRefPolicy


schema AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketSelector:
    r"""
    Selector for a Bucket in s3 to populate bucket.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketSelectorPolicy


schema AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderBucketSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AthenaAwsUpboundIoV1beta2DatabaseSpecForProviderEncryptionConfiguration:
    r"""
    Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.

    Attributes
    ----------
    encryptionOption : str, default is Undefined, optional
        Type of key; one of SSE_S3, SSE_KMS, CSE_KMS
    kmsKey : str, default is Undefined, optional
        KMS key ARN or ID; required for key types SSE_KMS and CSE_KMS.
    """


    encryptionOption?: str

    kmsKey?: str


schema AthenaAwsUpboundIoV1beta2DatabaseSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    aclConfiguration : AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderACLConfiguration, default is Undefined, optional
        acl configuration
    bucket : str, default is Undefined, optional
        Name of S3 bucket to save the results of the query execution.
    bucketRef : AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketRef, default is Undefined, optional
        bucket ref
    bucketSelector : AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketSelector, default is Undefined, optional
        bucket selector
    comment : str, default is Undefined, optional
        Description of the database.
    encryptionConfiguration : AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderEncryptionConfiguration, default is Undefined, optional
        encryption configuration
    expectedBucketOwner : str, default is Undefined, optional
        AWS account ID that you expect to be the owner of the Amazon S3 bucket.
    forceDestroy : bool, default is Undefined, optional
        Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are not recoverable.
    properties : {str:str}, default is Undefined, optional
        Key-value map of custom metadata properties for the database definition.
    """


    aclConfiguration?: AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderACLConfiguration

    bucket?: str

    bucketRef?: AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketRef

    bucketSelector?: AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketSelector

    comment?: str

    encryptionConfiguration?: AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderEncryptionConfiguration

    expectedBucketOwner?: str

    forceDestroy?: bool

    properties?: {str:str}


schema AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderACLConfiguration:
    r"""
    That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.

    Attributes
    ----------
    s3AclOption : str, default is Undefined, optional
        Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
    """


    s3AclOption?: str


schema AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketRef:
    r"""
    Reference to a Bucket in s3 to populate bucket.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketRefPolicy


schema AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketSelector:
    r"""
    Selector for a Bucket in s3 to populate bucket.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketSelectorPolicy


schema AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderBucketSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AthenaAwsUpboundIoV1beta2DatabaseSpecInitProviderEncryptionConfiguration:
    r"""
    Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.

    Attributes
    ----------
    encryptionOption : str, default is Undefined, optional
        Type of key; one of SSE_S3, SSE_KMS, CSE_KMS
    kmsKey : str, default is Undefined, optional
        KMS key ARN or ID; required for key types SSE_KMS and CSE_KMS.
    """


    encryptionOption?: str

    kmsKey?: str


schema AthenaAwsUpboundIoV1beta2DatabaseSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AthenaAwsUpboundIoV1beta2DatabaseSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AthenaAwsUpboundIoV1beta2DatabaseSpecProviderConfigRefPolicy


schema AthenaAwsUpboundIoV1beta2DatabaseSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsToConfigRef

    metadata?: AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsToMetadata

    name: str


schema AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsToConfigRefPolicy


schema AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AthenaAwsUpboundIoV1beta2DatabaseSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema AthenaAwsUpboundIoV1beta2DatabaseSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema AthenaAwsUpboundIoV1beta2DatabaseStatus:
    r"""
    DatabaseStatus defines the observed state of Database.

    Attributes
    ----------
    atProvider : AthenaAwsUpboundIoV1beta2DatabaseStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [AthenaAwsUpboundIoV1beta2DatabaseStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: AthenaAwsUpboundIoV1beta2DatabaseStatusAtProvider

    conditions?: [AthenaAwsUpboundIoV1beta2DatabaseStatusConditionsItems0]

    observedGeneration?: int


schema AthenaAwsUpboundIoV1beta2DatabaseStatusAtProvider:
    r"""
    athena aws upbound io v1beta2 database status at provider

    Attributes
    ----------
    aclConfiguration : AthenaAwsUpboundIoV1beta2DatabaseStatusAtProviderACLConfiguration, default is Undefined, optional
        acl configuration
    bucket : str, default is Undefined, optional
        Name of S3 bucket to save the results of the query execution.
    comment : str, default is Undefined, optional
        Description of the database.
    encryptionConfiguration : AthenaAwsUpboundIoV1beta2DatabaseStatusAtProviderEncryptionConfiguration, default is Undefined, optional
        encryption configuration
    expectedBucketOwner : str, default is Undefined, optional
        AWS account ID that you expect to be the owner of the Amazon S3 bucket.
    forceDestroy : bool, default is Undefined, optional
        Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are not recoverable.
    id : str, default is Undefined, optional
        Database name
    properties : {str:str}, default is Undefined, optional
        Key-value map of custom metadata properties for the database definition.
    """


    aclConfiguration?: AthenaAwsUpboundIoV1beta2DatabaseStatusAtProviderACLConfiguration

    bucket?: str

    comment?: str

    encryptionConfiguration?: AthenaAwsUpboundIoV1beta2DatabaseStatusAtProviderEncryptionConfiguration

    expectedBucketOwner?: str

    forceDestroy?: bool

    id?: str

    properties?: {str:str}


schema AthenaAwsUpboundIoV1beta2DatabaseStatusAtProviderACLConfiguration:
    r"""
    That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.

    Attributes
    ----------
    s3AclOption : str, default is Undefined, optional
        Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
    """


    s3AclOption?: str


schema AthenaAwsUpboundIoV1beta2DatabaseStatusAtProviderEncryptionConfiguration:
    r"""
    Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.

    Attributes
    ----------
    encryptionOption : str, default is Undefined, optional
        Type of key; one of SSE_S3, SSE_KMS, CSE_KMS
    kmsKey : str, default is Undefined, optional
        KMS key ARN or ID; required for key types SSE_KMS and CSE_KMS.
    """


    encryptionOption?: str

    kmsKey?: str


schema AthenaAwsUpboundIoV1beta2DatabaseStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


