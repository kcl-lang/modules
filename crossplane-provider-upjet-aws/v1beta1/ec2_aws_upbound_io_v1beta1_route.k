"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Route:
    r"""
    Route is the Schema for the Routes API. Provides a resource to create a routing entry in a VPC routing table.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Route", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1RouteSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1RouteStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "Route" = "Route"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1RouteSpec

    status?: Ec2AwsUpboundIoV1beta1RouteStatus


schema Ec2AwsUpboundIoV1beta1RouteSpec:
    r"""
    RouteSpec defines the desired state of Route

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1RouteSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1RouteSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1RouteSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1RouteSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1RouteSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1RouteSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1RouteSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1RouteSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1RouteSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 route spec for provider

    Attributes
    ----------
    carrierGatewayId : str, default is Undefined, optional
        Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
    coreNetworkArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of a core network.
    destinationCidrBlock : str, default is Undefined, optional
        The destination CIDR block.
    destinationIpv6CidrBlock : str, default is Undefined, optional
        The destination IPv6 CIDR block.
    destinationPrefixListId : str, default is Undefined, optional
        The ID of a managed prefix list destination.
    destinationPrefixListIdRef : Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDRef, default is Undefined, optional
        destination prefix list Id ref
    destinationPrefixListIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDSelector, default is Undefined, optional
        destination prefix list Id selector
    egressOnlyGatewayId : str, default is Undefined, optional
        Identifier of a VPC Egress Only Internet Gateway.
    egressOnlyGatewayIdRef : Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDRef, default is Undefined, optional
        egress only gateway Id ref
    egressOnlyGatewayIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDSelector, default is Undefined, optional
        egress only gateway Id selector
    gatewayId : str, default is Undefined, optional
        Identifier of a VPC internet gateway or a virtual private gateway. Specify local when updating a previously imported local route.
    gatewayIdRef : Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDRef, default is Undefined, optional
        gateway Id ref
    gatewayIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDSelector, default is Undefined, optional
        gateway Id selector
    instanceId : str, default is Undefined, optional
        Identifier of an EC2 instance.
    instanceIdRef : Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDRef, default is Undefined, optional
        instance Id ref
    instanceIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDSelector, default is Undefined, optional
        instance Id selector
    localGatewayId : str, default is Undefined, optional
        Identifier of a Outpost local gateway.
    natGatewayId : str, default is Undefined, optional
        Identifier of a VPC NAT gateway.
    natGatewayIdRef : Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDRef, default is Undefined, optional
        nat gateway Id ref
    natGatewayIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDSelector, default is Undefined, optional
        nat gateway Id selector
    networkInterfaceId : str, default is Undefined, optional
        Identifier of an EC2 network interface.
    networkInterfaceIdRef : Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDRef, default is Undefined, optional
        network interface Id ref
    networkInterfaceIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDSelector, default is Undefined, optional
        network interface Id selector
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    routeTableId : str, default is Undefined, optional
        The ID of the routing table.
    routeTableIdRef : Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDRef, default is Undefined, optional
        route table Id ref
    routeTableIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDSelector, default is Undefined, optional
        route table Id selector
    transitGatewayId : str, default is Undefined, optional
        Identifier of an EC2 Transit Gateway.
    transitGatewayIdRef : Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDRef, default is Undefined, optional
        transit gateway Id ref
    transitGatewayIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDSelector, default is Undefined, optional
        transit gateway Id selector
    vpcEndpointId : str, default is Undefined, optional
        Identifier of a VPC Endpoint.
    vpcEndpointIdRef : Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDRef, default is Undefined, optional
        vpc endpoint Id ref
    vpcEndpointIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDSelector, default is Undefined, optional
        vpc endpoint Id selector
    vpcPeeringConnectionId : str, default is Undefined, optional
        Identifier of a VPC peering connection.
    vpcPeeringConnectionIdRef : Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDRef, default is Undefined, optional
        vpc peering connection Id ref
    vpcPeeringConnectionIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDSelector, default is Undefined, optional
        vpc peering connection Id selector
    """


    carrierGatewayId?: str

    coreNetworkArn?: str

    destinationCidrBlock?: str

    destinationIpv6CidrBlock?: str

    destinationPrefixListId?: str

    destinationPrefixListIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDRef

    destinationPrefixListIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDSelector

    egressOnlyGatewayId?: str

    egressOnlyGatewayIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDRef

    egressOnlyGatewayIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDSelector

    gatewayId?: str

    gatewayIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDRef

    gatewayIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDSelector

    instanceId?: str

    instanceIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDRef

    instanceIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDSelector

    localGatewayId?: str

    natGatewayId?: str

    natGatewayIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDRef

    natGatewayIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDSelector

    networkInterfaceId?: str

    networkInterfaceIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDRef

    networkInterfaceIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDSelector

    region: str

    routeTableId?: str

    routeTableIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDRef

    routeTableIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDSelector

    transitGatewayId?: str

    transitGatewayIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDRef

    transitGatewayIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDSelector

    vpcEndpointId?: str

    vpcEndpointIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDRef

    vpcEndpointIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDSelector

    vpcPeeringConnectionId?: str

    vpcPeeringConnectionIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDRef

    vpcPeeringConnectionIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDSelector


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDRef:
    r"""
    Reference to a ManagedPrefixList in ec2 to populate destinationPrefixListId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDSelector:
    r"""
    Selector for a ManagedPrefixList in ec2 to populate destinationPrefixListId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderDestinationPrefixListIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDRef:
    r"""
    Reference to a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDSelector:
    r"""
    Selector for a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderEgressOnlyGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDRef:
    r"""
    Reference to a InternetGateway to populate gatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDSelector:
    r"""
    Selector for a InternetGateway to populate gatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDRef:
    r"""
    Reference to a Instance to populate instanceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDSelector:
    r"""
    Selector for a Instance to populate instanceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderInstanceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDRef:
    r"""
    Reference to a NATGateway to populate natGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDSelector:
    r"""
    Selector for a NATGateway to populate natGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderNatGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDRef:
    r"""
    Reference to a NetworkInterface to populate networkInterfaceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDSelector:
    r"""
    Selector for a NetworkInterface to populate networkInterfaceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderNetworkInterfaceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDRef:
    r"""
    Reference to a RouteTable to populate routeTableId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDSelector:
    r"""
    Selector for a RouteTable to populate routeTableId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderRouteTableIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDRef:
    r"""
    Reference to a TransitGateway to populate transitGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDSelector:
    r"""
    Selector for a TransitGateway to populate transitGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderTransitGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDRef:
    r"""
    Reference to a VPCEndpoint to populate vpcEndpointId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDSelector:
    r"""
    Selector for a VPCEndpoint to populate vpcEndpointId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcEndpointIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDRef:
    r"""
    Reference to a VPCPeeringConnection to populate vpcPeeringConnectionId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDSelector:
    r"""
    Selector for a VPCPeeringConnection to populate vpcPeeringConnectionId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecForProviderVpcPeeringConnectionIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    carrierGatewayId : str, default is Undefined, optional
        Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
    coreNetworkArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of a core network.
    destinationCidrBlock : str, default is Undefined, optional
        The destination CIDR block.
    destinationIpv6CidrBlock : str, default is Undefined, optional
        The destination IPv6 CIDR block.
    destinationPrefixListId : str, default is Undefined, optional
        The ID of a managed prefix list destination.
    destinationPrefixListIdRef : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDRef, default is Undefined, optional
        destination prefix list Id ref
    destinationPrefixListIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDSelector, default is Undefined, optional
        destination prefix list Id selector
    egressOnlyGatewayId : str, default is Undefined, optional
        Identifier of a VPC Egress Only Internet Gateway.
    egressOnlyGatewayIdRef : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDRef, default is Undefined, optional
        egress only gateway Id ref
    egressOnlyGatewayIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDSelector, default is Undefined, optional
        egress only gateway Id selector
    gatewayId : str, default is Undefined, optional
        Identifier of a VPC internet gateway or a virtual private gateway. Specify local when updating a previously imported local route.
    gatewayIdRef : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDRef, default is Undefined, optional
        gateway Id ref
    gatewayIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDSelector, default is Undefined, optional
        gateway Id selector
    instanceId : str, default is Undefined, optional
        Identifier of an EC2 instance.
    instanceIdRef : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDRef, default is Undefined, optional
        instance Id ref
    instanceIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDSelector, default is Undefined, optional
        instance Id selector
    localGatewayId : str, default is Undefined, optional
        Identifier of a Outpost local gateway.
    natGatewayId : str, default is Undefined, optional
        Identifier of a VPC NAT gateway.
    natGatewayIdRef : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDRef, default is Undefined, optional
        nat gateway Id ref
    natGatewayIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDSelector, default is Undefined, optional
        nat gateway Id selector
    networkInterfaceId : str, default is Undefined, optional
        Identifier of an EC2 network interface.
    networkInterfaceIdRef : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDRef, default is Undefined, optional
        network interface Id ref
    networkInterfaceIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDSelector, default is Undefined, optional
        network interface Id selector
    routeTableId : str, default is Undefined, optional
        The ID of the routing table.
    routeTableIdRef : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDRef, default is Undefined, optional
        route table Id ref
    routeTableIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDSelector, default is Undefined, optional
        route table Id selector
    transitGatewayId : str, default is Undefined, optional
        Identifier of an EC2 Transit Gateway.
    transitGatewayIdRef : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDRef, default is Undefined, optional
        transit gateway Id ref
    transitGatewayIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDSelector, default is Undefined, optional
        transit gateway Id selector
    vpcEndpointId : str, default is Undefined, optional
        Identifier of a VPC Endpoint.
    vpcEndpointIdRef : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDRef, default is Undefined, optional
        vpc endpoint Id ref
    vpcEndpointIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDSelector, default is Undefined, optional
        vpc endpoint Id selector
    vpcPeeringConnectionId : str, default is Undefined, optional
        Identifier of a VPC peering connection.
    vpcPeeringConnectionIdRef : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDRef, default is Undefined, optional
        vpc peering connection Id ref
    vpcPeeringConnectionIdSelector : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDSelector, default is Undefined, optional
        vpc peering connection Id selector
    """


    carrierGatewayId?: str

    coreNetworkArn?: str

    destinationCidrBlock?: str

    destinationIpv6CidrBlock?: str

    destinationPrefixListId?: str

    destinationPrefixListIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDRef

    destinationPrefixListIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDSelector

    egressOnlyGatewayId?: str

    egressOnlyGatewayIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDRef

    egressOnlyGatewayIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDSelector

    gatewayId?: str

    gatewayIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDRef

    gatewayIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDSelector

    instanceId?: str

    instanceIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDRef

    instanceIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDSelector

    localGatewayId?: str

    natGatewayId?: str

    natGatewayIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDRef

    natGatewayIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDSelector

    networkInterfaceId?: str

    networkInterfaceIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDRef

    networkInterfaceIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDSelector

    routeTableId?: str

    routeTableIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDRef

    routeTableIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDSelector

    transitGatewayId?: str

    transitGatewayIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDRef

    transitGatewayIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDSelector

    vpcEndpointId?: str

    vpcEndpointIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDRef

    vpcEndpointIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDSelector

    vpcPeeringConnectionId?: str

    vpcPeeringConnectionIdRef?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDRef

    vpcPeeringConnectionIdSelector?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDSelector


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDRef:
    r"""
    Reference to a ManagedPrefixList in ec2 to populate destinationPrefixListId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDSelector:
    r"""
    Selector for a ManagedPrefixList in ec2 to populate destinationPrefixListId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderDestinationPrefixListIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDRef:
    r"""
    Reference to a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDSelector:
    r"""
    Selector for a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderEgressOnlyGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDRef:
    r"""
    Reference to a InternetGateway to populate gatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDSelector:
    r"""
    Selector for a InternetGateway to populate gatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDRef:
    r"""
    Reference to a Instance to populate instanceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDSelector:
    r"""
    Selector for a Instance to populate instanceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderInstanceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDRef:
    r"""
    Reference to a NATGateway to populate natGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDSelector:
    r"""
    Selector for a NATGateway to populate natGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNatGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDRef:
    r"""
    Reference to a NetworkInterface to populate networkInterfaceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDSelector:
    r"""
    Selector for a NetworkInterface to populate networkInterfaceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderNetworkInterfaceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDRef:
    r"""
    Reference to a RouteTable to populate routeTableId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDSelector:
    r"""
    Selector for a RouteTable to populate routeTableId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderRouteTableIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDRef:
    r"""
    Reference to a TransitGateway to populate transitGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDSelector:
    r"""
    Selector for a TransitGateway to populate transitGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderTransitGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDRef:
    r"""
    Reference to a VPCEndpoint to populate vpcEndpointId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDSelector:
    r"""
    Selector for a VPCEndpoint to populate vpcEndpointId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcEndpointIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDRef:
    r"""
    Reference to a VPCPeeringConnection to populate vpcPeeringConnectionId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDSelector:
    r"""
    Selector for a VPCPeeringConnection to populate vpcPeeringConnectionId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecInitProviderVpcPeeringConnectionIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1RouteSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1RouteStatus:
    r"""
    RouteStatus defines the observed state of Route.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1RouteStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1RouteStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1RouteStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1RouteStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1RouteStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 route status at provider

    Attributes
    ----------
    carrierGatewayId : str, default is Undefined, optional
        Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
    coreNetworkArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of a core network.
    destinationCidrBlock : str, default is Undefined, optional
        The destination CIDR block.
    destinationIpv6CidrBlock : str, default is Undefined, optional
        The destination IPv6 CIDR block.
    destinationPrefixListId : str, default is Undefined, optional
        The ID of a managed prefix list destination.
    egressOnlyGatewayId : str, default is Undefined, optional
        Identifier of a VPC Egress Only Internet Gateway.
    gatewayId : str, default is Undefined, optional
        Identifier of a VPC internet gateway or a virtual private gateway. Specify local when updating a previously imported local route.
    id : str, default is Undefined, optional
        Route identifier computed from the routing table identifier and route destination.
    instanceId : str, default is Undefined, optional
        Identifier of an EC2 instance.
    instanceOwnerId : str, default is Undefined, optional
        The AWS account ID of the owner of the EC2 instance.
    localGatewayId : str, default is Undefined, optional
        Identifier of a Outpost local gateway.
    natGatewayId : str, default is Undefined, optional
        Identifier of a VPC NAT gateway.
    networkInterfaceId : str, default is Undefined, optional
        Identifier of an EC2 network interface.
    origin : str, default is Undefined, optional
        How the route was created - CreateRouteTable, CreateRoute or EnableVgwRoutePropagation.
    routeTableId : str, default is Undefined, optional
        The ID of the routing table.
    state : str, default is Undefined, optional
        The state of the route - active or blackhole.
    transitGatewayId : str, default is Undefined, optional
        Identifier of an EC2 Transit Gateway.
    vpcEndpointId : str, default is Undefined, optional
        Identifier of a VPC Endpoint.
    vpcPeeringConnectionId : str, default is Undefined, optional
        Identifier of a VPC peering connection.
    """


    carrierGatewayId?: str

    coreNetworkArn?: str

    destinationCidrBlock?: str

    destinationIpv6CidrBlock?: str

    destinationPrefixListId?: str

    egressOnlyGatewayId?: str

    gatewayId?: str

    id?: str

    instanceId?: str

    instanceOwnerId?: str

    localGatewayId?: str

    natGatewayId?: str

    networkInterfaceId?: str

    origin?: str

    routeTableId?: str

    state?: str

    transitGatewayId?: str

    vpcEndpointId?: str

    vpcPeeringConnectionId?: str


schema Ec2AwsUpboundIoV1beta1RouteStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


