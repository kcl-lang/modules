"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema SubscriptionFilter:
    r"""
    SubscriptionFilter is the Schema for the SubscriptionFilters API. Provides a CloudWatch Logs subscription filter.

    Attributes
    ----------
    apiVersion : str, default is "cloudwatchlogs.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "SubscriptionFilter", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpec, default is Undefined, required
        spec
    status : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterStatus, default is Undefined, optional
        status
    """


    apiVersion: "cloudwatchlogs.aws.upbound.io/v1beta1" = "cloudwatchlogs.aws.upbound.io/v1beta1"

    kind: "SubscriptionFilter" = "SubscriptionFilter"

    metadata?: v1.ObjectMeta

    spec: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpec

    status?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterStatus


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpec:
    r"""
    SubscriptionFilterSpec defines the desired state of SubscriptionFilter

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProvider, default is Undefined, required
        for provider
    initProvider : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProvider

    initProvider?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecProviderConfigRef

    publishConnectionDetailsTo?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecWriteConnectionSecretToRef


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProvider:
    r"""
    cloudwatchlogs aws upbound io v1beta1 subscription filter spec for provider

    Attributes
    ----------
    destinationArn : str, default is Undefined, optional
        The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
    destinationArnRef : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnRef, default is Undefined, optional
        destination arn ref
    destinationArnSelector : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnSelector, default is Undefined, optional
        destination arn selector
    distribution : str, default is Undefined, optional
        The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
    filterPattern : str, default is Undefined, optional
        A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events. Use empty string "" to match everything. For more information, see the Amazon CloudWatch Logs User Guide.
    logGroupName : str, default is Undefined, optional
        The name of the log group to associate the subscription filter with
    name : str, default is Undefined, optional
        A name for the subscription filter
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    roleArn : str, default is Undefined, optional
        The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use aws_lambda_permission resource for granting access from CloudWatch logs to the destination Lambda function.
    roleArnRef : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnRef, default is Undefined, optional
        role arn ref
    roleArnSelector : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnSelector, default is Undefined, optional
        role arn selector
    """


    destinationArn?: str

    destinationArnRef?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnRef

    destinationArnSelector?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnSelector

    distribution?: str

    filterPattern?: str

    logGroupName?: str

    name?: str

    region: str

    roleArn?: str

    roleArnRef?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnRef

    roleArnSelector?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnSelector


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnRef:
    r"""
    Reference to a Stream in kinesis to populate destinationArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnRefPolicy


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnSelector:
    r"""
    Selector for a Stream in kinesis to populate destinationArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnSelectorPolicy


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderDestinationArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnRef:
    r"""
    Reference to a Role in iam to populate roleArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnRefPolicy


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnSelector:
    r"""
    Selector for a Role in iam to populate roleArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnSelectorPolicy


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecForProviderRoleArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    destinationArn : str, default is Undefined, optional
        The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
    destinationArnRef : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnRef, default is Undefined, optional
        destination arn ref
    destinationArnSelector : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnSelector, default is Undefined, optional
        destination arn selector
    distribution : str, default is Undefined, optional
        The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
    filterPattern : str, default is Undefined, optional
        A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events. Use empty string "" to match everything. For more information, see the Amazon CloudWatch Logs User Guide.
    logGroupName : str, default is Undefined, optional
        The name of the log group to associate the subscription filter with
    name : str, default is Undefined, optional
        A name for the subscription filter
    roleArn : str, default is Undefined, optional
        The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use aws_lambda_permission resource for granting access from CloudWatch logs to the destination Lambda function.
    roleArnRef : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnRef, default is Undefined, optional
        role arn ref
    roleArnSelector : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnSelector, default is Undefined, optional
        role arn selector
    """


    destinationArn?: str

    destinationArnRef?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnRef

    destinationArnSelector?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnSelector

    distribution?: str

    filterPattern?: str

    logGroupName?: str

    name?: str

    roleArn?: str

    roleArnRef?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnRef

    roleArnSelector?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnSelector


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnRef:
    r"""
    Reference to a Stream in kinesis to populate destinationArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnRefPolicy


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnSelector:
    r"""
    Selector for a Stream in kinesis to populate destinationArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnSelectorPolicy


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderDestinationArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnRef:
    r"""
    Reference to a Role in iam to populate roleArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnRefPolicy


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnSelector:
    r"""
    Selector for a Role in iam to populate roleArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnSelectorPolicy


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecInitProviderRoleArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecProviderConfigRefPolicy


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsToConfigRef

    metadata?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsToMetadata

    name: str


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsToConfigRefPolicy


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterStatus:
    r"""
    SubscriptionFilterStatus defines the observed state of SubscriptionFilter.

    Attributes
    ----------
    atProvider : CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterStatusAtProvider

    conditions?: [CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterStatusConditionsItems0]

    observedGeneration?: int


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterStatusAtProvider:
    r"""
    cloudwatchlogs aws upbound io v1beta1 subscription filter status at provider

    Attributes
    ----------
    destinationArn : str, default is Undefined, optional
        The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
    distribution : str, default is Undefined, optional
        The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
    filterPattern : str, default is Undefined, optional
        A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events. Use empty string "" to match everything. For more information, see the Amazon CloudWatch Logs User Guide.
    id : str, default is Undefined, optional
        id
    logGroupName : str, default is Undefined, optional
        The name of the log group to associate the subscription filter with
    name : str, default is Undefined, optional
        A name for the subscription filter
    roleArn : str, default is Undefined, optional
        The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use aws_lambda_permission resource for granting access from CloudWatch logs to the destination Lambda function.
    """


    destinationArn?: str

    distribution?: str

    filterPattern?: str

    id?: str

    logGroupName?: str

    name?: str

    roleArn?: str


schema CloudwatchlogsAwsUpboundIoV1beta1SubscriptionFilterStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


