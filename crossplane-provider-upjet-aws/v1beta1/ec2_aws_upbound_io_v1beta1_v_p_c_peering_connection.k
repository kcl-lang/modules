"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VPCPeeringConnection:
    r"""
    VPCPeeringConnection is the Schema for the VPCPeeringConnections API. Provides a resource to manage a VPC peering connection.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VPCPeeringConnection", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "VPCPeeringConnection" = "VPCPeeringConnection"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpec

    status?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatus


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpec:
    r"""
    VPCPeeringConnectionSpec defines the desired state of VPCPeeringConnection

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 v p c peering connection spec for provider

    Attributes
    ----------
    autoAccept : bool, default is Undefined, optional
        Accept the peering (both VPCs need to be in the same AWS account and region).
    peerOwnerId : str, default is Undefined, optional
        The AWS account ID of the target peer VPC.
        Defaults to the account ID the AWS provider is currently connected to, so must be managed if connecting cross-account.
    peerRegion : str, default is Undefined, optional
        The region of the accepter VPC of the VPC Peering Connection. auto_accept must be false,
        and use the aws_vpc_peering_connection_accepter to manage the accepter side.
    peerVpcId : str, default is Undefined, optional
        The ID of the target VPC with which you are creating the VPC Peering Connection.
    peerVpcIdRef : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDRef, default is Undefined, optional
        peer vpc Id ref
    peerVpcIdSelector : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDSelector, default is Undefined, optional
        peer vpc Id selector
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    vpcId : str, default is Undefined, optional
        The ID of the requester VPC.
    vpcIdRef : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    autoAccept?: bool

    peerOwnerId?: str

    peerRegion?: str

    peerVpcId?: str

    peerVpcIdRef?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDRef

    peerVpcIdSelector?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDSelector

    region: str

    tags?: {str:str}

    vpcId?: str

    vpcIdRef?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDRef

    vpcIdSelector?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDSelector


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate peerVpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate peerVpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderPeerVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecForProviderVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    autoAccept : bool, default is Undefined, optional
        Accept the peering (both VPCs need to be in the same AWS account and region).
    peerOwnerId : str, default is Undefined, optional
        The AWS account ID of the target peer VPC.
        Defaults to the account ID the AWS provider is currently connected to, so must be managed if connecting cross-account.
    peerRegion : str, default is Undefined, optional
        The region of the accepter VPC of the VPC Peering Connection. auto_accept must be false,
        and use the aws_vpc_peering_connection_accepter to manage the accepter side.
    peerVpcId : str, default is Undefined, optional
        The ID of the target VPC with which you are creating the VPC Peering Connection.
    peerVpcIdRef : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDRef, default is Undefined, optional
        peer vpc Id ref
    peerVpcIdSelector : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDSelector, default is Undefined, optional
        peer vpc Id selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    vpcId : str, default is Undefined, optional
        The ID of the requester VPC.
    vpcIdRef : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    autoAccept?: bool

    peerOwnerId?: str

    peerRegion?: str

    peerVpcId?: str

    peerVpcIdRef?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDRef

    peerVpcIdSelector?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDSelector

    tags?: {str:str}

    vpcId?: str

    vpcIdRef?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDRef

    vpcIdSelector?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDSelector


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate peerVpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate peerVpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderPeerVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecInitProviderVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatus:
    r"""
    VPCPeeringConnectionStatus defines the observed state of VPCPeeringConnection.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 v p c peering connection status at provider

    Attributes
    ----------
    acceptStatus : str, default is Undefined, optional
        The status of the VPC Peering Connection request.
    accepter : [Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusAtProviderAccepterItems0], default is Undefined, optional
        An optional configuration block that allows for VPC Peering Connection options to be set for the VPC that accepts
        the peering connection (a maximum of one).
    autoAccept : bool, default is Undefined, optional
        Accept the peering (both VPCs need to be in the same AWS account and region).
    id : str, default is Undefined, optional
        The ID of the VPC Peering Connection.
    peerOwnerId : str, default is Undefined, optional
        The AWS account ID of the target peer VPC.
        Defaults to the account ID the AWS provider is currently connected to, so must be managed if connecting cross-account.
    peerRegion : str, default is Undefined, optional
        The region of the accepter VPC of the VPC Peering Connection. auto_accept must be false,
        and use the aws_vpc_peering_connection_accepter to manage the accepter side.
    peerVpcId : str, default is Undefined, optional
        The ID of the target VPC with which you are creating the VPC Peering Connection.
    requester : [Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusAtProviderRequesterItems0], default is Undefined, optional
        A optional configuration block that allows for VPC Peering Connection options to be set for the VPC that requests
        the peering connection (a maximum of one).
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    vpcId : str, default is Undefined, optional
        The ID of the requester VPC.
    """


    acceptStatus?: str

    accepter?: [Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusAtProviderAccepterItems0]

    autoAccept?: bool

    id?: str

    peerOwnerId?: str

    peerRegion?: str

    peerVpcId?: str

    requester?: [Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusAtProviderRequesterItems0]

    tags?: {str:str}

    tagsAll?: {str:str}

    vpcId?: str


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusAtProviderAccepterItems0:
    r"""
    ec2 aws upbound io v1beta1 v p c peering connection status at provider accepter items0

    Attributes
    ----------
    allowRemoteVpcDnsResolution : bool, default is Undefined, optional
        Allow a local VPC to resolve public DNS hostnames to
        private IP addresses when queried from instances in the peer VPC.
    """


    allowRemoteVpcDnsResolution?: bool


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusAtProviderRequesterItems0:
    r"""
    ec2 aws upbound io v1beta1 v p c peering connection status at provider requester items0

    Attributes
    ----------
    allowRemoteVpcDnsResolution : bool, default is Undefined, optional
        Allow a local VPC to resolve public DNS hostnames to
        private IP addresses when queried from instances in the peer VPC.
    """


    allowRemoteVpcDnsResolution?: bool


schema Ec2AwsUpboundIoV1beta1VPCPeeringConnectionStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


