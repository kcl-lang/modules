"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema RepositoryRuleset:
    r"""
    RepositoryRuleset is the Schema for the RepositoryRulesets API. Creates a GitHub repository ruleset.

    Attributes
    ----------
    apiVersion : str, default is "repo.github.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "RepositoryRuleset", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpec, default is Undefined, required
        spec
    status : RepoGithubUpboundIoV1alpha1RepositoryRulesetStatus, default is Undefined, optional
        status
    """


    apiVersion: "repo.github.upbound.io/v1alpha1" = "repo.github.upbound.io/v1alpha1"

    kind: "RepositoryRuleset" = "RepositoryRuleset"

    metadata?: v1.ObjectMeta

    spec: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpec

    status?: RepoGithubUpboundIoV1alpha1RepositoryRulesetStatus


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpec:
    r"""
    RepositoryRulesetSpec defines the desired state of RepositoryRuleset

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProvider, default is Undefined, required
        for provider
    initProvider : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProvider

    initProvider?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecProviderConfigRef

    publishConnectionDetailsTo?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecWriteConnectionSecretToRef


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProvider:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider

    Attributes
    ----------
    bypassActors : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderBypassActorsItems0], default is Undefined, optional
        (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
        The actors that can bypass the rules in this ruleset.
    conditions : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderConditionsItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters for a repository ruleset ref name condition. (see below for nested schema)
        Parameters for a repository ruleset ref name condition.
    enforcement : str, default is Undefined, optional
        (String) Possible values for Enforcement are disabled, active, evaluate. Note: evaluate is currently only supported for owners of type organization.
        Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.
    name : str, default is Undefined, optional
        (String) The name of the ruleset.
        The name of the ruleset.
    repository : str, default is Undefined, optional
        (String) Name of the repository to apply rulset to.
        Name of the repository to apply rulset to.
    repositoryRef : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositoryRef, default is Undefined, optional
        repository ref
    repositorySelector : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositorySelector, default is Undefined, optional
        repository selector
    rules : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0], default is Undefined, optional
        (Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)
        Rules within the ruleset.
    target : str, default is Undefined, optional
        (String) Possible values are branch and tag.
        Possible values are `branch` and `tag`.
    """


    bypassActors?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderBypassActorsItems0]

    conditions?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderConditionsItems0]

    enforcement?: str

    name?: str

    repository?: str

    repositoryRef?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositoryRef

    repositorySelector?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositorySelector

    rules?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0]

    target?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderBypassActorsItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider bypass actors items0

    Attributes
    ----------
    actorId : int, default is Undefined, optional
        (Number) The ID of the actor that can bypass a ruleset.
        The ID of the actor that can bypass a ruleset. When `actor_type` is `OrganizationAdmin`, this should be set to `1`.
    actorType : str, default is Undefined, optional
        (String) The type of actor that can bypass a ruleset. Can be one of: RepositoryRole, Team, Integration, OrganizationAdmin.
        The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.
    bypassMode : str, default is Undefined, optional
        (String) When the specified actor can bypass the ruleset. pull_request means that an actor can only bypass rules on pull requests. Can be one of: always, pull_request.
        When the specified actor can bypass the ruleset. pull_request means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pull_request`.
    """


    actorId?: int

    actorType?: str

    bypassMode?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderConditionsItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider conditions items0

    Attributes
    ----------
    refName : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderConditionsItems0RefNameItems0], default is Undefined, optional
        (Block List, Min: 1, Max: 1) (see below for nested schema)
    """


    refName?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderConditionsItems0RefNameItems0]


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderConditionsItems0RefNameItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider conditions items0 ref name items0

    Attributes
    ----------
    exclude : [str], default is Undefined, optional
        (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
        Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
    include : [str], default is Undefined, optional
        (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts ~DEFAULT_BRANCH to include the default branch or ~ALL to include all branches.
        Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
    """


    exclude?: [str]

    include?: [str]


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositoryRef:
    r"""
    Reference to a Repository in repo to populate repository.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositoryRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositoryRefPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositoryRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositorySelector:
    r"""
    Selector for a Repository in repo to populate repository.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositorySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositorySelectorPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRepositorySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider rules items0

    Attributes
    ----------
    branchNamePattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0BranchNamePatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the branch_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with tag_name_pattern as it only applied to rulesets with target branch. (see below for nested schema)
        Parameters to be used for the branch_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tag_name_pattern` as it only applies to rulesets with target `branch`.
    commitAuthorEmailPattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0CommitAuthorEmailPatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the commit_author_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        Parameters to be used for the commit_author_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations.
    commitMessagePattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0CommitMessagePatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the commit_message_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        Parameters to be used for the commit_message_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations.
    committerEmailPattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0CommitterEmailPatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the committer_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        Parameters to be used for the committer_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations.
    creation : bool, default is Undefined, optional
        (Boolean) Only allow users with bypass permission to create matching refs.
        Only allow users with bypass permission to create matching refs.
    deletion : bool, default is Undefined, optional
        (Boolean) Only allow users with bypass permissions to delete matching refs.
        Only allow users with bypass permissions to delete matching refs.
    nonFastForward : bool, default is Undefined, optional
        (Boolean) Prevent users with push access from force pushing to branches.
        Prevent users with push access from force pushing to branches.
    pullRequest : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0PullRequestItems0], default is Undefined, optional
        (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
        Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
    requiredDeployments : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0RequiredDeploymentsItems0], default is Undefined, optional
        (Block List, Max: 1) Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. (see below for nested schema)
        Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule.
    requiredLinearHistory : bool, default is Undefined, optional
        (Boolean) Prevent merge commits from being pushed to matching branches.
        Prevent merge commits from being pushed to matching branches.
    requiredSignatures : bool, default is Undefined, optional
        (Boolean) Commits pushed to matching branches must have verified signatures.
        Commits pushed to matching branches must have verified signatures.
    requiredStatusChecks : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0RequiredStatusChecksItems0], default is Undefined, optional
        (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
        Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed.
    tagNamePattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0TagNamePatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the tag_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with branch_name_pattern as it only applied to rulesets with target tag. (see below for nested schema)
        Parameters to be used for the tag_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branch_name_pattern` as it only applies to rulesets with target `tag`.
    update : bool, default is Undefined, optional
        (Boolean) Only allow users with bypass permission to update matching refs.
        Only allow users with bypass permission to update matching refs.
    updateAllowsFetchAndMerge : bool, default is Undefined, optional
        (Boolean) Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires update to be set to true. Note: behaviour is affected by a known bug on the GitHub side which may cause issues when using this parameter.
        Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires `update` to be set to `true`.
    """


    branchNamePattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0BranchNamePatternItems0]

    commitAuthorEmailPattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0CommitAuthorEmailPatternItems0]

    commitMessagePattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0CommitMessagePatternItems0]

    committerEmailPattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0CommitterEmailPatternItems0]

    creation?: bool

    deletion?: bool

    nonFastForward?: bool

    pullRequest?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0PullRequestItems0]

    requiredDeployments?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0RequiredDeploymentsItems0]

    requiredLinearHistory?: bool

    requiredSignatures?: bool

    requiredStatusChecks?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0RequiredStatusChecksItems0]

    tagNamePattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0TagNamePatternItems0]

    update?: bool

    updateAllowsFetchAndMerge?: bool


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0BranchNamePatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider rules items0 branch name pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0CommitAuthorEmailPatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider rules items0 commit author email pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0CommitMessagePatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider rules items0 commit message pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0CommitterEmailPatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider rules items0 committer email pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0PullRequestItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider rules items0 pull request items0

    Attributes
    ----------
    dismissStaleReviewsOnPush : bool, default is Undefined, optional
        (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to false.
        New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
    requireCodeOwnerReview : bool, default is Undefined, optional
        (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to false.
        Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
    requireLastPushApproval : bool, default is Undefined, optional
        (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to false.
        Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
    requiredApprovingReviewCount : int, default is Undefined, optional
        (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to 0.
        The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
    requiredReviewThreadResolution : bool, default is Undefined, optional
        (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to false.
        All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
    """


    dismissStaleReviewsOnPush?: bool

    requireCodeOwnerReview?: bool

    requireLastPushApproval?: bool

    requiredApprovingReviewCount?: int

    requiredReviewThreadResolution?: bool


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0RequiredDeploymentsItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider rules items0 required deployments items0

    Attributes
    ----------
    requiredDeploymentEnvironments : [str], default is Undefined, optional
        (List of String) The environments that must be successfully deployed to before branches can be merged.
        The environments that must be successfully deployed to before branches can be merged.
    """


    requiredDeploymentEnvironments?: [str]


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0RequiredStatusChecksItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider rules items0 required status checks items0

    Attributes
    ----------
    requiredCheck : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0RequiredStatusChecksItems0RequiredCheckItems0], default is Undefined, optional
        (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
        Status checks that are required. Several can be defined.
    strictRequiredStatusChecksPolicy : bool, default is Undefined, optional
        (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to false.
        Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
    """


    requiredCheck?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0RequiredStatusChecksItems0RequiredCheckItems0]

    strictRequiredStatusChecksPolicy?: bool


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0RequiredStatusChecksItems0RequiredCheckItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider rules items0 required status checks items0 required check items0

    Attributes
    ----------
    context : str, default is Undefined, optional
        (String) The status check context name that must be present on the commit.
        The status check context name that must be present on the commit.
    integrationId : int, default is Undefined, optional
        (Number) The optional integration ID that this status check must originate from.
        The optional integration ID that this status check must originate from.
    """


    context?: str

    integrationId?: int


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecForProviderRulesItems0TagNamePatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec for provider rules items0 tag name pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    bypassActors : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderBypassActorsItems0], default is Undefined, optional
        (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
        The actors that can bypass the rules in this ruleset.
    conditions : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderConditionsItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters for a repository ruleset ref name condition. (see below for nested schema)
        Parameters for a repository ruleset ref name condition.
    enforcement : str, default is Undefined, optional
        (String) Possible values for Enforcement are disabled, active, evaluate. Note: evaluate is currently only supported for owners of type organization.
        Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.
    name : str, default is Undefined, optional
        (String) The name of the ruleset.
        The name of the ruleset.
    repository : str, default is Undefined, optional
        (String) Name of the repository to apply rulset to.
        Name of the repository to apply rulset to.
    repositoryRef : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositoryRef, default is Undefined, optional
        repository ref
    repositorySelector : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositorySelector, default is Undefined, optional
        repository selector
    rules : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0], default is Undefined, optional
        (Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)
        Rules within the ruleset.
    target : str, default is Undefined, optional
        (String) Possible values are branch and tag.
        Possible values are `branch` and `tag`.
    """


    bypassActors?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderBypassActorsItems0]

    conditions?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderConditionsItems0]

    enforcement?: str

    name?: str

    repository?: str

    repositoryRef?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositoryRef

    repositorySelector?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositorySelector

    rules?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0]

    target?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderBypassActorsItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider bypass actors items0

    Attributes
    ----------
    actorId : int, default is Undefined, optional
        (Number) The ID of the actor that can bypass a ruleset.
        The ID of the actor that can bypass a ruleset. When `actor_type` is `OrganizationAdmin`, this should be set to `1`.
    actorType : str, default is Undefined, optional
        (String) The type of actor that can bypass a ruleset. Can be one of: RepositoryRole, Team, Integration, OrganizationAdmin.
        The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.
    bypassMode : str, default is Undefined, optional
        (String) When the specified actor can bypass the ruleset. pull_request means that an actor can only bypass rules on pull requests. Can be one of: always, pull_request.
        When the specified actor can bypass the ruleset. pull_request means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pull_request`.
    """


    actorId?: int

    actorType?: str

    bypassMode?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderConditionsItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider conditions items0

    Attributes
    ----------
    refName : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderConditionsItems0RefNameItems0], default is Undefined, optional
        (Block List, Min: 1, Max: 1) (see below for nested schema)
    """


    refName?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderConditionsItems0RefNameItems0]


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderConditionsItems0RefNameItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider conditions items0 ref name items0

    Attributes
    ----------
    exclude : [str], default is Undefined, optional
        (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
        Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
    include : [str], default is Undefined, optional
        (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts ~DEFAULT_BRANCH to include the default branch or ~ALL to include all branches.
        Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
    """


    exclude?: [str]

    include?: [str]


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositoryRef:
    r"""
    Reference to a Repository in repo to populate repository.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositoryRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositoryRefPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositoryRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositorySelector:
    r"""
    Selector for a Repository in repo to populate repository.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositorySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositorySelectorPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRepositorySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider rules items0

    Attributes
    ----------
    branchNamePattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0BranchNamePatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the branch_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with tag_name_pattern as it only applied to rulesets with target branch. (see below for nested schema)
        Parameters to be used for the branch_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tag_name_pattern` as it only applies to rulesets with target `branch`.
    commitAuthorEmailPattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0CommitAuthorEmailPatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the commit_author_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        Parameters to be used for the commit_author_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations.
    commitMessagePattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0CommitMessagePatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the commit_message_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        Parameters to be used for the commit_message_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations.
    committerEmailPattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0CommitterEmailPatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the committer_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        Parameters to be used for the committer_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations.
    creation : bool, default is Undefined, optional
        (Boolean) Only allow users with bypass permission to create matching refs.
        Only allow users with bypass permission to create matching refs.
    deletion : bool, default is Undefined, optional
        (Boolean) Only allow users with bypass permissions to delete matching refs.
        Only allow users with bypass permissions to delete matching refs.
    nonFastForward : bool, default is Undefined, optional
        (Boolean) Prevent users with push access from force pushing to branches.
        Prevent users with push access from force pushing to branches.
    pullRequest : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0PullRequestItems0], default is Undefined, optional
        (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
        Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
    requiredDeployments : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0RequiredDeploymentsItems0], default is Undefined, optional
        (Block List, Max: 1) Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. (see below for nested schema)
        Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule.
    requiredLinearHistory : bool, default is Undefined, optional
        (Boolean) Prevent merge commits from being pushed to matching branches.
        Prevent merge commits from being pushed to matching branches.
    requiredSignatures : bool, default is Undefined, optional
        (Boolean) Commits pushed to matching branches must have verified signatures.
        Commits pushed to matching branches must have verified signatures.
    requiredStatusChecks : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0RequiredStatusChecksItems0], default is Undefined, optional
        (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
        Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed.
    tagNamePattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0TagNamePatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the tag_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with branch_name_pattern as it only applied to rulesets with target tag. (see below for nested schema)
        Parameters to be used for the tag_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branch_name_pattern` as it only applies to rulesets with target `tag`.
    update : bool, default is Undefined, optional
        (Boolean) Only allow users with bypass permission to update matching refs.
        Only allow users with bypass permission to update matching refs.
    updateAllowsFetchAndMerge : bool, default is Undefined, optional
        (Boolean) Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires update to be set to true. Note: behaviour is affected by a known bug on the GitHub side which may cause issues when using this parameter.
        Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires `update` to be set to `true`.
    """


    branchNamePattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0BranchNamePatternItems0]

    commitAuthorEmailPattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0CommitAuthorEmailPatternItems0]

    commitMessagePattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0CommitMessagePatternItems0]

    committerEmailPattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0CommitterEmailPatternItems0]

    creation?: bool

    deletion?: bool

    nonFastForward?: bool

    pullRequest?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0PullRequestItems0]

    requiredDeployments?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0RequiredDeploymentsItems0]

    requiredLinearHistory?: bool

    requiredSignatures?: bool

    requiredStatusChecks?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0RequiredStatusChecksItems0]

    tagNamePattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0TagNamePatternItems0]

    update?: bool

    updateAllowsFetchAndMerge?: bool


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0BranchNamePatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider rules items0 branch name pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0CommitAuthorEmailPatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider rules items0 commit author email pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0CommitMessagePatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider rules items0 commit message pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0CommitterEmailPatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider rules items0 committer email pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0PullRequestItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider rules items0 pull request items0

    Attributes
    ----------
    dismissStaleReviewsOnPush : bool, default is Undefined, optional
        (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to false.
        New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
    requireCodeOwnerReview : bool, default is Undefined, optional
        (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to false.
        Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
    requireLastPushApproval : bool, default is Undefined, optional
        (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to false.
        Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
    requiredApprovingReviewCount : int, default is Undefined, optional
        (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to 0.
        The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
    requiredReviewThreadResolution : bool, default is Undefined, optional
        (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to false.
        All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
    """


    dismissStaleReviewsOnPush?: bool

    requireCodeOwnerReview?: bool

    requireLastPushApproval?: bool

    requiredApprovingReviewCount?: int

    requiredReviewThreadResolution?: bool


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0RequiredDeploymentsItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider rules items0 required deployments items0

    Attributes
    ----------
    requiredDeploymentEnvironments : [str], default is Undefined, optional
        (List of String) The environments that must be successfully deployed to before branches can be merged.
        The environments that must be successfully deployed to before branches can be merged.
    """


    requiredDeploymentEnvironments?: [str]


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0RequiredStatusChecksItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider rules items0 required status checks items0

    Attributes
    ----------
    requiredCheck : [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0RequiredStatusChecksItems0RequiredCheckItems0], default is Undefined, optional
        (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
        Status checks that are required. Several can be defined.
    strictRequiredStatusChecksPolicy : bool, default is Undefined, optional
        (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to false.
        Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
    """


    requiredCheck?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0RequiredStatusChecksItems0RequiredCheckItems0]

    strictRequiredStatusChecksPolicy?: bool


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0RequiredStatusChecksItems0RequiredCheckItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider rules items0 required status checks items0 required check items0

    Attributes
    ----------
    context : str, default is Undefined, optional
        (String) The status check context name that must be present on the commit.
        The status check context name that must be present on the commit.
    integrationId : int, default is Undefined, optional
        (Number) The optional integration ID that this status check must originate from.
        The optional integration ID that this status check must originate from.
    """


    context?: str

    integrationId?: int


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecInitProviderRulesItems0TagNamePatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset spec init provider rules items0 tag name pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecProviderConfigRefPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsToConfigRef

    metadata?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsToMetadata

    name: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsToConfigRefPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatus:
    r"""
    RepositoryRulesetStatus defines the observed state of RepositoryRuleset.

    Attributes
    ----------
    atProvider : RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProvider

    conditions?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusConditionsItems0]

    observedGeneration?: int


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProvider:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider

    Attributes
    ----------
    bypassActors : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderBypassActorsItems0], default is Undefined, optional
        (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
        The actors that can bypass the rules in this ruleset.
    conditions : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderConditionsItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters for a repository ruleset ref name condition. (see below for nested schema)
        Parameters for a repository ruleset ref name condition.
    enforcement : str, default is Undefined, optional
        (String) Possible values for Enforcement are disabled, active, evaluate. Note: evaluate is currently only supported for owners of type organization.
        Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.
    etag : str, default is Undefined, optional
        (String)
    id : str, default is Undefined, optional
        id
    name : str, default is Undefined, optional
        (String) The name of the ruleset.
        The name of the ruleset.
    nodeId : str, default is Undefined, optional
        (String) GraphQL global node id for use with v4 API.
        GraphQL global node id for use with v4 API.
    repository : str, default is Undefined, optional
        (String) Name of the repository to apply rulset to.
        Name of the repository to apply rulset to.
    rules : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0], default is Undefined, optional
        (Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)
        Rules within the ruleset.
    rulesetId : int, default is Undefined, optional
        (Number) GitHub ID for the ruleset.
        GitHub ID for the ruleset.
    target : str, default is Undefined, optional
        (String) Possible values are branch and tag.
        Possible values are `branch` and `tag`.
    """


    bypassActors?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderBypassActorsItems0]

    conditions?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderConditionsItems0]

    enforcement?: str

    etag?: str

    id?: str

    name?: str

    nodeId?: str

    repository?: str

    rules?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0]

    rulesetId?: int

    target?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderBypassActorsItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider bypass actors items0

    Attributes
    ----------
    actorId : int, default is Undefined, optional
        (Number) The ID of the actor that can bypass a ruleset.
        The ID of the actor that can bypass a ruleset. When `actor_type` is `OrganizationAdmin`, this should be set to `1`.
    actorType : str, default is Undefined, optional
        (String) The type of actor that can bypass a ruleset. Can be one of: RepositoryRole, Team, Integration, OrganizationAdmin.
        The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.
    bypassMode : str, default is Undefined, optional
        (String) When the specified actor can bypass the ruleset. pull_request means that an actor can only bypass rules on pull requests. Can be one of: always, pull_request.
        When the specified actor can bypass the ruleset. pull_request means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pull_request`.
    """


    actorId?: int

    actorType?: str

    bypassMode?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderConditionsItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider conditions items0

    Attributes
    ----------
    refName : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderConditionsItems0RefNameItems0], default is Undefined, optional
        (Block List, Min: 1, Max: 1) (see below for nested schema)
    """


    refName?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderConditionsItems0RefNameItems0]


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderConditionsItems0RefNameItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider conditions items0 ref name items0

    Attributes
    ----------
    exclude : [str], default is Undefined, optional
        (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
        Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
    include : [str], default is Undefined, optional
        (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts ~DEFAULT_BRANCH to include the default branch or ~ALL to include all branches.
        Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
    """


    exclude?: [str]

    include?: [str]


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider rules items0

    Attributes
    ----------
    branchNamePattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0BranchNamePatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the branch_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with tag_name_pattern as it only applied to rulesets with target branch. (see below for nested schema)
        Parameters to be used for the branch_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tag_name_pattern` as it only applies to rulesets with target `branch`.
    commitAuthorEmailPattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0CommitAuthorEmailPatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the commit_author_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        Parameters to be used for the commit_author_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations.
    commitMessagePattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0CommitMessagePatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the commit_message_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        Parameters to be used for the commit_message_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations.
    committerEmailPattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0CommitterEmailPatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the committer_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        Parameters to be used for the committer_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations.
    creation : bool, default is Undefined, optional
        (Boolean) Only allow users with bypass permission to create matching refs.
        Only allow users with bypass permission to create matching refs.
    deletion : bool, default is Undefined, optional
        (Boolean) Only allow users with bypass permissions to delete matching refs.
        Only allow users with bypass permissions to delete matching refs.
    nonFastForward : bool, default is Undefined, optional
        (Boolean) Prevent users with push access from force pushing to branches.
        Prevent users with push access from force pushing to branches.
    pullRequest : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0PullRequestItems0], default is Undefined, optional
        (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
        Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
    requiredDeployments : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0RequiredDeploymentsItems0], default is Undefined, optional
        (Block List, Max: 1) Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. (see below for nested schema)
        Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule.
    requiredLinearHistory : bool, default is Undefined, optional
        (Boolean) Prevent merge commits from being pushed to matching branches.
        Prevent merge commits from being pushed to matching branches.
    requiredSignatures : bool, default is Undefined, optional
        (Boolean) Commits pushed to matching branches must have verified signatures.
        Commits pushed to matching branches must have verified signatures.
    requiredStatusChecks : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0RequiredStatusChecksItems0], default is Undefined, optional
        (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
        Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed.
    tagNamePattern : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0TagNamePatternItems0], default is Undefined, optional
        (Block List, Max: 1) Parameters to be used for the tag_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with branch_name_pattern as it only applied to rulesets with target tag. (see below for nested schema)
        Parameters to be used for the tag_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branch_name_pattern` as it only applies to rulesets with target `tag`.
    update : bool, default is Undefined, optional
        (Boolean) Only allow users with bypass permission to update matching refs.
        Only allow users with bypass permission to update matching refs.
    updateAllowsFetchAndMerge : bool, default is Undefined, optional
        (Boolean) Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires update to be set to true. Note: behaviour is affected by a known bug on the GitHub side which may cause issues when using this parameter.
        Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires `update` to be set to `true`.
    """


    branchNamePattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0BranchNamePatternItems0]

    commitAuthorEmailPattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0CommitAuthorEmailPatternItems0]

    commitMessagePattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0CommitMessagePatternItems0]

    committerEmailPattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0CommitterEmailPatternItems0]

    creation?: bool

    deletion?: bool

    nonFastForward?: bool

    pullRequest?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0PullRequestItems0]

    requiredDeployments?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0RequiredDeploymentsItems0]

    requiredLinearHistory?: bool

    requiredSignatures?: bool

    requiredStatusChecks?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0RequiredStatusChecksItems0]

    tagNamePattern?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0TagNamePatternItems0]

    update?: bool

    updateAllowsFetchAndMerge?: bool


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0BranchNamePatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider rules items0 branch name pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0CommitAuthorEmailPatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider rules items0 commit author email pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0CommitMessagePatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider rules items0 commit message pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0CommitterEmailPatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider rules items0 committer email pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0PullRequestItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider rules items0 pull request items0

    Attributes
    ----------
    dismissStaleReviewsOnPush : bool, default is Undefined, optional
        (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to false.
        New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
    requireCodeOwnerReview : bool, default is Undefined, optional
        (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to false.
        Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
    requireLastPushApproval : bool, default is Undefined, optional
        (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to false.
        Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
    requiredApprovingReviewCount : int, default is Undefined, optional
        (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to 0.
        The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
    requiredReviewThreadResolution : bool, default is Undefined, optional
        (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to false.
        All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
    """


    dismissStaleReviewsOnPush?: bool

    requireCodeOwnerReview?: bool

    requireLastPushApproval?: bool

    requiredApprovingReviewCount?: int

    requiredReviewThreadResolution?: bool


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0RequiredDeploymentsItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider rules items0 required deployments items0

    Attributes
    ----------
    requiredDeploymentEnvironments : [str], default is Undefined, optional
        (List of String) The environments that must be successfully deployed to before branches can be merged.
        The environments that must be successfully deployed to before branches can be merged.
    """


    requiredDeploymentEnvironments?: [str]


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0RequiredStatusChecksItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider rules items0 required status checks items0

    Attributes
    ----------
    requiredCheck : [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0RequiredStatusChecksItems0RequiredCheckItems0], default is Undefined, optional
        (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
        Status checks that are required. Several can be defined.
    strictRequiredStatusChecksPolicy : bool, default is Undefined, optional
        (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to false.
        Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
    """


    requiredCheck?: [RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0RequiredStatusChecksItems0RequiredCheckItems0]

    strictRequiredStatusChecksPolicy?: bool


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0RequiredStatusChecksItems0RequiredCheckItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider rules items0 required status checks items0 required check items0

    Attributes
    ----------
    context : str, default is Undefined, optional
        (String) The status check context name that must be present on the commit.
        The status check context name that must be present on the commit.
    integrationId : int, default is Undefined, optional
        (Number) The optional integration ID that this status check must originate from.
        The optional integration ID that this status check must originate from.
    """


    context?: str

    integrationId?: int


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusAtProviderRulesItems0TagNamePatternItems0:
    r"""
    repo github upbound io v1alpha1 repository ruleset status at provider rules items0 tag name pattern items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        (String) How this rule will appear to users.
        How this rule will appear to users.
    negate : bool, default is Undefined, optional
        (Boolean) If true, the rule will fail if the pattern matches.
        If true, the rule will fail if the pattern matches.
    operator : str, default is Undefined, optional
        (String) The operator to use for matching. Can be one of: starts_with, ends_with, contains, regex.
        The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.
    pattern : str, default is Undefined, optional
        (String) The pattern to match with.
        The pattern to match with.
    """


    name?: str

    negate?: bool

    operator?: str

    pattern?: str


schema RepoGithubUpboundIoV1alpha1RepositoryRulesetStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


