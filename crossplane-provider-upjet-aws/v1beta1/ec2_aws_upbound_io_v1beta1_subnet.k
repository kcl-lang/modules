"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Subnet:
    r"""
    Subnet is the Schema for the Subnets API. Provides an VPC subnet resource.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Subnet", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1SubnetSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1SubnetStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "Subnet" = "Subnet"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1SubnetSpec

    status?: Ec2AwsUpboundIoV1beta1SubnetStatus


schema Ec2AwsUpboundIoV1beta1SubnetSpec:
    r"""
    SubnetSpec defines the desired state of Subnet

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1SubnetSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1SubnetSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1SubnetSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1SubnetSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1SubnetSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1SubnetSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1SubnetSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1SubnetSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1SubnetSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 subnet spec for provider

    Attributes
    ----------
    assignIpv6AddressOnCreation : bool, default is Undefined, optional
        Specify true to indicate
        that network interfaces created in the specified subnet should be
        assigned an IPv6 address. Default is false
    availabilityZone : str, default is Undefined, optional
        AZ for the subnet.
    availabilityZoneId : str, default is Undefined, optional
        AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use availability_zone instead.
    cidrBlock : str, default is Undefined, optional
        The IPv4 CIDR block for the subnet.
    customerOwnedIpv4Pool : str, default is Undefined, optional
        The customer owned IPv4 address pool. Typically used with the map_customer_owned_ip_on_launch argument. The outpost_arn argument must be specified when configured.
    enableDns64 : bool, default is Undefined, optional
        Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: false.
    enableLniAtDeviceIndex : float, default is Undefined, optional
        Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
    enableResourceNameDnsARecordOnLaunch : bool, default is Undefined, optional
        Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: false.
    enableResourceNameDnsAaaaRecordOnLaunch : bool, default is Undefined, optional
        Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: false.
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv6 network range for the subnet,
        in CIDR notation. The subnet size must use a /64 prefix length.
    ipv6Native : bool, default is Undefined, optional
        Indicates whether to create an IPv6-only subnet. Default: false.
    mapCustomerOwnedIpOnLaunch : bool, default is Undefined, optional
        Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The customer_owned_ipv4_pool and outpost_arn arguments must be specified when set to true. Default is false.
    mapPublicIpOnLaunch : bool, default is Undefined, optional
        Specify true to indicate
        that instances launched into the subnet should be assigned
        a public IP address. Default is false.
    outpostArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the Outpost.
    privateDnsHostnameTypeOnLaunch : str, default is Undefined, optional
        The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name, resource-name.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    vpcId : str, default is Undefined, optional
        The VPC ID.
    vpcIdRef : Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    assignIpv6AddressOnCreation?: bool

    availabilityZone?: str

    availabilityZoneId?: str

    cidrBlock?: str

    customerOwnedIpv4Pool?: str

    enableDns64?: bool

    enableLniAtDeviceIndex?: float

    enableResourceNameDnsARecordOnLaunch?: bool

    enableResourceNameDnsAaaaRecordOnLaunch?: bool

    ipv6CidrBlock?: str

    ipv6Native?: bool

    mapCustomerOwnedIpOnLaunch?: bool

    mapPublicIpOnLaunch?: bool

    outpostArn?: str

    privateDnsHostnameTypeOnLaunch?: str

    region: str

    tags?: {str:str}

    vpcId?: str

    vpcIdRef?: Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDRef

    vpcIdSelector?: Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDSelector


schema Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDRefPolicy


schema Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SubnetSpecForProviderVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SubnetSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    assignIpv6AddressOnCreation : bool, default is Undefined, optional
        Specify true to indicate
        that network interfaces created in the specified subnet should be
        assigned an IPv6 address. Default is false
    availabilityZone : str, default is Undefined, optional
        AZ for the subnet.
    availabilityZoneId : str, default is Undefined, optional
        AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use availability_zone instead.
    cidrBlock : str, default is Undefined, optional
        The IPv4 CIDR block for the subnet.
    customerOwnedIpv4Pool : str, default is Undefined, optional
        The customer owned IPv4 address pool. Typically used with the map_customer_owned_ip_on_launch argument. The outpost_arn argument must be specified when configured.
    enableDns64 : bool, default is Undefined, optional
        Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: false.
    enableLniAtDeviceIndex : float, default is Undefined, optional
        Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
    enableResourceNameDnsARecordOnLaunch : bool, default is Undefined, optional
        Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: false.
    enableResourceNameDnsAaaaRecordOnLaunch : bool, default is Undefined, optional
        Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: false.
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv6 network range for the subnet,
        in CIDR notation. The subnet size must use a /64 prefix length.
    ipv6Native : bool, default is Undefined, optional
        Indicates whether to create an IPv6-only subnet. Default: false.
    mapCustomerOwnedIpOnLaunch : bool, default is Undefined, optional
        Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The customer_owned_ipv4_pool and outpost_arn arguments must be specified when set to true. Default is false.
    mapPublicIpOnLaunch : bool, default is Undefined, optional
        Specify true to indicate
        that instances launched into the subnet should be assigned
        a public IP address. Default is false.
    outpostArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the Outpost.
    privateDnsHostnameTypeOnLaunch : str, default is Undefined, optional
        The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name, resource-name.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    vpcId : str, default is Undefined, optional
        The VPC ID.
    vpcIdRef : Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    assignIpv6AddressOnCreation?: bool

    availabilityZone?: str

    availabilityZoneId?: str

    cidrBlock?: str

    customerOwnedIpv4Pool?: str

    enableDns64?: bool

    enableLniAtDeviceIndex?: float

    enableResourceNameDnsARecordOnLaunch?: bool

    enableResourceNameDnsAaaaRecordOnLaunch?: bool

    ipv6CidrBlock?: str

    ipv6Native?: bool

    mapCustomerOwnedIpOnLaunch?: bool

    mapPublicIpOnLaunch?: bool

    outpostArn?: str

    privateDnsHostnameTypeOnLaunch?: str

    tags?: {str:str}

    vpcId?: str

    vpcIdRef?: Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDRef

    vpcIdSelector?: Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDSelector


schema Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDRefPolicy


schema Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SubnetSpecInitProviderVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SubnetSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SubnetSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SubnetSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1SubnetSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SubnetSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1SubnetSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1SubnetStatus:
    r"""
    SubnetStatus defines the observed state of Subnet.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1SubnetStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1SubnetStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1SubnetStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1SubnetStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1SubnetStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 subnet status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        The ARN of the subnet.
    assignIpv6AddressOnCreation : bool, default is Undefined, optional
        Specify true to indicate
        that network interfaces created in the specified subnet should be
        assigned an IPv6 address. Default is false
    availabilityZone : str, default is Undefined, optional
        AZ for the subnet.
    availabilityZoneId : str, default is Undefined, optional
        AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use availability_zone instead.
    cidrBlock : str, default is Undefined, optional
        The IPv4 CIDR block for the subnet.
    customerOwnedIpv4Pool : str, default is Undefined, optional
        The customer owned IPv4 address pool. Typically used with the map_customer_owned_ip_on_launch argument. The outpost_arn argument must be specified when configured.
    enableDns64 : bool, default is Undefined, optional
        Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: false.
    enableLniAtDeviceIndex : float, default is Undefined, optional
        Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
    enableResourceNameDnsARecordOnLaunch : bool, default is Undefined, optional
        Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: false.
    enableResourceNameDnsAaaaRecordOnLaunch : bool, default is Undefined, optional
        Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: false.
    id : str, default is Undefined, optional
        The ID of the subnet
    ipv6CidrBlock : str, default is Undefined, optional
        The IPv6 network range for the subnet,
        in CIDR notation. The subnet size must use a /64 prefix length.
    ipv6CidrBlockAssociationId : str, default is Undefined, optional
        The association ID for the IPv6 CIDR block.
    ipv6Native : bool, default is Undefined, optional
        Indicates whether to create an IPv6-only subnet. Default: false.
    mapCustomerOwnedIpOnLaunch : bool, default is Undefined, optional
        Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The customer_owned_ipv4_pool and outpost_arn arguments must be specified when set to true. Default is false.
    mapPublicIpOnLaunch : bool, default is Undefined, optional
        Specify true to indicate
        that instances launched into the subnet should be assigned
        a public IP address. Default is false.
    outpostArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the Outpost.
    ownerId : str, default is Undefined, optional
        The ID of the AWS account that owns the subnet.
    privateDnsHostnameTypeOnLaunch : str, default is Undefined, optional
        The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name, resource-name.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    vpcId : str, default is Undefined, optional
        The VPC ID.
    """


    arn?: str

    assignIpv6AddressOnCreation?: bool

    availabilityZone?: str

    availabilityZoneId?: str

    cidrBlock?: str

    customerOwnedIpv4Pool?: str

    enableDns64?: bool

    enableLniAtDeviceIndex?: float

    enableResourceNameDnsARecordOnLaunch?: bool

    enableResourceNameDnsAaaaRecordOnLaunch?: bool

    id?: str

    ipv6CidrBlock?: str

    ipv6CidrBlockAssociationId?: str

    ipv6Native?: bool

    mapCustomerOwnedIpOnLaunch?: bool

    mapPublicIpOnLaunch?: bool

    outpostArn?: str

    ownerId?: str

    privateDnsHostnameTypeOnLaunch?: str

    tags?: {str:str}

    tagsAll?: {str:str}

    vpcId?: str


schema Ec2AwsUpboundIoV1beta1SubnetStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


