"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema RepositoryFile:
    r"""
    RepositoryFile is the Schema for the RepositoryFiles API. Creates and manages files within a GitHub repository

    Attributes
    ----------
    apiVersion : str, default is "repo.github.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "RepositoryFile", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : RepoGithubUpboundIoV1alpha1RepositoryFileSpec, default is Undefined, required
        spec
    status : RepoGithubUpboundIoV1alpha1RepositoryFileStatus, default is Undefined, optional
        status
    """


    apiVersion: "repo.github.upbound.io/v1alpha1" = "repo.github.upbound.io/v1alpha1"

    kind: "RepositoryFile" = "RepositoryFile"

    metadata?: v1.ObjectMeta

    spec: RepoGithubUpboundIoV1alpha1RepositoryFileSpec

    status?: RepoGithubUpboundIoV1alpha1RepositoryFileStatus


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpec:
    r"""
    RepositoryFileSpec defines the desired state of RepositoryFile

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProvider, default is Undefined, required
        for provider
    initProvider : RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : RepoGithubUpboundIoV1alpha1RepositoryFileSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : RepoGithubUpboundIoV1alpha1RepositoryFileSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProvider

    initProvider?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecProviderConfigRef

    publishConnectionDetailsTo?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecWriteConnectionSecretToRef


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProvider:
    r"""
    repo github upbound io v1alpha1 repository file spec for provider

    Attributes
    ----------
    autocreateBranch : bool, default is Undefined, optional
        Git branch (defaults to the repository's default branch).
        The branch must already exist, it will not be created if it does not already exist.
        Automatically create the branch if it could not be found. Subsequent reads if the branch is deleted will occur from 'autocreate_branch_source_branch'
    autocreateBranchSourceBranch : str, default is Undefined, optional
        Git branch (defaults to the repository's default branch).
        The branch must already exist, it will not be created if it does not already exist.
        The branch name to start from, if 'autocreate_branch' is set. Defaults to 'main'.
    autocreateBranchSourceSha : str, default is Undefined, optional
        The SHA blob of the file.
        The commit hash to start from, if 'autocreate_branch' is set. Defaults to the tip of 'autocreate_branch_source_branch'. If provided, 'autocreate_branch_source_branch' is ignored.
    branch : str, default is Undefined, optional
        Git branch (defaults to the repository's default branch).
        The branch must already exist, it will not be created if it does not already exist.
        The branch name, defaults to the repository's default branch
    branchRef : RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchRef, default is Undefined, optional
        branch ref
    branchSelector : RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchSelector, default is Undefined, optional
        branch selector
    commitAuthor : str, default is Undefined, optional
        Committer author name to use. NOTE: GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This maybe useful when a branch protection rule requires signed commits.
        The commit author name, defaults to the authenticated user's name. GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App.
    commitEmail : str, default is Undefined, optional
        Committer email address to use. NOTE: GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This may be useful when a branch protection rule requires signed commits.
        The commit author email address, defaults to the authenticated user's email address. GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App.
    commitMessage : str, default is Undefined, optional
        The commit message when creating, updating or deleting the managed file.
        The commit message when creating, updating or deleting the file
    content : str, default is Undefined, optional
        The file content.
        The file's content
    file : str, default is Undefined, optional
        The path of the file to manage.
        The file path to manage
    overwriteOnCreate : bool, default is Undefined, optional
        Enable overwriting existing files. If set to true it will overwrite an existing file with the same name. If set to false it will fail if there is an existing file with the same name.
        Enable overwriting existing files, defaults to "false"
    repository : str, default is Undefined, optional
        The repository to create the file in.
        The repository name
    repositoryRef : RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositoryRef, default is Undefined, optional
        repository ref
    repositorySelector : RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositorySelector, default is Undefined, optional
        repository selector
    """


    autocreateBranch?: bool

    autocreateBranchSourceBranch?: str

    autocreateBranchSourceSha?: str

    branch?: str

    branchRef?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchRef

    branchSelector?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchSelector

    commitAuthor?: str

    commitEmail?: str

    commitMessage?: str

    content?: str

    file?: str

    overwriteOnCreate?: bool

    repository?: str

    repositoryRef?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositoryRef

    repositorySelector?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositorySelector


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchRef:
    r"""
    Reference to a Branch in repo to populate branch.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchRefPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchSelector:
    r"""
    Selector for a Branch in repo to populate branch.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchSelectorPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderBranchSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositoryRef:
    r"""
    Reference to a Repository in repo to populate repository.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositoryRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositoryRefPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositoryRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositorySelector:
    r"""
    Selector for a Repository in repo to populate repository.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositorySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositorySelectorPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecForProviderRepositorySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    autocreateBranch : bool, default is Undefined, optional
        Git branch (defaults to the repository's default branch).
        The branch must already exist, it will not be created if it does not already exist.
        Automatically create the branch if it could not be found. Subsequent reads if the branch is deleted will occur from 'autocreate_branch_source_branch'
    autocreateBranchSourceBranch : str, default is Undefined, optional
        Git branch (defaults to the repository's default branch).
        The branch must already exist, it will not be created if it does not already exist.
        The branch name to start from, if 'autocreate_branch' is set. Defaults to 'main'.
    autocreateBranchSourceSha : str, default is Undefined, optional
        The SHA blob of the file.
        The commit hash to start from, if 'autocreate_branch' is set. Defaults to the tip of 'autocreate_branch_source_branch'. If provided, 'autocreate_branch_source_branch' is ignored.
    branch : str, default is Undefined, optional
        Git branch (defaults to the repository's default branch).
        The branch must already exist, it will not be created if it does not already exist.
        The branch name, defaults to the repository's default branch
    branchRef : RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchRef, default is Undefined, optional
        branch ref
    branchSelector : RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchSelector, default is Undefined, optional
        branch selector
    commitAuthor : str, default is Undefined, optional
        Committer author name to use. NOTE: GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This maybe useful when a branch protection rule requires signed commits.
        The commit author name, defaults to the authenticated user's name. GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App.
    commitEmail : str, default is Undefined, optional
        Committer email address to use. NOTE: GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This may be useful when a branch protection rule requires signed commits.
        The commit author email address, defaults to the authenticated user's email address. GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App.
    commitMessage : str, default is Undefined, optional
        The commit message when creating, updating or deleting the managed file.
        The commit message when creating, updating or deleting the file
    content : str, default is Undefined, optional
        The file content.
        The file's content
    file : str, default is Undefined, optional
        The path of the file to manage.
        The file path to manage
    overwriteOnCreate : bool, default is Undefined, optional
        Enable overwriting existing files. If set to true it will overwrite an existing file with the same name. If set to false it will fail if there is an existing file with the same name.
        Enable overwriting existing files, defaults to "false"
    repository : str, default is Undefined, optional
        The repository to create the file in.
        The repository name
    repositoryRef : RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositoryRef, default is Undefined, optional
        repository ref
    repositorySelector : RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositorySelector, default is Undefined, optional
        repository selector
    """


    autocreateBranch?: bool

    autocreateBranchSourceBranch?: str

    autocreateBranchSourceSha?: str

    branch?: str

    branchRef?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchRef

    branchSelector?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchSelector

    commitAuthor?: str

    commitEmail?: str

    commitMessage?: str

    content?: str

    file?: str

    overwriteOnCreate?: bool

    repository?: str

    repositoryRef?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositoryRef

    repositorySelector?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositorySelector


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchRef:
    r"""
    Reference to a Branch in repo to populate branch.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchRefPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchSelector:
    r"""
    Selector for a Branch in repo to populate branch.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchSelectorPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderBranchSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositoryRef:
    r"""
    Reference to a Repository in repo to populate repository.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositoryRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositoryRefPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositoryRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositorySelector:
    r"""
    Selector for a Repository in repo to populate repository.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositorySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositorySelectorPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecInitProviderRepositorySelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepoGithubUpboundIoV1alpha1RepositoryFileSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecProviderConfigRefPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsToConfigRef

    metadata?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsToMetadata

    name: str


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsToConfigRefPolicy


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema RepoGithubUpboundIoV1alpha1RepositoryFileSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema RepoGithubUpboundIoV1alpha1RepositoryFileStatus:
    r"""
    RepositoryFileStatus defines the observed state of RepositoryFile.

    Attributes
    ----------
    atProvider : RepoGithubUpboundIoV1alpha1RepositoryFileStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [RepoGithubUpboundIoV1alpha1RepositoryFileStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: RepoGithubUpboundIoV1alpha1RepositoryFileStatusAtProvider

    conditions?: [RepoGithubUpboundIoV1alpha1RepositoryFileStatusConditionsItems0]

    observedGeneration?: int


schema RepoGithubUpboundIoV1alpha1RepositoryFileStatusAtProvider:
    r"""
    repo github upbound io v1alpha1 repository file status at provider

    Attributes
    ----------
    autocreateBranch : bool, default is Undefined, optional
        Git branch (defaults to the repository's default branch).
        The branch must already exist, it will not be created if it does not already exist.
        Automatically create the branch if it could not be found. Subsequent reads if the branch is deleted will occur from 'autocreate_branch_source_branch'
    autocreateBranchSourceBranch : str, default is Undefined, optional
        Git branch (defaults to the repository's default branch).
        The branch must already exist, it will not be created if it does not already exist.
        The branch name to start from, if 'autocreate_branch' is set. Defaults to 'main'.
    autocreateBranchSourceSha : str, default is Undefined, optional
        The SHA blob of the file.
        The commit hash to start from, if 'autocreate_branch' is set. Defaults to the tip of 'autocreate_branch_source_branch'. If provided, 'autocreate_branch_source_branch' is ignored.
    branch : str, default is Undefined, optional
        Git branch (defaults to the repository's default branch).
        The branch must already exist, it will not be created if it does not already exist.
        The branch name, defaults to the repository's default branch
    commitAuthor : str, default is Undefined, optional
        Committer author name to use. NOTE: GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This maybe useful when a branch protection rule requires signed commits.
        The commit author name, defaults to the authenticated user's name. GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App.
    commitEmail : str, default is Undefined, optional
        Committer email address to use. NOTE: GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This may be useful when a branch protection rule requires signed commits.
        The commit author email address, defaults to the authenticated user's email address. GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App.
    commitMessage : str, default is Undefined, optional
        The commit message when creating, updating or deleting the managed file.
        The commit message when creating, updating or deleting the file
    commitSha : str, default is Undefined, optional
        The SHA of the commit that modified the file.
        The SHA of the commit that modified the file
    content : str, default is Undefined, optional
        The file content.
        The file's content
    file : str, default is Undefined, optional
        The path of the file to manage.
        The file path to manage
    id : str, default is Undefined, optional
        id
    overwriteOnCreate : bool, default is Undefined, optional
        Enable overwriting existing files. If set to true it will overwrite an existing file with the same name. If set to false it will fail if there is an existing file with the same name.
        Enable overwriting existing files, defaults to "false"
    ref : str, default is Undefined, optional
        The name of the commit/branch/tag.
        The name of the commit/branch/tag
    repository : str, default is Undefined, optional
        The repository to create the file in.
        The repository name
    sha : str, default is Undefined, optional
        The SHA blob of the file.
        The blob SHA of the file
    """


    autocreateBranch?: bool

    autocreateBranchSourceBranch?: str

    autocreateBranchSourceSha?: str

    branch?: str

    commitAuthor?: str

    commitEmail?: str

    commitMessage?: str

    commitSha?: str

    content?: str

    file?: str

    id?: str

    overwriteOnCreate?: bool

    ref?: str

    repository?: str

    sha?: str


schema RepoGithubUpboundIoV1alpha1RepositoryFileStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


