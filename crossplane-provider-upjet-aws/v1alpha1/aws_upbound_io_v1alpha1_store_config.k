"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema StoreConfig:
    r"""
    A StoreConfig configures how AWS controller should store connection details.

    Attributes
    ----------
    apiVersion : str, default is "aws.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "StoreConfig", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AwsUpboundIoV1alpha1StoreConfigSpec, default is Undefined, required
        spec
    status : AwsUpboundIoV1alpha1StoreConfigStatus, default is Undefined, optional
        status
    """


    apiVersion: "aws.upbound.io/v1alpha1" = "aws.upbound.io/v1alpha1"

    kind: "StoreConfig" = "StoreConfig"

    metadata?: v1.ObjectMeta

    spec: AwsUpboundIoV1alpha1StoreConfigSpec

    status?: AwsUpboundIoV1alpha1StoreConfigStatus


schema AwsUpboundIoV1alpha1StoreConfigSpec:
    r"""
    A StoreConfigSpec defines the desired state of a ProviderConfig.

    Attributes
    ----------
    defaultScope : str, default is Undefined, required
        DefaultScope used for scoping secrets for "cluster-scoped" resources.
        If store type is "Kubernetes", this would mean the default namespace to
        store connection secrets for cluster scoped resources.
        In case of "Vault", this would be used as the default parent path.
        Typically, should be set as Crossplane installation namespace.
    kubernetes : AwsUpboundIoV1alpha1StoreConfigSpecKubernetes, default is Undefined, optional
        kubernetes
    plugin : AwsUpboundIoV1alpha1StoreConfigSpecPlugin, default is Undefined, optional
        plugin
    $type : str, default is "Kubernetes", optional
        Type configures which secret store to be used. Only the configuration
        block for this store will be used and others will be ignored if provided.
        Default is Kubernetes.
    """


    defaultScope: str

    kubernetes?: AwsUpboundIoV1alpha1StoreConfigSpecKubernetes

    plugin?: AwsUpboundIoV1alpha1StoreConfigSpecPlugin

    $type?: "Kubernetes" | "Vault" | "Plugin" = "Kubernetes"


schema AwsUpboundIoV1alpha1StoreConfigSpecKubernetes:
    r"""
    Kubernetes configures a Kubernetes secret store.
    If the "type" is "Kubernetes" but no config provided, in cluster config
    will be used.

    Attributes
    ----------
    auth : AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuth, default is Undefined, required
        auth
    """


    auth: AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuth


schema AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuth:
    r"""
    Credentials used to connect to the Kubernetes API.

    Attributes
    ----------
    env : AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuthEnv, default is Undefined, optional
        env
    fs : AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuthFs, default is Undefined, optional
        fs
    secretRef : AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuthSecretRef, default is Undefined, optional
        secret ref
    source : str, default is Undefined, required
        Source of the credentials.
    """


    env?: AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuthEnv

    fs?: AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuthFs

    secretRef?: AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuthSecretRef

    source: "None" | "Secret" | "Environment" | "Filesystem"


schema AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuthEnv:
    r"""
    Env is a reference to an environment variable that contains credentials
    that must be used to connect to the provider.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of an environment variable.
    """


    name: str


schema AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuthFs:
    r"""
    Fs is a reference to a filesystem location that contains credentials that
    must be used to connect to the provider.

    Attributes
    ----------
    path : str, default is Undefined, required
        Path is a filesystem path.
    """


    path: str


schema AwsUpboundIoV1alpha1StoreConfigSpecKubernetesAuthSecretRef:
    r"""
    A SecretRef is a reference to a secret key that contains the credentials
    that must be used to connect to the provider.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema AwsUpboundIoV1alpha1StoreConfigSpecPlugin:
    r"""
    Plugin configures External secret store as a plugin.

    Attributes
    ----------
    configRef : AwsUpboundIoV1alpha1StoreConfigSpecPluginConfigRef, default is Undefined, optional
        config ref
    endpoint : str, default is Undefined, optional
        Endpoint is the endpoint of the gRPC server.
    """


    configRef?: AwsUpboundIoV1alpha1StoreConfigSpecPluginConfigRef

    endpoint?: str


schema AwsUpboundIoV1alpha1StoreConfigSpecPluginConfigRef:
    r"""
    ConfigRef contains store config reference info.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion of the referenced config.
    kind : str, default is Undefined, required
        Kind of the referenced config.
    name : str, default is Undefined, required
        Name of the referenced config.
    """


    apiVersion: str

    kind: str

    name: str


schema AwsUpboundIoV1alpha1StoreConfigStatus:
    r"""
    A StoreConfigStatus represents the status of a StoreConfig.

    Attributes
    ----------
    conditions : [AwsUpboundIoV1alpha1StoreConfigStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    conditions?: [AwsUpboundIoV1alpha1StoreConfigStatusConditionsItems0]


schema AwsUpboundIoV1alpha1StoreConfigStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


