"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema User:
    r"""
    User is the Schema for the Users API. Provides a AWS Transfer User resource.

    Attributes
    ----------
    apiVersion : str, default is "transfer.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "User", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : TransferAwsUpboundIoV1beta1UserSpec, default is Undefined, required
        spec
    status : TransferAwsUpboundIoV1beta1UserStatus, default is Undefined, optional
        status
    """


    apiVersion: "transfer.aws.upbound.io/v1beta1" = "transfer.aws.upbound.io/v1beta1"

    kind: "User" = "User"

    metadata?: v1.ObjectMeta

    spec: TransferAwsUpboundIoV1beta1UserSpec

    status?: TransferAwsUpboundIoV1beta1UserStatus


schema TransferAwsUpboundIoV1beta1UserSpec:
    r"""
    UserSpec defines the desired state of User

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : TransferAwsUpboundIoV1beta1UserSpecForProvider, default is Undefined, required
        for provider
    initProvider : TransferAwsUpboundIoV1beta1UserSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : TransferAwsUpboundIoV1beta1UserSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : TransferAwsUpboundIoV1beta1UserSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: TransferAwsUpboundIoV1beta1UserSpecForProvider

    initProvider?: TransferAwsUpboundIoV1beta1UserSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: TransferAwsUpboundIoV1beta1UserSpecProviderConfigRef

    publishConnectionDetailsTo?: TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: TransferAwsUpboundIoV1beta1UserSpecWriteConnectionSecretToRef


schema TransferAwsUpboundIoV1beta1UserSpecForProvider:
    r"""
    transfer aws upbound io v1beta1 user spec for provider

    Attributes
    ----------
    homeDirectory : str, default is Undefined, optional
        The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a /.  The first item in the path is the name of the home bucket (accessible as ${Transfer:HomeBucket} in the policy) and the rest is the home directory (accessible as ${Transfer:HomeDirectory} in the policy). For example, /example-bucket-1234/username would set the home bucket to example-bucket-1234 and the home directory to username.
    homeDirectoryMappings : [TransferAwsUpboundIoV1beta1UserSpecForProviderHomeDirectoryMappingsItems0], default is Undefined, optional
        Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
    homeDirectoryType : str, default is Undefined, optional
        The type of landing directory (folder) you mapped for your users' home directory. Valid values are PATH and LOGICAL.
    policy : str, default is Undefined, optional
        An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include ${Transfer:UserName}, ${Transfer:HomeDirectory}, and ${Transfer:HomeBucket}.  These are evaluated on-the-fly when navigating the bucket.
    posixProfile : [TransferAwsUpboundIoV1beta1UserSpecForProviderPosixProfileItems0], default is Undefined, optional
        Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See Posix Profile below.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    role : str, default is Undefined, optional
        Amazon Resource Name (ARN) of an IAM role that allows the service to control your userâ€™s access to your Amazon S3 bucket.
    roleRef : TransferAwsUpboundIoV1beta1UserSpecForProviderRoleRef, default is Undefined, optional
        role ref
    roleSelector : TransferAwsUpboundIoV1beta1UserSpecForProviderRoleSelector, default is Undefined, optional
        role selector
    serverId : str, default is Undefined, optional
        The Server ID of the Transfer Server (e.g., s-12345678)
    serverIdRef : TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDRef, default is Undefined, optional
        server Id ref
    serverIdSelector : TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDSelector, default is Undefined, optional
        server Id selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    homeDirectory?: str

    homeDirectoryMappings?: [TransferAwsUpboundIoV1beta1UserSpecForProviderHomeDirectoryMappingsItems0]

    homeDirectoryType?: str

    policy?: str

    posixProfile?: [TransferAwsUpboundIoV1beta1UserSpecForProviderPosixProfileItems0]

    region: str

    role?: str

    roleRef?: TransferAwsUpboundIoV1beta1UserSpecForProviderRoleRef

    roleSelector?: TransferAwsUpboundIoV1beta1UserSpecForProviderRoleSelector

    serverId?: str

    serverIdRef?: TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDRef

    serverIdSelector?: TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDSelector

    tags?: {str:str}


schema TransferAwsUpboundIoV1beta1UserSpecForProviderHomeDirectoryMappingsItems0:
    r"""
    transfer aws upbound io v1beta1 user spec for provider home directory mappings items0

    Attributes
    ----------
    entry : str, default is Undefined, optional
        Represents an entry and a target.
    target : str, default is Undefined, optional
        Represents the map target.
    """


    entry?: str

    target?: str


schema TransferAwsUpboundIoV1beta1UserSpecForProviderPosixProfileItems0:
    r"""
    transfer aws upbound io v1beta1 user spec for provider posix profile items0

    Attributes
    ----------
    gid : float, default is Undefined, optional
        The POSIX group ID used for all EFS operations by this user.
    secondaryGids : [float], default is Undefined, optional
        The secondary POSIX group IDs used for all EFS operations by this user.
    uid : float, default is Undefined, optional
        The POSIX user ID used for all EFS operations by this user.
    """


    gid?: float

    secondaryGids?: [float]

    uid?: float


schema TransferAwsUpboundIoV1beta1UserSpecForProviderRoleRef:
    r"""
    Reference to a Role in iam to populate role.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : TransferAwsUpboundIoV1beta1UserSpecForProviderRoleRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: TransferAwsUpboundIoV1beta1UserSpecForProviderRoleRefPolicy


schema TransferAwsUpboundIoV1beta1UserSpecForProviderRoleRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema TransferAwsUpboundIoV1beta1UserSpecForProviderRoleSelector:
    r"""
    Selector for a Role in iam to populate role.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : TransferAwsUpboundIoV1beta1UserSpecForProviderRoleSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: TransferAwsUpboundIoV1beta1UserSpecForProviderRoleSelectorPolicy


schema TransferAwsUpboundIoV1beta1UserSpecForProviderRoleSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDRef:
    r"""
    Reference to a Server in transfer to populate serverId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDRefPolicy


schema TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDSelector:
    r"""
    Selector for a Server in transfer to populate serverId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDSelectorPolicy


schema TransferAwsUpboundIoV1beta1UserSpecForProviderServerIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema TransferAwsUpboundIoV1beta1UserSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    homeDirectory : str, default is Undefined, optional
        The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a /.  The first item in the path is the name of the home bucket (accessible as ${Transfer:HomeBucket} in the policy) and the rest is the home directory (accessible as ${Transfer:HomeDirectory} in the policy). For example, /example-bucket-1234/username would set the home bucket to example-bucket-1234 and the home directory to username.
    homeDirectoryMappings : [TransferAwsUpboundIoV1beta1UserSpecInitProviderHomeDirectoryMappingsItems0], default is Undefined, optional
        Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
    homeDirectoryType : str, default is Undefined, optional
        The type of landing directory (folder) you mapped for your users' home directory. Valid values are PATH and LOGICAL.
    policy : str, default is Undefined, optional
        An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include ${Transfer:UserName}, ${Transfer:HomeDirectory}, and ${Transfer:HomeBucket}.  These are evaluated on-the-fly when navigating the bucket.
    posixProfile : [TransferAwsUpboundIoV1beta1UserSpecInitProviderPosixProfileItems0], default is Undefined, optional
        Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See Posix Profile below.
    role : str, default is Undefined, optional
        Amazon Resource Name (ARN) of an IAM role that allows the service to control your userâ€™s access to your Amazon S3 bucket.
    roleRef : TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleRef, default is Undefined, optional
        role ref
    roleSelector : TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleSelector, default is Undefined, optional
        role selector
    serverId : str, default is Undefined, optional
        The Server ID of the Transfer Server (e.g., s-12345678)
    serverIdRef : TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDRef, default is Undefined, optional
        server Id ref
    serverIdSelector : TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDSelector, default is Undefined, optional
        server Id selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    homeDirectory?: str

    homeDirectoryMappings?: [TransferAwsUpboundIoV1beta1UserSpecInitProviderHomeDirectoryMappingsItems0]

    homeDirectoryType?: str

    policy?: str

    posixProfile?: [TransferAwsUpboundIoV1beta1UserSpecInitProviderPosixProfileItems0]

    role?: str

    roleRef?: TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleRef

    roleSelector?: TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleSelector

    serverId?: str

    serverIdRef?: TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDRef

    serverIdSelector?: TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDSelector

    tags?: {str:str}


schema TransferAwsUpboundIoV1beta1UserSpecInitProviderHomeDirectoryMappingsItems0:
    r"""
    transfer aws upbound io v1beta1 user spec init provider home directory mappings items0

    Attributes
    ----------
    entry : str, default is Undefined, optional
        Represents an entry and a target.
    target : str, default is Undefined, optional
        Represents the map target.
    """


    entry?: str

    target?: str


schema TransferAwsUpboundIoV1beta1UserSpecInitProviderPosixProfileItems0:
    r"""
    transfer aws upbound io v1beta1 user spec init provider posix profile items0

    Attributes
    ----------
    gid : float, default is Undefined, optional
        The POSIX group ID used for all EFS operations by this user.
    secondaryGids : [float], default is Undefined, optional
        The secondary POSIX group IDs used for all EFS operations by this user.
    uid : float, default is Undefined, optional
        The POSIX user ID used for all EFS operations by this user.
    """


    gid?: float

    secondaryGids?: [float]

    uid?: float


schema TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleRef:
    r"""
    Reference to a Role in iam to populate role.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleRefPolicy


schema TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleSelector:
    r"""
    Selector for a Role in iam to populate role.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleSelectorPolicy


schema TransferAwsUpboundIoV1beta1UserSpecInitProviderRoleSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDRef:
    r"""
    Reference to a Server in transfer to populate serverId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDRefPolicy


schema TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDSelector:
    r"""
    Selector for a Server in transfer to populate serverId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDSelectorPolicy


schema TransferAwsUpboundIoV1beta1UserSpecInitProviderServerIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema TransferAwsUpboundIoV1beta1UserSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : TransferAwsUpboundIoV1beta1UserSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: TransferAwsUpboundIoV1beta1UserSpecProviderConfigRefPolicy


schema TransferAwsUpboundIoV1beta1UserSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRef

    metadata?: TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToMetadata

    name: str


schema TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRefPolicy


schema TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema TransferAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema TransferAwsUpboundIoV1beta1UserSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema TransferAwsUpboundIoV1beta1UserStatus:
    r"""
    UserStatus defines the observed state of User.

    Attributes
    ----------
    atProvider : TransferAwsUpboundIoV1beta1UserStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [TransferAwsUpboundIoV1beta1UserStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: TransferAwsUpboundIoV1beta1UserStatusAtProvider

    conditions?: [TransferAwsUpboundIoV1beta1UserStatusConditionsItems0]

    observedGeneration?: int


schema TransferAwsUpboundIoV1beta1UserStatusAtProvider:
    r"""
    transfer aws upbound io v1beta1 user status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        Amazon Resource Name (ARN) of Transfer User
    homeDirectory : str, default is Undefined, optional
        The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a /.  The first item in the path is the name of the home bucket (accessible as ${Transfer:HomeBucket} in the policy) and the rest is the home directory (accessible as ${Transfer:HomeDirectory} in the policy). For example, /example-bucket-1234/username would set the home bucket to example-bucket-1234 and the home directory to username.
    homeDirectoryMappings : [TransferAwsUpboundIoV1beta1UserStatusAtProviderHomeDirectoryMappingsItems0], default is Undefined, optional
        Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
    homeDirectoryType : str, default is Undefined, optional
        The type of landing directory (folder) you mapped for your users' home directory. Valid values are PATH and LOGICAL.
    id : str, default is Undefined, optional
        id
    policy : str, default is Undefined, optional
        An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include ${Transfer:UserName}, ${Transfer:HomeDirectory}, and ${Transfer:HomeBucket}.  These are evaluated on-the-fly when navigating the bucket.
    posixProfile : [TransferAwsUpboundIoV1beta1UserStatusAtProviderPosixProfileItems0], default is Undefined, optional
        Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See Posix Profile below.
    role : str, default is Undefined, optional
        Amazon Resource Name (ARN) of an IAM role that allows the service to control your userâ€™s access to your Amazon S3 bucket.
    serverId : str, default is Undefined, optional
        The Server ID of the Transfer Server (e.g., s-12345678)
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    """


    arn?: str

    homeDirectory?: str

    homeDirectoryMappings?: [TransferAwsUpboundIoV1beta1UserStatusAtProviderHomeDirectoryMappingsItems0]

    homeDirectoryType?: str

    id?: str

    policy?: str

    posixProfile?: [TransferAwsUpboundIoV1beta1UserStatusAtProviderPosixProfileItems0]

    role?: str

    serverId?: str

    tags?: {str:str}

    tagsAll?: {str:str}


schema TransferAwsUpboundIoV1beta1UserStatusAtProviderHomeDirectoryMappingsItems0:
    r"""
    transfer aws upbound io v1beta1 user status at provider home directory mappings items0

    Attributes
    ----------
    entry : str, default is Undefined, optional
        Represents an entry and a target.
    target : str, default is Undefined, optional
        Represents the map target.
    """


    entry?: str

    target?: str


schema TransferAwsUpboundIoV1beta1UserStatusAtProviderPosixProfileItems0:
    r"""
    transfer aws upbound io v1beta1 user status at provider posix profile items0

    Attributes
    ----------
    gid : float, default is Undefined, optional
        The POSIX group ID used for all EFS operations by this user.
    secondaryGids : [float], default is Undefined, optional
        The secondary POSIX group IDs used for all EFS operations by this user.
    uid : float, default is Undefined, optional
        The POSIX user ID used for all EFS operations by this user.
    """


    gid?: float

    secondaryGids?: [float]

    uid?: float


schema TransferAwsUpboundIoV1beta1UserStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


