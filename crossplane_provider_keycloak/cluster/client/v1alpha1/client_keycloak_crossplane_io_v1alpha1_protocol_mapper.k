"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema ProtocolMapper:
    r"""
    ProtocolMapper is the Schema for the ProtocolMappers API.

    Attributes
    ----------
    apiVersion : str, default is "client.keycloak.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ProtocolMapper", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpec, default is Undefined, required
        spec
    status : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperStatus, default is Undefined, optional
        status
    """


    apiVersion: "client.keycloak.crossplane.io/v1alpha1" = "client.keycloak.crossplane.io/v1alpha1"

    kind: "ProtocolMapper" = "ProtocolMapper"

    metadata?: v1.ObjectMeta

    spec: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpec

    status?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperStatus


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpec:
    r"""
    ProtocolMapperSpec defines the desired state of ProtocolMapper

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProvider, default is Undefined, required
        for provider
    initProvider : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    writeConnectionSecretToRef : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProvider

    initProvider?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecProviderConfigRef

    writeConnectionSecretToRef?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecWriteConnectionSecretToRef


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProvider:
    r"""
    client keycloak crossplane io v1alpha1 protocol mapper spec for provider

    Attributes
    ----------
    clientId : str, default is Undefined, optional
        The ID of the client this protocol mapper should be added to. Conflicts with client_scope_id. This argument is required if client_scope_id is not set.
        The mapper's associated client. Cannot be used at the same time as client_scope_id.
    clientIdRef : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDRef, default is Undefined, optional
        client Id ref
    clientIdSelector : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDSelector, default is Undefined, optional
        client Id selector
    clientScopeId : str, default is Undefined, optional
        The ID of the client scope this protocol mapper should be added to. Conflicts with client_id. This argument is required if client_id is not set.
        The mapper's associated client scope. Cannot be used at the same time as client_id.
    clientScopeIdRef : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDRef, default is Undefined, optional
        client scope Id ref
    clientScopeIdSelector : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDSelector, default is Undefined, optional
        client scope Id selector
    config : {str:str}, default is Undefined, optional
        A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.
    name : str, default is Undefined, optional
        The display name of this protocol mapper in the GUI.
        A human-friendly name that will appear in the Keycloak console.
    $protocol : str, default is Undefined, optional
        The type of client (either openid-connect or saml). The type must match the type of the client.
        The protocol of the client (openid-connect / saml).
    protocolMapper : str, default is Undefined, optional
        The name of the protocol mapper. The protocol mapper must be compatible with the specified client.
        The type of the protocol mapper.
    realmId : str, default is Undefined, optional
        The realm this protocol mapper exists within.
        The realm id where the associated client or client scope exists.
    realmIdRef : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDRef, default is Undefined, optional
        realm Id ref
    realmIdSelector : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDSelector, default is Undefined, optional
        realm Id selector
    """


    clientId?: str

    clientIdRef?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDRef

    clientIdSelector?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDSelector

    clientScopeId?: str

    clientScopeIdRef?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDRef

    clientScopeIdSelector?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDSelector

    config?: {str:str}

    name?: str

    $protocol?: str

    protocolMapper?: str

    realmId?: str

    realmIdRef?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDRef

    realmIdSelector?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDSelector


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDRef:
    r"""
    Reference to a Client in openidclient to populate clientId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDRefPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDSelector:
    r"""
    Selector for a Client in openidclient to populate clientId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDSelectorPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDRef:
    r"""
    Reference to a ClientScope in openidclient to populate clientScopeId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDRefPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDSelector:
    r"""
    Selector for a ClientScope in openidclient to populate clientScopeId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDSelectorPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderClientScopeIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDRef:
    r"""
    Reference to a Realm in realm to populate realmId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDRefPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDSelector:
    r"""
    Selector for a Realm in realm to populate realmId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDSelectorPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecForProviderRealmIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    clientId : str, default is Undefined, optional
        The ID of the client this protocol mapper should be added to. Conflicts with client_scope_id. This argument is required if client_scope_id is not set.
        The mapper's associated client. Cannot be used at the same time as client_scope_id.
    clientIdRef : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDRef, default is Undefined, optional
        client Id ref
    clientIdSelector : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDSelector, default is Undefined, optional
        client Id selector
    clientScopeId : str, default is Undefined, optional
        The ID of the client scope this protocol mapper should be added to. Conflicts with client_id. This argument is required if client_id is not set.
        The mapper's associated client scope. Cannot be used at the same time as client_id.
    clientScopeIdRef : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDRef, default is Undefined, optional
        client scope Id ref
    clientScopeIdSelector : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDSelector, default is Undefined, optional
        client scope Id selector
    config : {str:str}, default is Undefined, optional
        A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.
    name : str, default is Undefined, optional
        The display name of this protocol mapper in the GUI.
        A human-friendly name that will appear in the Keycloak console.
    $protocol : str, default is Undefined, optional
        The type of client (either openid-connect or saml). The type must match the type of the client.
        The protocol of the client (openid-connect / saml).
    protocolMapper : str, default is Undefined, optional
        The name of the protocol mapper. The protocol mapper must be compatible with the specified client.
        The type of the protocol mapper.
    realmId : str, default is Undefined, optional
        The realm this protocol mapper exists within.
        The realm id where the associated client or client scope exists.
    realmIdRef : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDRef, default is Undefined, optional
        realm Id ref
    realmIdSelector : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDSelector, default is Undefined, optional
        realm Id selector
    """


    clientId?: str

    clientIdRef?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDRef

    clientIdSelector?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDSelector

    clientScopeId?: str

    clientScopeIdRef?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDRef

    clientScopeIdSelector?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDSelector

    config?: {str:str}

    name?: str

    $protocol?: str

    protocolMapper?: str

    realmId?: str

    realmIdRef?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDRef

    realmIdSelector?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDSelector


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDRef:
    r"""
    Reference to a Client in openidclient to populate clientId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDRefPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDSelector:
    r"""
    Selector for a Client in openidclient to populate clientId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDSelectorPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDRef:
    r"""
    Reference to a ClientScope in openidclient to populate clientScopeId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDRefPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDSelector:
    r"""
    Selector for a ClientScope in openidclient to populate clientScopeId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDSelectorPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderClientScopeIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDRef:
    r"""
    Reference to a Realm in realm to populate realmId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDRefPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDSelector:
    r"""
    Selector for a Realm in realm to populate realmId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDSelectorPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecInitProviderRealmIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecProviderConfigRefPolicy


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperStatus:
    r"""
    ProtocolMapperStatus defines the observed state of ProtocolMapper.

    Attributes
    ----------
    atProvider : ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperStatusAtProvider

    conditions?: [ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperStatusConditionsItems0]

    observedGeneration?: int


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperStatusAtProvider:
    r"""
    client keycloak crossplane io v1alpha1 protocol mapper status at provider

    Attributes
    ----------
    clientId : str, default is Undefined, optional
        The ID of the client this protocol mapper should be added to. Conflicts with client_scope_id. This argument is required if client_scope_id is not set.
        The mapper's associated client. Cannot be used at the same time as client_scope_id.
    clientScopeId : str, default is Undefined, optional
        The ID of the client scope this protocol mapper should be added to. Conflicts with client_id. This argument is required if client_id is not set.
        The mapper's associated client scope. Cannot be used at the same time as client_id.
    config : {str:str}, default is Undefined, optional
        A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.
    id : str, default is Undefined, optional
        id
    name : str, default is Undefined, optional
        The display name of this protocol mapper in the GUI.
        A human-friendly name that will appear in the Keycloak console.
    $protocol : str, default is Undefined, optional
        The type of client (either openid-connect or saml). The type must match the type of the client.
        The protocol of the client (openid-connect / saml).
    protocolMapper : str, default is Undefined, optional
        The name of the protocol mapper. The protocol mapper must be compatible with the specified client.
        The type of the protocol mapper.
    realmId : str, default is Undefined, optional
        The realm this protocol mapper exists within.
        The realm id where the associated client or client scope exists.
    """


    clientId?: str

    clientScopeId?: str

    config?: {str:str}

    id?: str

    name?: str

    $protocol?: str

    protocolMapper?: str

    realmId?: str


schema ClientKeycloakCrossplaneIoV1alpha1ProtocolMapperStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


