"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Client:
    r"""
    Client is the Schema for the Clients API.

    Attributes
    ----------
    apiVersion : str, default is "openidclient.keycloak.m.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Client", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpec, default is Undefined, required
        spec
    status : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatus, default is Undefined, optional
        status
    """


    apiVersion: "openidclient.keycloak.m.crossplane.io/v1alpha1" = "openidclient.keycloak.m.crossplane.io/v1alpha1"

    kind: "Client" = "Client"

    metadata?: v1.ObjectMeta

    spec: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpec

    status?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatus


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpec:
    r"""
    ClientSpec defines the desired state of Client

    Attributes
    ----------
    forProvider : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProvider, default is Undefined, required
        for provider
    initProvider : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    writeConnectionSecretToRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    forProvider: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProvider

    initProvider?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecProviderConfigRef

    writeConnectionSecretToRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecWriteConnectionSecretToRef


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProvider:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client spec for provider

    Attributes
    ----------
    accessTokenLifespan : str, default is Undefined, optional
        The amount of time in seconds before an access token expires. This will override the default for the realm.
    accessType : str, default is Undefined, optional
        Specifies the type of client, which can be one of the following:
    adminUrl : str, default is Undefined, optional
        URL to the admin interface of the client.
    allowRefreshTokenInStandardTokenExchange : str, default is Undefined, optional
        allow refresh token in standard token exchange
    alwaysDisplayInConsole : bool, default is Undefined, optional
        Always list this client in the Account UI, even if the user does not have an active session.
    authenticationFlowBindingOverrides : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0], default is Undefined, optional
        Override realm authentication flow bindings
    authorization : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthorizationItems0], default is Undefined, optional
        When this block is present, fine-grained authorization will be enabled for this client. The client's access_type must be CONFIDENTIAL, and service_accounts_enabled must be true. This block has the following arguments:
    backchannelLogoutRevokeOfflineSessions : bool, default is Undefined, optional
        Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
    backchannelLogoutSessionRequired : bool, default is Undefined, optional
        When true, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to true.
    backchannelLogoutUrl : str, default is Undefined, optional
        The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
    baseUrl : str, default is Undefined, optional
        Default URL to use when the auth server needs to redirect or link back to the client.
    clientAuthenticatorType : str, default is Undefined, optional
        Defaults to client-secret. The authenticator type for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. A default Keycloak installation will have the following available types:
    clientId : str, default is Undefined, optional
        The Client ID for this client, referenced in the URI during authentication and in issued tokens.
    clientOfflineSessionIdleTimeout : str, default is Undefined, optional
        Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
    clientOfflineSessionMaxLifespan : str, default is Undefined, optional
        Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
    clientSecretRegenerateWhenChanged : {str:str}, default is Undefined, optional
        Arbitrary map of values that, when changed, will trigger rotation of the secret. NOTE! Conflicts with client_secret, client_secret_wo and client_secret_wo_version attribute and can't be used together
        Arbitrary map of values that, when changed, will trigger rotation of the secret
    clientSecretSecretRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderClientSecretSecretRef, default is Undefined, optional
        client secret secret ref
    clientSecretWoSecretRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderClientSecretWoSecretRef, default is Undefined, optional
        client secret wo secret ref
    clientSecretWoVersion : float, default is Undefined, optional
        The value of this argument is stored in the state and plan files. Required when using client_secret_wo.
        Version of the Client secret write-only argument
    clientSessionIdleTimeout : str, default is Undefined, optional
        Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
    clientSessionMaxLifespan : str, default is Undefined, optional
        Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
    consentRequired : bool, default is Undefined, optional
        When true, users have to consent to client access. Defaults to false.
    consentScreenText : str, default is Undefined, optional
        The text to display on the consent screen about permissions specific to this client. This is applicable only when display_on_consent_screen is true.
    description : str, default is Undefined, optional
        The description of this client in the GUI.
    directAccessGrantsEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false.
    displayOnConsentScreen : bool, default is Undefined, optional
        When true, the consent screen will display information about the client itself. Defaults to false. This is applicable only when consent_required is true.
    enabled : bool, default is Undefined, optional
        When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
    excludeIssuerFromAuthResponse : bool, default is Undefined, optional
        When true, the parameter iss will not be included in OpenID Connect Authentication Response.
    excludeSessionStateFromAuthResponse : bool, default is Undefined, optional
        When true, the parameter session_state will not be included in OpenID Connect Authentication Response.
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as it may conflict with top-level configuration attributes in future provider updates. For example, the extra_config map can be used to set Authentication Context Class Reference (ACR) to Level of Authentication (LoA) mapping
    frontchannelLogoutEnabled : bool, default is Undefined, optional
        When true, frontchannel logout will be enabled for this client. Specify the url with frontchannel_logout_url. Defaults to false.
    frontchannelLogoutUrl : str, default is Undefined, optional
        The frontchannel logout url. This is applicable only when frontchannel_logout_enabled is true.
    fullScopeAllowed : bool, default is Undefined, optional
        Allow to include all roles mappings in the access token.
    implicitFlowEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Implicit Grant will be enabled for this client. Defaults to false.
    $import : bool, default is Undefined, optional
        When true, the client with the specified client_id is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as account and admin-cli. Note, that the client will not be removed during destruction if import is true.
    loginTheme : str, default is Undefined, optional
        The client login theme. This will override the default theme for the realm.
    name : str, default is Undefined, optional
        The display name of this client in the GUI.
    oauth2DeviceAuthorizationGrantEnabled : bool, default is Undefined, optional
        Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
    oauth2DeviceCodeLifespan : str, default is Undefined, optional
        The maximum amount of time a client has to finish the device code flow before it expires.
    oauth2DevicePollingInterval : str, default is Undefined, optional
        The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
    pkceCodeChallengeMethod : str, default is Undefined, optional
        The challenge method to use for Proof Key for Code Exchange. Can be either plain or S256 or set to empty value “.
    realmId : str, default is Undefined, optional
        The realm this client is attached to.
    realmIdRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRef, default is Undefined, optional
        realm Id ref
    realmIdSelector : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelector, default is Undefined, optional
        realm Id selector
    rootUrl : str, default is Undefined, optional
        When specified, this URL is prepended to any relative URLs found within valid_redirect_uris, web_origins, and admin_url. NOTE: Due to limitations in the Keycloak API, when the root_url attribute is used, the valid_redirect_uris, web_origins, and admin_url attributes will be required.
    serviceAccountsEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false.
    standardFlowEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false.
    standardTokenExchangeEnabled : bool, default is Undefined, optional
        When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
    useRefreshTokens : bool, default is Undefined, optional
        If this is true, a refresh_token will be created and added to the token response. If this is false then no refresh_token will be generated.  Defaults to true.
    useRefreshTokensClientCredentials : bool, default is Undefined, optional
        If this is true, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is false then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to false.
    validPostLogoutRedirectUris : [str], default is Undefined, optional
        A list of valid URIs a browser is permitted to redirect to after a successful logout.
    validRedirectUris : [str], default is Undefined, optional
        A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
        wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled
        is set to true.
    webOrigins : [str], default is Undefined, optional
        A list of allowed CORS origins. To permit all valid redirect URIs, add +. Note that this will not include the * wildcard. To permit all origins, explicitly add *.
    """


    accessTokenLifespan?: str

    accessType?: str

    adminUrl?: str

    allowRefreshTokenInStandardTokenExchange?: str

    alwaysDisplayInConsole?: bool

    authenticationFlowBindingOverrides?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0]

    authorization?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthorizationItems0]

    backchannelLogoutRevokeOfflineSessions?: bool

    backchannelLogoutSessionRequired?: bool

    backchannelLogoutUrl?: str

    baseUrl?: str

    clientAuthenticatorType?: str

    clientId?: str

    clientOfflineSessionIdleTimeout?: str

    clientOfflineSessionMaxLifespan?: str

    clientSecretRegenerateWhenChanged?: {str:str}

    clientSecretSecretRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderClientSecretSecretRef

    clientSecretWoSecretRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderClientSecretWoSecretRef

    clientSecretWoVersion?: float

    clientSessionIdleTimeout?: str

    clientSessionMaxLifespan?: str

    consentRequired?: bool

    consentScreenText?: str

    description?: str

    directAccessGrantsEnabled?: bool

    displayOnConsentScreen?: bool

    enabled?: bool

    excludeIssuerFromAuthResponse?: bool

    excludeSessionStateFromAuthResponse?: bool

    extraConfig?: {str:str}

    frontchannelLogoutEnabled?: bool

    frontchannelLogoutUrl?: str

    fullScopeAllowed?: bool

    implicitFlowEnabled?: bool

    $import?: bool

    loginTheme?: str

    name?: str

    oauth2DeviceAuthorizationGrantEnabled?: bool

    oauth2DeviceCodeLifespan?: str

    oauth2DevicePollingInterval?: str

    pkceCodeChallengeMethod?: str

    realmId?: str

    realmIdRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRef

    realmIdSelector?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelector

    rootUrl?: str

    serviceAccountsEnabled?: bool

    standardFlowEnabled?: bool

    standardTokenExchangeEnabled?: bool

    useRefreshTokens?: bool

    useRefreshTokensClientCredentials?: bool

    validPostLogoutRedirectUris?: [str]

    validRedirectUris?: [str]

    webOrigins?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client spec for provider authentication flow binding overrides items0

    Attributes
    ----------
    browserId : str, default is Undefined, optional
        Browser flow id, (flow needs to exist)
    browserIdRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDRef, default is Undefined, optional
        browser Id ref
    browserIdSelector : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelector, default is Undefined, optional
        browser Id selector
    directGrantId : str, default is Undefined, optional
        Direct grant flow id (flow needs to exist)
    directGrantIdRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRef, default is Undefined, optional
        direct grant Id ref
    directGrantIdSelector : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelector, default is Undefined, optional
        direct grant Id selector
    """


    browserId?: str

    browserIdRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDRef

    browserIdSelector?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelector

    directGrantId?: str

    directGrantIdRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRef

    directGrantIdSelector?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelector


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDRef:
    r"""
    Reference to a Flow in authenticationflow to populate browserId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDRefPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelector:
    r"""
    Selector for a Flow in authenticationflow to populate browserId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelectorPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRef:
    r"""
    Reference to a Flow in authenticationflow to populate directGrantId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRefPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelector:
    r"""
    Selector for a Flow in authenticationflow to populate directGrantId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelectorPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderAuthorizationItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client spec for provider authorization items0

    Attributes
    ----------
    allowRemoteResourceManagement : bool, default is Undefined, optional
        When true, resources can be managed remotely by the resource server. Defaults to false.
    decisionStrategy : str, default is Undefined, optional
        Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of AFFIRMATIVE, CONSENSUS, or UNANIMOUS. Applies to permissions.
    keepDefaults : bool, default is Undefined, optional
        When true, defaults set by Keycloak will be respected. Defaults to false.
    policyEnforcementMode : str, default is Undefined, optional
        Dictates how policies are enforced when evaluating authorization requests. Can be one of ENFORCING, PERMISSIVE, or DISABLED.
    """


    allowRemoteResourceManagement?: bool

    decisionStrategy?: str

    keepDefaults?: bool

    policyEnforcementMode?: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderClientSecretSecretRef:
    r"""
    The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderClientSecretWoSecretRef:
    r"""
    The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. If omitted, this will fallback to use client_secret.
    Client Secret as write-only argument

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRef:
    r"""
    Reference to a Realm in realm to populate realmId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRefPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelector:
    r"""
    Selector for a Realm in realm to populate realmId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelectorPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    accessTokenLifespan : str, default is Undefined, optional
        The amount of time in seconds before an access token expires. This will override the default for the realm.
    accessType : str, default is Undefined, optional
        Specifies the type of client, which can be one of the following:
    adminUrl : str, default is Undefined, optional
        URL to the admin interface of the client.
    allowRefreshTokenInStandardTokenExchange : str, default is Undefined, optional
        allow refresh token in standard token exchange
    alwaysDisplayInConsole : bool, default is Undefined, optional
        Always list this client in the Account UI, even if the user does not have an active session.
    authenticationFlowBindingOverrides : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0], default is Undefined, optional
        Override realm authentication flow bindings
    authorization : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthorizationItems0], default is Undefined, optional
        When this block is present, fine-grained authorization will be enabled for this client. The client's access_type must be CONFIDENTIAL, and service_accounts_enabled must be true. This block has the following arguments:
    backchannelLogoutRevokeOfflineSessions : bool, default is Undefined, optional
        Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
    backchannelLogoutSessionRequired : bool, default is Undefined, optional
        When true, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to true.
    backchannelLogoutUrl : str, default is Undefined, optional
        The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
    baseUrl : str, default is Undefined, optional
        Default URL to use when the auth server needs to redirect or link back to the client.
    clientAuthenticatorType : str, default is Undefined, optional
        Defaults to client-secret. The authenticator type for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. A default Keycloak installation will have the following available types:
    clientId : str, default is Undefined, optional
        The Client ID for this client, referenced in the URI during authentication and in issued tokens.
    clientOfflineSessionIdleTimeout : str, default is Undefined, optional
        Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
    clientOfflineSessionMaxLifespan : str, default is Undefined, optional
        Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
    clientSecretRegenerateWhenChanged : {str:str}, default is Undefined, optional
        Arbitrary map of values that, when changed, will trigger rotation of the secret. NOTE! Conflicts with client_secret, client_secret_wo and client_secret_wo_version attribute and can't be used together
        Arbitrary map of values that, when changed, will trigger rotation of the secret
    clientSecretSecretRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderClientSecretSecretRef, default is Undefined, optional
        client secret secret ref
    clientSecretWoSecretRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderClientSecretWoSecretRef, default is Undefined, optional
        client secret wo secret ref
    clientSecretWoVersion : float, default is Undefined, optional
        The value of this argument is stored in the state and plan files. Required when using client_secret_wo.
        Version of the Client secret write-only argument
    clientSessionIdleTimeout : str, default is Undefined, optional
        Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
    clientSessionMaxLifespan : str, default is Undefined, optional
        Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
    consentRequired : bool, default is Undefined, optional
        When true, users have to consent to client access. Defaults to false.
    consentScreenText : str, default is Undefined, optional
        The text to display on the consent screen about permissions specific to this client. This is applicable only when display_on_consent_screen is true.
    description : str, default is Undefined, optional
        The description of this client in the GUI.
    directAccessGrantsEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false.
    displayOnConsentScreen : bool, default is Undefined, optional
        When true, the consent screen will display information about the client itself. Defaults to false. This is applicable only when consent_required is true.
    enabled : bool, default is Undefined, optional
        When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
    excludeIssuerFromAuthResponse : bool, default is Undefined, optional
        When true, the parameter iss will not be included in OpenID Connect Authentication Response.
    excludeSessionStateFromAuthResponse : bool, default is Undefined, optional
        When true, the parameter session_state will not be included in OpenID Connect Authentication Response.
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as it may conflict with top-level configuration attributes in future provider updates. For example, the extra_config map can be used to set Authentication Context Class Reference (ACR) to Level of Authentication (LoA) mapping
    frontchannelLogoutEnabled : bool, default is Undefined, optional
        When true, frontchannel logout will be enabled for this client. Specify the url with frontchannel_logout_url. Defaults to false.
    frontchannelLogoutUrl : str, default is Undefined, optional
        The frontchannel logout url. This is applicable only when frontchannel_logout_enabled is true.
    fullScopeAllowed : bool, default is Undefined, optional
        Allow to include all roles mappings in the access token.
    implicitFlowEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Implicit Grant will be enabled for this client. Defaults to false.
    $import : bool, default is Undefined, optional
        When true, the client with the specified client_id is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as account and admin-cli. Note, that the client will not be removed during destruction if import is true.
    loginTheme : str, default is Undefined, optional
        The client login theme. This will override the default theme for the realm.
    name : str, default is Undefined, optional
        The display name of this client in the GUI.
    oauth2DeviceAuthorizationGrantEnabled : bool, default is Undefined, optional
        Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
    oauth2DeviceCodeLifespan : str, default is Undefined, optional
        The maximum amount of time a client has to finish the device code flow before it expires.
    oauth2DevicePollingInterval : str, default is Undefined, optional
        The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
    pkceCodeChallengeMethod : str, default is Undefined, optional
        The challenge method to use for Proof Key for Code Exchange. Can be either plain or S256 or set to empty value “.
    realmId : str, default is Undefined, optional
        The realm this client is attached to.
    realmIdRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRef, default is Undefined, optional
        realm Id ref
    realmIdSelector : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelector, default is Undefined, optional
        realm Id selector
    rootUrl : str, default is Undefined, optional
        When specified, this URL is prepended to any relative URLs found within valid_redirect_uris, web_origins, and admin_url. NOTE: Due to limitations in the Keycloak API, when the root_url attribute is used, the valid_redirect_uris, web_origins, and admin_url attributes will be required.
    serviceAccountsEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false.
    standardFlowEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false.
    standardTokenExchangeEnabled : bool, default is Undefined, optional
        When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
    useRefreshTokens : bool, default is Undefined, optional
        If this is true, a refresh_token will be created and added to the token response. If this is false then no refresh_token will be generated.  Defaults to true.
    useRefreshTokensClientCredentials : bool, default is Undefined, optional
        If this is true, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is false then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to false.
    validPostLogoutRedirectUris : [str], default is Undefined, optional
        A list of valid URIs a browser is permitted to redirect to after a successful logout.
    validRedirectUris : [str], default is Undefined, optional
        A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
        wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled
        is set to true.
    webOrigins : [str], default is Undefined, optional
        A list of allowed CORS origins. To permit all valid redirect URIs, add +. Note that this will not include the * wildcard. To permit all origins, explicitly add *.
    """


    accessTokenLifespan?: str

    accessType?: str

    adminUrl?: str

    allowRefreshTokenInStandardTokenExchange?: str

    alwaysDisplayInConsole?: bool

    authenticationFlowBindingOverrides?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0]

    authorization?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthorizationItems0]

    backchannelLogoutRevokeOfflineSessions?: bool

    backchannelLogoutSessionRequired?: bool

    backchannelLogoutUrl?: str

    baseUrl?: str

    clientAuthenticatorType?: str

    clientId?: str

    clientOfflineSessionIdleTimeout?: str

    clientOfflineSessionMaxLifespan?: str

    clientSecretRegenerateWhenChanged?: {str:str}

    clientSecretSecretRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderClientSecretSecretRef

    clientSecretWoSecretRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderClientSecretWoSecretRef

    clientSecretWoVersion?: float

    clientSessionIdleTimeout?: str

    clientSessionMaxLifespan?: str

    consentRequired?: bool

    consentScreenText?: str

    description?: str

    directAccessGrantsEnabled?: bool

    displayOnConsentScreen?: bool

    enabled?: bool

    excludeIssuerFromAuthResponse?: bool

    excludeSessionStateFromAuthResponse?: bool

    extraConfig?: {str:str}

    frontchannelLogoutEnabled?: bool

    frontchannelLogoutUrl?: str

    fullScopeAllowed?: bool

    implicitFlowEnabled?: bool

    $import?: bool

    loginTheme?: str

    name?: str

    oauth2DeviceAuthorizationGrantEnabled?: bool

    oauth2DeviceCodeLifespan?: str

    oauth2DevicePollingInterval?: str

    pkceCodeChallengeMethod?: str

    realmId?: str

    realmIdRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRef

    realmIdSelector?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelector

    rootUrl?: str

    serviceAccountsEnabled?: bool

    standardFlowEnabled?: bool

    standardTokenExchangeEnabled?: bool

    useRefreshTokens?: bool

    useRefreshTokensClientCredentials?: bool

    validPostLogoutRedirectUris?: [str]

    validRedirectUris?: [str]

    webOrigins?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client spec init provider authentication flow binding overrides items0

    Attributes
    ----------
    browserId : str, default is Undefined, optional
        Browser flow id, (flow needs to exist)
    browserIdRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDRef, default is Undefined, optional
        browser Id ref
    browserIdSelector : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelector, default is Undefined, optional
        browser Id selector
    directGrantId : str, default is Undefined, optional
        Direct grant flow id (flow needs to exist)
    directGrantIdRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRef, default is Undefined, optional
        direct grant Id ref
    directGrantIdSelector : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelector, default is Undefined, optional
        direct grant Id selector
    """


    browserId?: str

    browserIdRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDRef

    browserIdSelector?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelector

    directGrantId?: str

    directGrantIdRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRef

    directGrantIdSelector?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelector


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDRef:
    r"""
    Reference to a Flow in authenticationflow to populate browserId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDRefPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelector:
    r"""
    Selector for a Flow in authenticationflow to populate browserId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelectorPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0BrowserIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRef:
    r"""
    Reference to a Flow in authenticationflow to populate directGrantId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRefPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelector:
    r"""
    Selector for a Flow in authenticationflow to populate directGrantId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelectorPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0DirectGrantIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderAuthorizationItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client spec init provider authorization items0

    Attributes
    ----------
    allowRemoteResourceManagement : bool, default is Undefined, optional
        When true, resources can be managed remotely by the resource server. Defaults to false.
    decisionStrategy : str, default is Undefined, optional
        Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of AFFIRMATIVE, CONSENSUS, or UNANIMOUS. Applies to permissions.
    keepDefaults : bool, default is Undefined, optional
        When true, defaults set by Keycloak will be respected. Defaults to false.
    policyEnforcementMode : str, default is Undefined, optional
        Dictates how policies are enforced when evaluating authorization requests. Can be one of ENFORCING, PERMISSIVE, or DISABLED.
    """


    allowRemoteResourceManagement?: bool

    decisionStrategy?: str

    keepDefaults?: bool

    policyEnforcementMode?: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderClientSecretSecretRef:
    r"""
    The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderClientSecretWoSecretRef:
    r"""
    The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. If omitted, this will fallback to use client_secret.
    Client Secret as write-only argument

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRef:
    r"""
    Reference to a Realm in realm to populate realmId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRefPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelector:
    r"""
    Selector for a Realm in realm to populate realmId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelectorPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    kind : str, default is Undefined, required
        Kind of the referenced object.
    name : str, default is Undefined, required
        Name of the referenced object.
    """


    kind: str

    name: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    """


    name: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatus:
    r"""
    ClientStatus defines the observed state of Client.

    Attributes
    ----------
    atProvider : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusAtProvider

    conditions?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusConditionsItems0]

    observedGeneration?: int


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusAtProvider:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client status at provider

    Attributes
    ----------
    accessTokenLifespan : str, default is Undefined, optional
        The amount of time in seconds before an access token expires. This will override the default for the realm.
    accessType : str, default is Undefined, optional
        Specifies the type of client, which can be one of the following:
    adminUrl : str, default is Undefined, optional
        URL to the admin interface of the client.
    allowRefreshTokenInStandardTokenExchange : str, default is Undefined, optional
        allow refresh token in standard token exchange
    alwaysDisplayInConsole : bool, default is Undefined, optional
        Always list this client in the Account UI, even if the user does not have an active session.
    authenticationFlowBindingOverrides : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusAtProviderAuthenticationFlowBindingOverridesItems0], default is Undefined, optional
        Override realm authentication flow bindings
    authorization : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusAtProviderAuthorizationItems0], default is Undefined, optional
        When this block is present, fine-grained authorization will be enabled for this client. The client's access_type must be CONFIDENTIAL, and service_accounts_enabled must be true. This block has the following arguments:
    backchannelLogoutRevokeOfflineSessions : bool, default is Undefined, optional
        Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
    backchannelLogoutSessionRequired : bool, default is Undefined, optional
        When true, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to true.
    backchannelLogoutUrl : str, default is Undefined, optional
        The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
    baseUrl : str, default is Undefined, optional
        Default URL to use when the auth server needs to redirect or link back to the client.
    clientAuthenticatorType : str, default is Undefined, optional
        Defaults to client-secret. The authenticator type for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. A default Keycloak installation will have the following available types:
    clientId : str, default is Undefined, optional
        The Client ID for this client, referenced in the URI during authentication and in issued tokens.
    clientOfflineSessionIdleTimeout : str, default is Undefined, optional
        Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
    clientOfflineSessionMaxLifespan : str, default is Undefined, optional
        Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
    clientSecretRegenerateWhenChanged : {str:str}, default is Undefined, optional
        Arbitrary map of values that, when changed, will trigger rotation of the secret. NOTE! Conflicts with client_secret, client_secret_wo and client_secret_wo_version attribute and can't be used together
        Arbitrary map of values that, when changed, will trigger rotation of the secret
    clientSecretWoVersion : float, default is Undefined, optional
        The value of this argument is stored in the state and plan files. Required when using client_secret_wo.
        Version of the Client secret write-only argument
    clientSessionIdleTimeout : str, default is Undefined, optional
        Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
    clientSessionMaxLifespan : str, default is Undefined, optional
        Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
    consentRequired : bool, default is Undefined, optional
        When true, users have to consent to client access. Defaults to false.
    consentScreenText : str, default is Undefined, optional
        The text to display on the consent screen about permissions specific to this client. This is applicable only when display_on_consent_screen is true.
    description : str, default is Undefined, optional
        The description of this client in the GUI.
    directAccessGrantsEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false.
    displayOnConsentScreen : bool, default is Undefined, optional
        When true, the consent screen will display information about the client itself. Defaults to false. This is applicable only when consent_required is true.
    enabled : bool, default is Undefined, optional
        When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
    excludeIssuerFromAuthResponse : bool, default is Undefined, optional
        When true, the parameter iss will not be included in OpenID Connect Authentication Response.
    excludeSessionStateFromAuthResponse : bool, default is Undefined, optional
        When true, the parameter session_state will not be included in OpenID Connect Authentication Response.
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as it may conflict with top-level configuration attributes in future provider updates. For example, the extra_config map can be used to set Authentication Context Class Reference (ACR) to Level of Authentication (LoA) mapping
    frontchannelLogoutEnabled : bool, default is Undefined, optional
        When true, frontchannel logout will be enabled for this client. Specify the url with frontchannel_logout_url. Defaults to false.
    frontchannelLogoutUrl : str, default is Undefined, optional
        The frontchannel logout url. This is applicable only when frontchannel_logout_enabled is true.
    fullScopeAllowed : bool, default is Undefined, optional
        Allow to include all roles mappings in the access token.
    id : str, default is Undefined, optional
        id
    implicitFlowEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Implicit Grant will be enabled for this client. Defaults to false.
    $import : bool, default is Undefined, optional
        When true, the client with the specified client_id is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as account and admin-cli. Note, that the client will not be removed during destruction if import is true.
    loginTheme : str, default is Undefined, optional
        The client login theme. This will override the default theme for the realm.
    name : str, default is Undefined, optional
        The display name of this client in the GUI.
    oauth2DeviceAuthorizationGrantEnabled : bool, default is Undefined, optional
        Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
    oauth2DeviceCodeLifespan : str, default is Undefined, optional
        The maximum amount of time a client has to finish the device code flow before it expires.
    oauth2DevicePollingInterval : str, default is Undefined, optional
        The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
    pkceCodeChallengeMethod : str, default is Undefined, optional
        The challenge method to use for Proof Key for Code Exchange. Can be either plain or S256 or set to empty value “.
    realmId : str, default is Undefined, optional
        The realm this client is attached to.
    resourceServerId : str, default is Undefined, optional
        (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the .id attribute).
    rootUrl : str, default is Undefined, optional
        When specified, this URL is prepended to any relative URLs found within valid_redirect_uris, web_origins, and admin_url. NOTE: Due to limitations in the Keycloak API, when the root_url attribute is used, the valid_redirect_uris, web_origins, and admin_url attributes will be required.
    serviceAccountUserId : str, default is Undefined, optional
        (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
    serviceAccountsEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false.
    standardFlowEnabled : bool, default is Undefined, optional
        When true, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false.
    standardTokenExchangeEnabled : bool, default is Undefined, optional
        When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
    useRefreshTokens : bool, default is Undefined, optional
        If this is true, a refresh_token will be created and added to the token response. If this is false then no refresh_token will be generated.  Defaults to true.
    useRefreshTokensClientCredentials : bool, default is Undefined, optional
        If this is true, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is false then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to false.
    validPostLogoutRedirectUris : [str], default is Undefined, optional
        A list of valid URIs a browser is permitted to redirect to after a successful logout.
    validRedirectUris : [str], default is Undefined, optional
        A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
        wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled
        is set to true.
    webOrigins : [str], default is Undefined, optional
        A list of allowed CORS origins. To permit all valid redirect URIs, add +. Note that this will not include the * wildcard. To permit all origins, explicitly add *.
    """


    accessTokenLifespan?: str

    accessType?: str

    adminUrl?: str

    allowRefreshTokenInStandardTokenExchange?: str

    alwaysDisplayInConsole?: bool

    authenticationFlowBindingOverrides?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusAtProviderAuthenticationFlowBindingOverridesItems0]

    authorization?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusAtProviderAuthorizationItems0]

    backchannelLogoutRevokeOfflineSessions?: bool

    backchannelLogoutSessionRequired?: bool

    backchannelLogoutUrl?: str

    baseUrl?: str

    clientAuthenticatorType?: str

    clientId?: str

    clientOfflineSessionIdleTimeout?: str

    clientOfflineSessionMaxLifespan?: str

    clientSecretRegenerateWhenChanged?: {str:str}

    clientSecretWoVersion?: float

    clientSessionIdleTimeout?: str

    clientSessionMaxLifespan?: str

    consentRequired?: bool

    consentScreenText?: str

    description?: str

    directAccessGrantsEnabled?: bool

    displayOnConsentScreen?: bool

    enabled?: bool

    excludeIssuerFromAuthResponse?: bool

    excludeSessionStateFromAuthResponse?: bool

    extraConfig?: {str:str}

    frontchannelLogoutEnabled?: bool

    frontchannelLogoutUrl?: str

    fullScopeAllowed?: bool

    id?: str

    implicitFlowEnabled?: bool

    $import?: bool

    loginTheme?: str

    name?: str

    oauth2DeviceAuthorizationGrantEnabled?: bool

    oauth2DeviceCodeLifespan?: str

    oauth2DevicePollingInterval?: str

    pkceCodeChallengeMethod?: str

    realmId?: str

    resourceServerId?: str

    rootUrl?: str

    serviceAccountUserId?: str

    serviceAccountsEnabled?: bool

    standardFlowEnabled?: bool

    standardTokenExchangeEnabled?: bool

    useRefreshTokens?: bool

    useRefreshTokensClientCredentials?: bool

    validPostLogoutRedirectUris?: [str]

    validRedirectUris?: [str]

    webOrigins?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusAtProviderAuthenticationFlowBindingOverridesItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client status at provider authentication flow binding overrides items0

    Attributes
    ----------
    browserId : str, default is Undefined, optional
        Browser flow id, (flow needs to exist)
    directGrantId : str, default is Undefined, optional
        Direct grant flow id (flow needs to exist)
    """


    browserId?: str

    directGrantId?: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusAtProviderAuthorizationItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client status at provider authorization items0

    Attributes
    ----------
    allowRemoteResourceManagement : bool, default is Undefined, optional
        When true, resources can be managed remotely by the resource server. Defaults to false.
    decisionStrategy : str, default is Undefined, optional
        Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of AFFIRMATIVE, CONSENSUS, or UNANIMOUS. Applies to permissions.
    keepDefaults : bool, default is Undefined, optional
        When true, defaults set by Keycloak will be respected. Defaults to false.
    policyEnforcementMode : str, default is Undefined, optional
        Dictates how policies are enforced when evaluating authorization requests. Can be one of ENFORCING, PERMISSIVE, or DISABLED.
    """


    allowRemoteResourceManagement?: bool

    decisionStrategy?: str

    keepDefaults?: bool

    policyEnforcementMode?: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


