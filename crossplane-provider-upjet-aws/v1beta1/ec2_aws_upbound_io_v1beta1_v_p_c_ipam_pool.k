"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VPCIpamPool:
    r"""
    VPCIpamPool is the Schema for the VPCIpamPools API. Provides a IP address pool resource for IPAM.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VPCIpamPool", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1VPCIpamPoolStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "VPCIpamPool" = "VPCIpamPool"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpec

    status?: Ec2AwsUpboundIoV1beta1VPCIpamPoolStatus


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpec:
    r"""
    VPCIpamPoolSpec defines the desired state of VPCIpamPool

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 v p c ipam pool spec for provider

    Attributes
    ----------
    addressFamily : str, default is Undefined, optional
        The IP protocol assigned to this pool. You must choose either IPv4 or IPv6 protocol for a pool.
    allocationDefaultNetmaskLength : float, default is Undefined, optional
        A default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here, new allocations will default to 10.0.0.0/16 (unless you provide a different netmask value when you create the new allocation).
    allocationMaxNetmaskLength : float, default is Undefined, optional
        The maximum netmask length that will be required for CIDR allocations in this pool.
    allocationMinNetmaskLength : float, default is Undefined, optional
        The minimum netmask length that will be required for CIDR allocations in this pool.
    allocationResourceTags : {str:str}, default is Undefined, optional
        Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.
    autoImport : bool, default is Undefined, optional
        If you include this argument, IPAM automatically imports any VPCs you have in your scope that fall
        within the CIDR range in the pool.
    awsService : str, default is Undefined, optional
        Limits which AWS service the pool can be used in. Only useable on public scopes. Valid Values: ec2.
    cascade : bool, default is Undefined, optional
        Enables you to quickly delete an IPAM pool and all resources within that pool, including provisioned CIDRs, allocations, and other pools.
    description : str, default is Undefined, optional
        A description for the IPAM pool.
    ipamScopeId : str, default is Undefined, optional
        The ID of the scope in which you would like to create the IPAM pool.
    ipamScopeIdRef : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDRef, default is Undefined, optional
        ipam scope Id ref
    ipamScopeIdSelector : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDSelector, default is Undefined, optional
        ipam scope Id selector
    locale : str, default is Undefined, optional
        The locale in which you would like to create the IPAM pool. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. Possible values: Any AWS region, such as us-east-1.
    publicIpSource : str, default is Undefined, optional
        The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Valid values are byoip or amazon. Default is byoip.
    publiclyAdvertisable : bool, default is Undefined, optional
        Defines whether or not IPv6 pool space is publicly advertisable over the internet. This argument is required if address_family = "ipv6" and public_ip_source = "byoip", default is false. This option is not available for IPv4 pool space or if public_ip_source = "amazon". Setting this argument to true when it is not available may result in erroneous differences being reported.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    sourceIpamPoolId : str, default is Undefined, optional
        The ID of the source IPAM pool. Use this argument to create a child pool within an existing pool.
    sourceIpamPoolIdRef : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDRef, default is Undefined, optional
        source ipam pool Id ref
    sourceIpamPoolIdSelector : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDSelector, default is Undefined, optional
        source ipam pool Id selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    addressFamily?: str

    allocationDefaultNetmaskLength?: float

    allocationMaxNetmaskLength?: float

    allocationMinNetmaskLength?: float

    allocationResourceTags?: {str:str}

    autoImport?: bool

    awsService?: str

    cascade?: bool

    description?: str

    ipamScopeId?: str

    ipamScopeIdRef?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDRef

    ipamScopeIdSelector?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDSelector

    locale?: str

    publicIpSource?: str

    publiclyAdvertisable?: bool

    region: str

    sourceIpamPoolId?: str

    sourceIpamPoolIdRef?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDRef

    sourceIpamPoolIdSelector?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDSelector

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDRef:
    r"""
    Reference to a VPCIpamScope in ec2 to populate ipamScopeId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDSelector:
    r"""
    Selector for a VPCIpamScope in ec2 to populate ipamScopeId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderIpamScopeIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDRef:
    r"""
    Reference to a VPCIpamPool in ec2 to populate sourceIpamPoolId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDSelector:
    r"""
    Selector for a VPCIpamPool in ec2 to populate sourceIpamPoolId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecForProviderSourceIpamPoolIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    addressFamily : str, default is Undefined, optional
        The IP protocol assigned to this pool. You must choose either IPv4 or IPv6 protocol for a pool.
    allocationDefaultNetmaskLength : float, default is Undefined, optional
        A default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here, new allocations will default to 10.0.0.0/16 (unless you provide a different netmask value when you create the new allocation).
    allocationMaxNetmaskLength : float, default is Undefined, optional
        The maximum netmask length that will be required for CIDR allocations in this pool.
    allocationMinNetmaskLength : float, default is Undefined, optional
        The minimum netmask length that will be required for CIDR allocations in this pool.
    allocationResourceTags : {str:str}, default is Undefined, optional
        Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.
    autoImport : bool, default is Undefined, optional
        If you include this argument, IPAM automatically imports any VPCs you have in your scope that fall
        within the CIDR range in the pool.
    awsService : str, default is Undefined, optional
        Limits which AWS service the pool can be used in. Only useable on public scopes. Valid Values: ec2.
    cascade : bool, default is Undefined, optional
        Enables you to quickly delete an IPAM pool and all resources within that pool, including provisioned CIDRs, allocations, and other pools.
    description : str, default is Undefined, optional
        A description for the IPAM pool.
    ipamScopeId : str, default is Undefined, optional
        The ID of the scope in which you would like to create the IPAM pool.
    ipamScopeIdRef : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDRef, default is Undefined, optional
        ipam scope Id ref
    ipamScopeIdSelector : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDSelector, default is Undefined, optional
        ipam scope Id selector
    locale : str, default is Undefined, optional
        The locale in which you would like to create the IPAM pool. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. Possible values: Any AWS region, such as us-east-1.
    publicIpSource : str, default is Undefined, optional
        The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Valid values are byoip or amazon. Default is byoip.
    publiclyAdvertisable : bool, default is Undefined, optional
        Defines whether or not IPv6 pool space is publicly advertisable over the internet. This argument is required if address_family = "ipv6" and public_ip_source = "byoip", default is false. This option is not available for IPv4 pool space or if public_ip_source = "amazon". Setting this argument to true when it is not available may result in erroneous differences being reported.
    sourceIpamPoolId : str, default is Undefined, optional
        The ID of the source IPAM pool. Use this argument to create a child pool within an existing pool.
    sourceIpamPoolIdRef : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDRef, default is Undefined, optional
        source ipam pool Id ref
    sourceIpamPoolIdSelector : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDSelector, default is Undefined, optional
        source ipam pool Id selector
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    addressFamily?: str

    allocationDefaultNetmaskLength?: float

    allocationMaxNetmaskLength?: float

    allocationMinNetmaskLength?: float

    allocationResourceTags?: {str:str}

    autoImport?: bool

    awsService?: str

    cascade?: bool

    description?: str

    ipamScopeId?: str

    ipamScopeIdRef?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDRef

    ipamScopeIdSelector?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDSelector

    locale?: str

    publicIpSource?: str

    publiclyAdvertisable?: bool

    sourceIpamPoolId?: str

    sourceIpamPoolIdRef?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDRef

    sourceIpamPoolIdSelector?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDSelector

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDRef:
    r"""
    Reference to a VPCIpamScope in ec2 to populate ipamScopeId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDSelector:
    r"""
    Selector for a VPCIpamScope in ec2 to populate ipamScopeId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderIpamScopeIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDRef:
    r"""
    Reference to a VPCIpamPool in ec2 to populate sourceIpamPoolId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDSelector:
    r"""
    Selector for a VPCIpamPool in ec2 to populate sourceIpamPoolId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecInitProviderSourceIpamPoolIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolStatus:
    r"""
    VPCIpamPoolStatus defines the observed state of VPCIpamPool.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1VPCIpamPoolStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1VPCIpamPoolStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1VPCIpamPoolStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1VPCIpamPoolStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 v p c ipam pool status at provider

    Attributes
    ----------
    addressFamily : str, default is Undefined, optional
        The IP protocol assigned to this pool. You must choose either IPv4 or IPv6 protocol for a pool.
    allocationDefaultNetmaskLength : float, default is Undefined, optional
        A default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here, new allocations will default to 10.0.0.0/16 (unless you provide a different netmask value when you create the new allocation).
    allocationMaxNetmaskLength : float, default is Undefined, optional
        The maximum netmask length that will be required for CIDR allocations in this pool.
    allocationMinNetmaskLength : float, default is Undefined, optional
        The minimum netmask length that will be required for CIDR allocations in this pool.
    allocationResourceTags : {str:str}, default is Undefined, optional
        Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.
    arn : str, default is Undefined, optional
        Amazon Resource Name (ARN) of IPAM
    autoImport : bool, default is Undefined, optional
        If you include this argument, IPAM automatically imports any VPCs you have in your scope that fall
        within the CIDR range in the pool.
    awsService : str, default is Undefined, optional
        Limits which AWS service the pool can be used in. Only useable on public scopes. Valid Values: ec2.
    cascade : bool, default is Undefined, optional
        Enables you to quickly delete an IPAM pool and all resources within that pool, including provisioned CIDRs, allocations, and other pools.
    description : str, default is Undefined, optional
        A description for the IPAM pool.
    id : str, default is Undefined, optional
        The ID of the IPAM
    ipamScopeId : str, default is Undefined, optional
        The ID of the scope in which you would like to create the IPAM pool.
    ipamScopeType : str, default is Undefined, optional
        ipam scope type
    locale : str, default is Undefined, optional
        The locale in which you would like to create the IPAM pool. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. Possible values: Any AWS region, such as us-east-1.
    poolDepth : float, default is Undefined, optional
        pool depth
    publicIpSource : str, default is Undefined, optional
        The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Valid values are byoip or amazon. Default is byoip.
    publiclyAdvertisable : bool, default is Undefined, optional
        Defines whether or not IPv6 pool space is publicly advertisable over the internet. This argument is required if address_family = "ipv6" and public_ip_source = "byoip", default is false. This option is not available for IPv4 pool space or if public_ip_source = "amazon". Setting this argument to true when it is not available may result in erroneous differences being reported.
    sourceIpamPoolId : str, default is Undefined, optional
        The ID of the source IPAM pool. Use this argument to create a child pool within an existing pool.
    state : str, default is Undefined, optional
        The ID of the IPAM
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    """


    addressFamily?: str

    allocationDefaultNetmaskLength?: float

    allocationMaxNetmaskLength?: float

    allocationMinNetmaskLength?: float

    allocationResourceTags?: {str:str}

    arn?: str

    autoImport?: bool

    awsService?: str

    cascade?: bool

    description?: str

    id?: str

    ipamScopeId?: str

    ipamScopeType?: str

    locale?: str

    poolDepth?: float

    publicIpSource?: str

    publiclyAdvertisable?: bool

    sourceIpamPoolId?: str

    state?: str

    tags?: {str:str}

    tagsAll?: {str:str}


schema Ec2AwsUpboundIoV1beta1VPCIpamPoolStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


