"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Route:
    r"""
    Route is the Schema for the Routes API. Provides a resource to create a routing entry in a VPC routing table.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Route", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta2RouteSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta2RouteStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta2" = "ec2.aws.upbound.io/v1beta2"

    kind: "Route" = "Route"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta2RouteSpec

    status?: Ec2AwsUpboundIoV1beta2RouteStatus


schema Ec2AwsUpboundIoV1beta2RouteSpec:
    r"""
    RouteSpec defines the desired state of Route

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta2RouteSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta2RouteSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta2RouteSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta2RouteSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta2RouteSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta2RouteSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta2RouteSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta2RouteSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta2RouteSpecForProvider:
    r"""
    ec2 aws upbound io v1beta2 route spec for provider

    Attributes
    ----------
    carrierGatewayId : str, default is Undefined, optional
        Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
    coreNetworkArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of a core network.
    destinationCidrBlock : str, default is Undefined, optional
        The destination CIDR block.
    destinationIpv6CidrBlock : str, default is Undefined, optional
        The destination IPv6 CIDR block.
    destinationPrefixListId : str, default is Undefined, optional
        The ID of a managed prefix list destination.
    destinationPrefixListIdRef : Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDRef, default is Undefined, optional
        destination prefix list Id ref
    destinationPrefixListIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDSelector, default is Undefined, optional
        destination prefix list Id selector
    egressOnlyGatewayId : str, default is Undefined, optional
        Identifier of a VPC Egress Only Internet Gateway.
    egressOnlyGatewayIdRef : Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDRef, default is Undefined, optional
        egress only gateway Id ref
    egressOnlyGatewayIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDSelector, default is Undefined, optional
        egress only gateway Id selector
    gatewayId : str, default is Undefined, optional
        Identifier of a VPC internet gateway or a virtual private gateway. Specify local when updating a previously imported local route.
    gatewayIdRef : Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDRef, default is Undefined, optional
        gateway Id ref
    gatewayIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDSelector, default is Undefined, optional
        gateway Id selector
    localGatewayId : str, default is Undefined, optional
        Identifier of a Outpost local gateway.
    natGatewayId : str, default is Undefined, optional
        Identifier of a VPC NAT gateway.
    natGatewayIdRef : Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDRef, default is Undefined, optional
        nat gateway Id ref
    natGatewayIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDSelector, default is Undefined, optional
        nat gateway Id selector
    networkInterfaceId : str, default is Undefined, optional
        Identifier of an EC2 network interface.
    networkInterfaceIdRef : Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDRef, default is Undefined, optional
        network interface Id ref
    networkInterfaceIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDSelector, default is Undefined, optional
        network interface Id selector
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    routeTableId : str, default is Undefined, optional
        The ID of the routing table.
    routeTableIdRef : Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDRef, default is Undefined, optional
        route table Id ref
    routeTableIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDSelector, default is Undefined, optional
        route table Id selector
    transitGatewayId : str, default is Undefined, optional
        Identifier of an EC2 Transit Gateway.
    transitGatewayIdRef : Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDRef, default is Undefined, optional
        transit gateway Id ref
    transitGatewayIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDSelector, default is Undefined, optional
        transit gateway Id selector
    vpcEndpointId : str, default is Undefined, optional
        Identifier of a VPC Endpoint.
    vpcEndpointIdRef : Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDRef, default is Undefined, optional
        vpc endpoint Id ref
    vpcEndpointIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDSelector, default is Undefined, optional
        vpc endpoint Id selector
    vpcPeeringConnectionId : str, default is Undefined, optional
        Identifier of a VPC peering connection.
    vpcPeeringConnectionIdRef : Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDRef, default is Undefined, optional
        vpc peering connection Id ref
    vpcPeeringConnectionIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDSelector, default is Undefined, optional
        vpc peering connection Id selector
    """


    carrierGatewayId?: str

    coreNetworkArn?: str

    destinationCidrBlock?: str

    destinationIpv6CidrBlock?: str

    destinationPrefixListId?: str

    destinationPrefixListIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDRef

    destinationPrefixListIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDSelector

    egressOnlyGatewayId?: str

    egressOnlyGatewayIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDRef

    egressOnlyGatewayIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDSelector

    gatewayId?: str

    gatewayIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDRef

    gatewayIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDSelector

    localGatewayId?: str

    natGatewayId?: str

    natGatewayIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDRef

    natGatewayIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDSelector

    networkInterfaceId?: str

    networkInterfaceIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDRef

    networkInterfaceIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDSelector

    region: str

    routeTableId?: str

    routeTableIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDRef

    routeTableIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDSelector

    transitGatewayId?: str

    transitGatewayIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDRef

    transitGatewayIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDSelector

    vpcEndpointId?: str

    vpcEndpointIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDRef

    vpcEndpointIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDSelector

    vpcPeeringConnectionId?: str

    vpcPeeringConnectionIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDRef

    vpcPeeringConnectionIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDSelector


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDRef:
    r"""
    Reference to a ManagedPrefixList in ec2 to populate destinationPrefixListId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDSelector:
    r"""
    Selector for a ManagedPrefixList in ec2 to populate destinationPrefixListId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderDestinationPrefixListIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDRef:
    r"""
    Reference to a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDSelector:
    r"""
    Selector for a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderEgressOnlyGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDRef:
    r"""
    Reference to a InternetGateway in ec2 to populate gatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDSelector:
    r"""
    Selector for a InternetGateway in ec2 to populate gatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDRef:
    r"""
    Reference to a NATGateway in ec2 to populate natGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDSelector:
    r"""
    Selector for a NATGateway in ec2 to populate natGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderNatGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDRef:
    r"""
    Reference to a NetworkInterface in ec2 to populate networkInterfaceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDSelector:
    r"""
    Selector for a NetworkInterface in ec2 to populate networkInterfaceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderNetworkInterfaceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDRef:
    r"""
    Reference to a RouteTable in ec2 to populate routeTableId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDSelector:
    r"""
    Selector for a RouteTable in ec2 to populate routeTableId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderRouteTableIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDRef:
    r"""
    Reference to a TransitGateway in ec2 to populate transitGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDSelector:
    r"""
    Selector for a TransitGateway in ec2 to populate transitGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderTransitGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDRef:
    r"""
    Reference to a VPCEndpoint in ec2 to populate vpcEndpointId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDSelector:
    r"""
    Selector for a VPCEndpoint in ec2 to populate vpcEndpointId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcEndpointIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDRef:
    r"""
    Reference to a VPCPeeringConnection in ec2 to populate vpcPeeringConnectionId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDSelector:
    r"""
    Selector for a VPCPeeringConnection in ec2 to populate vpcPeeringConnectionId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecForProviderVpcPeeringConnectionIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    carrierGatewayId : str, default is Undefined, optional
        Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
    coreNetworkArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of a core network.
    destinationCidrBlock : str, default is Undefined, optional
        The destination CIDR block.
    destinationIpv6CidrBlock : str, default is Undefined, optional
        The destination IPv6 CIDR block.
    destinationPrefixListId : str, default is Undefined, optional
        The ID of a managed prefix list destination.
    destinationPrefixListIdRef : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDRef, default is Undefined, optional
        destination prefix list Id ref
    destinationPrefixListIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDSelector, default is Undefined, optional
        destination prefix list Id selector
    egressOnlyGatewayId : str, default is Undefined, optional
        Identifier of a VPC Egress Only Internet Gateway.
    egressOnlyGatewayIdRef : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDRef, default is Undefined, optional
        egress only gateway Id ref
    egressOnlyGatewayIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDSelector, default is Undefined, optional
        egress only gateway Id selector
    gatewayId : str, default is Undefined, optional
        Identifier of a VPC internet gateway or a virtual private gateway. Specify local when updating a previously imported local route.
    gatewayIdRef : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDRef, default is Undefined, optional
        gateway Id ref
    gatewayIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDSelector, default is Undefined, optional
        gateway Id selector
    localGatewayId : str, default is Undefined, optional
        Identifier of a Outpost local gateway.
    natGatewayId : str, default is Undefined, optional
        Identifier of a VPC NAT gateway.
    natGatewayIdRef : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDRef, default is Undefined, optional
        nat gateway Id ref
    natGatewayIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDSelector, default is Undefined, optional
        nat gateway Id selector
    networkInterfaceId : str, default is Undefined, optional
        Identifier of an EC2 network interface.
    networkInterfaceIdRef : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDRef, default is Undefined, optional
        network interface Id ref
    networkInterfaceIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDSelector, default is Undefined, optional
        network interface Id selector
    routeTableId : str, default is Undefined, optional
        The ID of the routing table.
    routeTableIdRef : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDRef, default is Undefined, optional
        route table Id ref
    routeTableIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDSelector, default is Undefined, optional
        route table Id selector
    transitGatewayId : str, default is Undefined, optional
        Identifier of an EC2 Transit Gateway.
    transitGatewayIdRef : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDRef, default is Undefined, optional
        transit gateway Id ref
    transitGatewayIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDSelector, default is Undefined, optional
        transit gateway Id selector
    vpcEndpointId : str, default is Undefined, optional
        Identifier of a VPC Endpoint.
    vpcEndpointIdRef : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDRef, default is Undefined, optional
        vpc endpoint Id ref
    vpcEndpointIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDSelector, default is Undefined, optional
        vpc endpoint Id selector
    vpcPeeringConnectionId : str, default is Undefined, optional
        Identifier of a VPC peering connection.
    vpcPeeringConnectionIdRef : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDRef, default is Undefined, optional
        vpc peering connection Id ref
    vpcPeeringConnectionIdSelector : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDSelector, default is Undefined, optional
        vpc peering connection Id selector
    """


    carrierGatewayId?: str

    coreNetworkArn?: str

    destinationCidrBlock?: str

    destinationIpv6CidrBlock?: str

    destinationPrefixListId?: str

    destinationPrefixListIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDRef

    destinationPrefixListIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDSelector

    egressOnlyGatewayId?: str

    egressOnlyGatewayIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDRef

    egressOnlyGatewayIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDSelector

    gatewayId?: str

    gatewayIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDRef

    gatewayIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDSelector

    localGatewayId?: str

    natGatewayId?: str

    natGatewayIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDRef

    natGatewayIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDSelector

    networkInterfaceId?: str

    networkInterfaceIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDRef

    networkInterfaceIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDSelector

    routeTableId?: str

    routeTableIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDRef

    routeTableIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDSelector

    transitGatewayId?: str

    transitGatewayIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDRef

    transitGatewayIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDSelector

    vpcEndpointId?: str

    vpcEndpointIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDRef

    vpcEndpointIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDSelector

    vpcPeeringConnectionId?: str

    vpcPeeringConnectionIdRef?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDRef

    vpcPeeringConnectionIdSelector?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDSelector


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDRef:
    r"""
    Reference to a ManagedPrefixList in ec2 to populate destinationPrefixListId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDSelector:
    r"""
    Selector for a ManagedPrefixList in ec2 to populate destinationPrefixListId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderDestinationPrefixListIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDRef:
    r"""
    Reference to a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDSelector:
    r"""
    Selector for a EgressOnlyInternetGateway in ec2 to populate egressOnlyGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderEgressOnlyGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDRef:
    r"""
    Reference to a InternetGateway in ec2 to populate gatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDSelector:
    r"""
    Selector for a InternetGateway in ec2 to populate gatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDRef:
    r"""
    Reference to a NATGateway in ec2 to populate natGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDSelector:
    r"""
    Selector for a NATGateway in ec2 to populate natGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNatGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDRef:
    r"""
    Reference to a NetworkInterface in ec2 to populate networkInterfaceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDSelector:
    r"""
    Selector for a NetworkInterface in ec2 to populate networkInterfaceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderNetworkInterfaceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDRef:
    r"""
    Reference to a RouteTable in ec2 to populate routeTableId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDSelector:
    r"""
    Selector for a RouteTable in ec2 to populate routeTableId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderRouteTableIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDRef:
    r"""
    Reference to a TransitGateway in ec2 to populate transitGatewayId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDSelector:
    r"""
    Selector for a TransitGateway in ec2 to populate transitGatewayId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderTransitGatewayIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDRef:
    r"""
    Reference to a VPCEndpoint in ec2 to populate vpcEndpointId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDSelector:
    r"""
    Selector for a VPCEndpoint in ec2 to populate vpcEndpointId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcEndpointIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDRef:
    r"""
    Reference to a VPCPeeringConnection in ec2 to populate vpcPeeringConnectionId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDSelector:
    r"""
    Selector for a VPCPeeringConnection in ec2 to populate vpcPeeringConnectionId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecInitProviderVpcPeeringConnectionIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2RouteSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta2RouteSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta2RouteStatus:
    r"""
    RouteStatus defines the observed state of Route.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta2RouteStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta2RouteStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta2RouteStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta2RouteStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta2RouteStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta2 route status at provider

    Attributes
    ----------
    carrierGatewayId : str, default is Undefined, optional
        Identifier of a carrier gateway. This attribute can only be used when the VPC contains a subnet which is associated with a Wavelength Zone.
    coreNetworkArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of a core network.
    destinationCidrBlock : str, default is Undefined, optional
        The destination CIDR block.
    destinationIpv6CidrBlock : str, default is Undefined, optional
        The destination IPv6 CIDR block.
    destinationPrefixListId : str, default is Undefined, optional
        The ID of a managed prefix list destination.
    egressOnlyGatewayId : str, default is Undefined, optional
        Identifier of a VPC Egress Only Internet Gateway.
    gatewayId : str, default is Undefined, optional
        Identifier of a VPC internet gateway or a virtual private gateway. Specify local when updating a previously imported local route.
    id : str, default is Undefined, optional
        Route identifier computed from the routing table identifier and route destination.
    instanceId : str, default is Undefined, optional
        Identifier of an EC2 instance.
    instanceOwnerId : str, default is Undefined, optional
        The AWS account ID of the owner of the EC2 instance.
    localGatewayId : str, default is Undefined, optional
        Identifier of a Outpost local gateway.
    natGatewayId : str, default is Undefined, optional
        Identifier of a VPC NAT gateway.
    networkInterfaceId : str, default is Undefined, optional
        Identifier of an EC2 network interface.
    origin : str, default is Undefined, optional
        How the route was created - CreateRouteTable, CreateRoute or EnableVgwRoutePropagation.
    routeTableId : str, default is Undefined, optional
        The ID of the routing table.
    state : str, default is Undefined, optional
        The state of the route - active or blackhole.
    transitGatewayId : str, default is Undefined, optional
        Identifier of an EC2 Transit Gateway.
    vpcEndpointId : str, default is Undefined, optional
        Identifier of a VPC Endpoint.
    vpcPeeringConnectionId : str, default is Undefined, optional
        Identifier of a VPC peering connection.
    """


    carrierGatewayId?: str

    coreNetworkArn?: str

    destinationCidrBlock?: str

    destinationIpv6CidrBlock?: str

    destinationPrefixListId?: str

    egressOnlyGatewayId?: str

    gatewayId?: str

    id?: str

    instanceId?: str

    instanceOwnerId?: str

    localGatewayId?: str

    natGatewayId?: str

    networkInterfaceId?: str

    origin?: str

    routeTableId?: str

    state?: str

    transitGatewayId?: str

    vpcEndpointId?: str

    vpcPeeringConnectionId?: str


schema Ec2AwsUpboundIoV1beta2RouteStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


