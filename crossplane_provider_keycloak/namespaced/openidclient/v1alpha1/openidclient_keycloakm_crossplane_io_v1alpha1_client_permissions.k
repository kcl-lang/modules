"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema ClientPermissions:
    r"""
    ClientPermissions is the Schema for the ClientPermissionss API.

    Attributes
    ----------
    apiVersion : str, default is "openidclient.keycloak.m.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ClientPermissions", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpec, default is Undefined, required
        spec
    status : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatus, default is Undefined, optional
        status
    """


    apiVersion: "openidclient.keycloak.m.crossplane.io/v1alpha1" = "openidclient.keycloak.m.crossplane.io/v1alpha1"

    kind: "ClientPermissions" = "ClientPermissions"

    metadata?: v1.ObjectMeta

    spec: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpec

    status?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatus


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpec:
    r"""
    ClientPermissionsSpec defines the desired state of ClientPermissions

    Attributes
    ----------
    forProvider : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProvider, default is Undefined, required
        for provider
    initProvider : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    writeConnectionSecretToRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    forProvider: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProvider

    initProvider?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecProviderConfigRef

    writeConnectionSecretToRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecWriteConnectionSecretToRef


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProvider:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec for provider

    Attributes
    ----------
    clientId : str, default is Undefined, optional
        The id of the client that provides the role.
    clientIdRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDRef, default is Undefined, optional
        client Id ref
    clientIdSelector : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDSelector, default is Undefined, optional
        client Id selector
    configureScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderConfigureScopeItems0], default is Undefined, optional
        configure scope
    manageScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderManageScopeItems0], default is Undefined, optional
        manage scope
    mapRolesClientScopeScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderMapRolesClientScopeScopeItems0], default is Undefined, optional
        map roles client scope scope
    mapRolesCompositeScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderMapRolesCompositeScopeItems0], default is Undefined, optional
        map roles composite scope
    mapRolesScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderMapRolesScopeItems0], default is Undefined, optional
        map roles scope
    realmId : str, default is Undefined, optional
        The realm this group exists in.
    realmIdRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDRef, default is Undefined, optional
        realm Id ref
    realmIdSelector : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDSelector, default is Undefined, optional
        realm Id selector
    tokenExchangeScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderTokenExchangeScopeItems0], default is Undefined, optional
        token exchange scope
    viewScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderViewScopeItems0], default is Undefined, optional
        view scope
    """


    clientId?: str

    clientIdRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDRef

    clientIdSelector?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDSelector

    configureScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderConfigureScopeItems0]

    manageScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderManageScopeItems0]

    mapRolesClientScopeScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderMapRolesClientScopeScopeItems0]

    mapRolesCompositeScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderMapRolesCompositeScopeItems0]

    mapRolesScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderMapRolesScopeItems0]

    realmId?: str

    realmIdRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDRef

    realmIdSelector?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDSelector

    tokenExchangeScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderTokenExchangeScopeItems0]

    viewScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderViewScopeItems0]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDRef:
    r"""
    Reference to a Client in openidclient to populate clientId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDRefPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDSelector:
    r"""
    Selector for a Client in openidclient to populate clientId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDSelectorPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderClientIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderConfigureScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec for provider configure scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderManageScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec for provider manage scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderMapRolesClientScopeScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec for provider map roles client scope scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderMapRolesCompositeScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec for provider map roles composite scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderMapRolesScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec for provider map roles scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDRef:
    r"""
    Reference to a Realm in realm to populate realmId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDRefPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDSelector:
    r"""
    Selector for a Realm in realm to populate realmId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDSelectorPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderRealmIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderTokenExchangeScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec for provider token exchange scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecForProviderViewScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec for provider view scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    clientId : str, default is Undefined, optional
        The id of the client that provides the role.
    clientIdRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDRef, default is Undefined, optional
        client Id ref
    clientIdSelector : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDSelector, default is Undefined, optional
        client Id selector
    configureScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderConfigureScopeItems0], default is Undefined, optional
        configure scope
    manageScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderManageScopeItems0], default is Undefined, optional
        manage scope
    mapRolesClientScopeScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderMapRolesClientScopeScopeItems0], default is Undefined, optional
        map roles client scope scope
    mapRolesCompositeScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderMapRolesCompositeScopeItems0], default is Undefined, optional
        map roles composite scope
    mapRolesScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderMapRolesScopeItems0], default is Undefined, optional
        map roles scope
    realmId : str, default is Undefined, optional
        The realm this group exists in.
    realmIdRef : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDRef, default is Undefined, optional
        realm Id ref
    realmIdSelector : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDSelector, default is Undefined, optional
        realm Id selector
    tokenExchangeScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderTokenExchangeScopeItems0], default is Undefined, optional
        token exchange scope
    viewScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderViewScopeItems0], default is Undefined, optional
        view scope
    """


    clientId?: str

    clientIdRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDRef

    clientIdSelector?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDSelector

    configureScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderConfigureScopeItems0]

    manageScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderManageScopeItems0]

    mapRolesClientScopeScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderMapRolesClientScopeScopeItems0]

    mapRolesCompositeScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderMapRolesCompositeScopeItems0]

    mapRolesScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderMapRolesScopeItems0]

    realmId?: str

    realmIdRef?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDRef

    realmIdSelector?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDSelector

    tokenExchangeScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderTokenExchangeScopeItems0]

    viewScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderViewScopeItems0]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDRef:
    r"""
    Reference to a Client in openidclient to populate clientId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDRefPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDSelector:
    r"""
    Selector for a Client in openidclient to populate clientId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDSelectorPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderClientIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderConfigureScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec init provider configure scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderManageScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec init provider manage scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderMapRolesClientScopeScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec init provider map roles client scope scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderMapRolesCompositeScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec init provider map roles composite scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderMapRolesScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec init provider map roles scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDRef:
    r"""
    Reference to a Realm in realm to populate realmId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDRefPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDSelector:
    r"""
    Selector for a Realm in realm to populate realmId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDSelectorPolicy


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderRealmIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderTokenExchangeScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec init provider token exchange scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecInitProviderViewScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions spec init provider view scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    kind : str, default is Undefined, required
        Kind of the referenced object.
    name : str, default is Undefined, required
        Name of the referenced object.
    """


    kind: str

    name: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    """


    name: str


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatus:
    r"""
    ClientPermissionsStatus defines the observed state of ClientPermissions.

    Attributes
    ----------
    atProvider : OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProvider

    conditions?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusConditionsItems0]

    observedGeneration?: int


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProvider:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions status at provider

    Attributes
    ----------
    authorizationResourceServerId : str, default is Undefined, optional
        Resource server id representing the realm management client on which this
        permission is managed.
        Resource server id representing the realm management client on which this permission is managed
    clientId : str, default is Undefined, optional
        The id of the client that provides the role.
    configureScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderConfigureScopeItems0], default is Undefined, optional
        configure scope
    enabled : bool, default is Undefined, optional
        enabled
    id : str, default is Undefined, optional
        id
    manageScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderManageScopeItems0], default is Undefined, optional
        manage scope
    mapRolesClientScopeScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderMapRolesClientScopeScopeItems0], default is Undefined, optional
        map roles client scope scope
    mapRolesCompositeScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderMapRolesCompositeScopeItems0], default is Undefined, optional
        map roles composite scope
    mapRolesScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderMapRolesScopeItems0], default is Undefined, optional
        map roles scope
    realmId : str, default is Undefined, optional
        The realm this group exists in.
    tokenExchangeScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderTokenExchangeScopeItems0], default is Undefined, optional
        token exchange scope
    viewScope : [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderViewScopeItems0], default is Undefined, optional
        view scope
    """


    authorizationResourceServerId?: str

    clientId?: str

    configureScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderConfigureScopeItems0]

    enabled?: bool

    id?: str

    manageScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderManageScopeItems0]

    mapRolesClientScopeScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderMapRolesClientScopeScopeItems0]

    mapRolesCompositeScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderMapRolesCompositeScopeItems0]

    mapRolesScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderMapRolesScopeItems0]

    realmId?: str

    tokenExchangeScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderTokenExchangeScopeItems0]

    viewScope?: [OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderViewScopeItems0]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderConfigureScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions status at provider configure scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderManageScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions status at provider manage scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderMapRolesClientScopeScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions status at provider map roles client scope scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderMapRolesCompositeScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions status at provider map roles composite scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderMapRolesScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions status at provider map roles scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderTokenExchangeScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions status at provider token exchange scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusAtProviderViewScopeItems0:
    r"""
    openidclient keycloakm crossplane io v1alpha1 client permissions status at provider view scope items0

    Attributes
    ----------
    decisionStrategy : str, default is Undefined, optional
        The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
    description : str, default is Undefined, optional
        A description for the permission scope
    policies : [str], default is Undefined, optional
        A list of policy IDs
    """


    decisionStrategy?: str

    description?: str

    policies?: [str]


schema OpenidclientKeycloakmCrossplaneIoV1alpha1ClientPermissionsStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


