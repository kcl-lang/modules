"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Broker:
    r"""
    Broker is the Schema for the Brokers API. Provides an MQ Broker Resource

    Attributes
    ----------
    apiVersion : str, default is "mq.aws.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Broker", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MqAwsUpboundIoV1beta2BrokerSpec, default is Undefined, required
        spec
    status : MqAwsUpboundIoV1beta2BrokerStatus, default is Undefined, optional
        status
    """


    apiVersion: "mq.aws.upbound.io/v1beta2" = "mq.aws.upbound.io/v1beta2"

    kind: "Broker" = "Broker"

    metadata?: v1.ObjectMeta

    spec: MqAwsUpboundIoV1beta2BrokerSpec

    status?: MqAwsUpboundIoV1beta2BrokerStatus


schema MqAwsUpboundIoV1beta2BrokerSpec:
    r"""
    BrokerSpec defines the desired state of Broker

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : MqAwsUpboundIoV1beta2BrokerSpecForProvider, default is Undefined, required
        for provider
    initProvider : MqAwsUpboundIoV1beta2BrokerSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : MqAwsUpboundIoV1beta2BrokerSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : MqAwsUpboundIoV1beta2BrokerSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: MqAwsUpboundIoV1beta2BrokerSpecForProvider

    initProvider?: MqAwsUpboundIoV1beta2BrokerSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: MqAwsUpboundIoV1beta2BrokerSpecProviderConfigRef

    publishConnectionDetailsTo?: MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: MqAwsUpboundIoV1beta2BrokerSpecWriteConnectionSecretToRef


schema MqAwsUpboundIoV1beta2BrokerSpecForProvider:
    r"""
    mq aws upbound io v1beta2 broker spec for provider

    Attributes
    ----------
    applyImmediately : bool, default is Undefined, optional
        Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is false.
    authenticationStrategy : str, default is Undefined, optional
        Authentication strategy used to secure the broker. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.
    autoMinorVersionUpgrade : bool, default is Undefined, optional
        Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
    brokerName : str, default is Undefined, optional
        Name of the broker.
    configuration : MqAwsUpboundIoV1beta2BrokerSpecForProviderConfiguration, default is Undefined, optional
        configuration
    dataReplicationMode : str, default is Undefined, optional
        Defines whether this broker is a part of a data replication pair. Valid values are CRDR and NONE.
    dataReplicationPrimaryBrokerArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when data_replication_mode is CRDR.
    dataReplicationPrimaryBrokerArnRef : MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnRef, default is Undefined, optional
        data replication primary broker arn ref
    dataReplicationPrimaryBrokerArnSelector : MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnSelector, default is Undefined, optional
        data replication primary broker arn selector
    deploymentMode : str, default is Undefined, optional
        Deployment mode of the broker. Valid values are SINGLE_INSTANCE, ACTIVE_STANDBY_MULTI_AZ, and CLUSTER_MULTI_AZ. Default is SINGLE_INSTANCE.
    encryptionOptions : MqAwsUpboundIoV1beta2BrokerSpecForProviderEncryptionOptions, default is Undefined, optional
        encryption options
    engineType : str, default is Undefined, optional
        Type of broker engine. Valid values are ActiveMQ and RabbitMQ.
    engineVersion : str, default is Undefined, optional
        Version of the broker engine. See the AmazonMQ Broker Engine docs for supported versions. For example, 5.17.6.
    hostInstanceType : str, default is Undefined, optional
        Broker's instance type. For example, mq.t3.micro, mq.m5.large.
    ldapServerMetadata : MqAwsUpboundIoV1beta2BrokerSpecForProviderLdapServerMetadata, default is Undefined, optional
        ldap server metadata
    logs : MqAwsUpboundIoV1beta2BrokerSpecForProviderLogs, default is Undefined, optional
        logs
    maintenanceWindowStartTime : MqAwsUpboundIoV1beta2BrokerSpecForProviderMaintenanceWindowStartTime, default is Undefined, optional
        maintenance window start time
    publiclyAccessible : bool, default is Undefined, optional
        Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    securityGroupRefs : [MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroups.
    securityGroupSelector : MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupSelector, default is Undefined, optional
        security group selector
    securityGroups : [str], default is Undefined, optional
        List of security group IDs assigned to the broker.
    storageType : str, default is Undefined, optional
        Storage type of the broker. For engine_type ActiveMQ, the valid values are efs and ebs, and the AWS-default is efs. For engine_type RabbitMQ, only ebs is supported. When using ebs, only the mq.m5 broker instance type family is supported.
    subnetIdRefs : [MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnetIds.
    subnetIdSelector : MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDSelector, default is Undefined, optional
        subnet Id selector
    subnetIds : [str], default is Undefined, optional
        List of subnet IDs in which to launch the broker. A SINGLE_INSTANCE deployment requires one subnet. An ACTIVE_STANDBY_MULTI_AZ deployment requires multiple subnets.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    user : [MqAwsUpboundIoV1beta2BrokerSpecForProviderUserItems0], default is Undefined, optional
        Configuration block for broker users. For engine_type of RabbitMQ, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
    """


    applyImmediately?: bool

    authenticationStrategy?: str

    autoMinorVersionUpgrade?: bool

    brokerName?: str

    configuration?: MqAwsUpboundIoV1beta2BrokerSpecForProviderConfiguration

    dataReplicationMode?: str

    dataReplicationPrimaryBrokerArn?: str

    dataReplicationPrimaryBrokerArnRef?: MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnRef

    dataReplicationPrimaryBrokerArnSelector?: MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnSelector

    deploymentMode?: str

    encryptionOptions?: MqAwsUpboundIoV1beta2BrokerSpecForProviderEncryptionOptions

    engineType?: str

    engineVersion?: str

    hostInstanceType?: str

    ldapServerMetadata?: MqAwsUpboundIoV1beta2BrokerSpecForProviderLdapServerMetadata

    logs?: MqAwsUpboundIoV1beta2BrokerSpecForProviderLogs

    maintenanceWindowStartTime?: MqAwsUpboundIoV1beta2BrokerSpecForProviderMaintenanceWindowStartTime

    publiclyAccessible?: bool

    region: str

    securityGroupRefs?: [MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupRefsItems0]

    securityGroupSelector?: MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupSelector

    securityGroups?: [str]

    storageType?: str

    subnetIdRefs?: [MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDRefsItems0]

    subnetIdSelector?: MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDSelector

    subnetIds?: [str]

    tags?: {str:str}

    user?: [MqAwsUpboundIoV1beta2BrokerSpecForProviderUserItems0]


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderConfiguration:
    r"""
    Configuration block for broker configuration. Applies to engine_type of ActiveMQ and RabbitMQ only. Detailed below.

    Attributes
    ----------
    id : str, default is Undefined, optional
        The Configuration ID.
    idRef : MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDRef, default is Undefined, optional
        id ref
    idSelector : MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDSelector, default is Undefined, optional
        id selector
    revision : float, default is Undefined, optional
        Revision of the Configuration.
    """


    id?: str

    idRef?: MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDRef

    idSelector?: MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDSelector

    revision?: float


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDRef:
    r"""
    Reference to a Configuration in mq to populate id.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDRefPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDSelector:
    r"""
    Selector for a Configuration in mq to populate id.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDSelectorPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderConfigurationIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnRef:
    r"""
    Reference to a Broker in mq to populate dataReplicationPrimaryBrokerArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnRefPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnSelector:
    r"""
    Selector for a Broker in mq to populate dataReplicationPrimaryBrokerArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnSelectorPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderDataReplicationPrimaryBrokerArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderEncryptionOptions:
    r"""
    Configuration block containing encryption options. Detailed below.

    Attributes
    ----------
    kmsKeyId : str, default is Undefined, optional
        Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting use_aws_owned_key to false. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.
    useAwsOwnedKey : bool, default is Undefined, optional
        Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to true. Setting to false without configuring kms_key_id will create an AWS-managed CMK aliased to aws/mq in your account.
    """


    kmsKeyId?: str

    useAwsOwnedKey?: bool


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderLdapServerMetadata:
    r"""
    Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for engine_type RabbitMQ. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)

    Attributes
    ----------
    hosts : [str], default is Undefined, optional
        List of a fully qualified domain name of the LDAP server and an optional failover server.
    roleBase : str, default is Undefined, optional
        Fully qualified name of the directory to search for a user’s groups.
    roleName : str, default is Undefined, optional
        Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
    roleSearchMatching : str, default is Undefined, optional
        Search criteria for groups.
    roleSearchSubtree : bool, default is Undefined, optional
        Whether the directory search scope is the entire sub-tree.
    serviceAccountPasswordSecretRef : MqAwsUpboundIoV1beta2BrokerSpecForProviderLdapServerMetadataServiceAccountPasswordSecretRef, default is Undefined, optional
        service account password secret ref
    serviceAccountUsername : str, default is Undefined, optional
        Service account username.
    userBase : str, default is Undefined, optional
        Fully qualified name of the directory where you want to search for users.
    userRoleName : str, default is Undefined, optional
        Specifies the name of the LDAP attribute for the user group membership.
    userSearchMatching : str, default is Undefined, optional
        Search criteria for users.
    userSearchSubtree : bool, default is Undefined, optional
        Whether the directory search scope is the entire sub-tree.
    """


    hosts?: [str]

    roleBase?: str

    roleName?: str

    roleSearchMatching?: str

    roleSearchSubtree?: bool

    serviceAccountPasswordSecretRef?: MqAwsUpboundIoV1beta2BrokerSpecForProviderLdapServerMetadataServiceAccountPasswordSecretRef

    serviceAccountUsername?: str

    userBase?: str

    userRoleName?: str

    userSearchMatching?: str

    userSearchSubtree?: bool


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderLdapServerMetadataServiceAccountPasswordSecretRef:
    r"""
    Service account password.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderLogs:
    r"""
    Configuration block for the logging configuration of the broker. Detailed below.

    Attributes
    ----------
    audit : str, default is Undefined, optional
        Enables audit logging. Auditing is only possible for engine_type of ActiveMQ. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to false.
    general : bool, default is Undefined, optional
        Enables general logging via CloudWatch. Defaults to false.
    """


    audit?: str

    general?: bool


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderMaintenanceWindowStartTime:
    r"""
    Configuration block for the maintenance window start time. Detailed below.

    Attributes
    ----------
    dayOfWeek : str, default is Undefined, optional
        Day of the week, e.g., MONDAY, TUESDAY, or WEDNESDAY.
    timeOfDay : str, default is Undefined, optional
        Time, in 24-hour format, e.g., 02:00.
    timeZone : str, default is Undefined, optional
        Time zone in either the Country/City format or the UTC offset format, e.g., CET.
    """


    dayOfWeek?: str

    timeOfDay?: str

    timeZone?: str


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupRefsItems0Policy


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroups.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupSelectorPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderSecurityGroupSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDRefsItems0Policy


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnetIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDSelectorPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderSubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderUserItems0:
    r"""
    mq aws upbound io v1beta2 broker spec for provider user items0

    Attributes
    ----------
    consoleAccess : bool, default is Undefined, optional
        Whether to enable access to the ActiveMQ Web Console for the user. Applies to engine_type of ActiveMQ only.
    groups : [str], default is Undefined, optional
        List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to engine_type of ActiveMQ only.
    passwordSecretRef : MqAwsUpboundIoV1beta2BrokerSpecForProviderUserItems0PasswordSecretRef, default is Undefined, optional
        password secret ref
    replicationUser : bool, default is Undefined, optional
        Whether to set set replication user. Defaults to false.
    username : str, default is Undefined, optional
        Username of the user.
    """


    consoleAccess?: bool

    groups?: [str]

    passwordSecretRef?: MqAwsUpboundIoV1beta2BrokerSpecForProviderUserItems0PasswordSecretRef

    replicationUser?: bool

    username?: str


schema MqAwsUpboundIoV1beta2BrokerSpecForProviderUserItems0PasswordSecretRef:
    r"""
    Password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema MqAwsUpboundIoV1beta2BrokerSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    applyImmediately : bool, default is Undefined, optional
        Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is false.
    authenticationStrategy : str, default is Undefined, optional
        Authentication strategy used to secure the broker. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.
    autoMinorVersionUpgrade : bool, default is Undefined, optional
        Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
    brokerName : str, default is Undefined, optional
        Name of the broker.
    configuration : MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfiguration, default is Undefined, optional
        configuration
    dataReplicationMode : str, default is Undefined, optional
        Defines whether this broker is a part of a data replication pair. Valid values are CRDR and NONE.
    dataReplicationPrimaryBrokerArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when data_replication_mode is CRDR.
    dataReplicationPrimaryBrokerArnRef : MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnRef, default is Undefined, optional
        data replication primary broker arn ref
    dataReplicationPrimaryBrokerArnSelector : MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnSelector, default is Undefined, optional
        data replication primary broker arn selector
    deploymentMode : str, default is Undefined, optional
        Deployment mode of the broker. Valid values are SINGLE_INSTANCE, ACTIVE_STANDBY_MULTI_AZ, and CLUSTER_MULTI_AZ. Default is SINGLE_INSTANCE.
    encryptionOptions : MqAwsUpboundIoV1beta2BrokerSpecInitProviderEncryptionOptions, default is Undefined, optional
        encryption options
    engineType : str, default is Undefined, optional
        Type of broker engine. Valid values are ActiveMQ and RabbitMQ.
    engineVersion : str, default is Undefined, optional
        Version of the broker engine. See the AmazonMQ Broker Engine docs for supported versions. For example, 5.17.6.
    hostInstanceType : str, default is Undefined, optional
        Broker's instance type. For example, mq.t3.micro, mq.m5.large.
    ldapServerMetadata : MqAwsUpboundIoV1beta2BrokerSpecInitProviderLdapServerMetadata, default is Undefined, optional
        ldap server metadata
    logs : MqAwsUpboundIoV1beta2BrokerSpecInitProviderLogs, default is Undefined, optional
        logs
    maintenanceWindowStartTime : MqAwsUpboundIoV1beta2BrokerSpecInitProviderMaintenanceWindowStartTime, default is Undefined, optional
        maintenance window start time
    publiclyAccessible : bool, default is Undefined, optional
        Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
    securityGroupRefs : [MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroups.
    securityGroupSelector : MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupSelector, default is Undefined, optional
        security group selector
    securityGroups : [str], default is Undefined, optional
        List of security group IDs assigned to the broker.
    storageType : str, default is Undefined, optional
        Storage type of the broker. For engine_type ActiveMQ, the valid values are efs and ebs, and the AWS-default is efs. For engine_type RabbitMQ, only ebs is supported. When using ebs, only the mq.m5 broker instance type family is supported.
    subnetIdRefs : [MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnetIds.
    subnetIdSelector : MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDSelector, default is Undefined, optional
        subnet Id selector
    subnetIds : [str], default is Undefined, optional
        List of subnet IDs in which to launch the broker. A SINGLE_INSTANCE deployment requires one subnet. An ACTIVE_STANDBY_MULTI_AZ deployment requires multiple subnets.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    user : [MqAwsUpboundIoV1beta2BrokerSpecInitProviderUserItems0], default is Undefined, optional
        Configuration block for broker users. For engine_type of RabbitMQ, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
    """


    applyImmediately?: bool

    authenticationStrategy?: str

    autoMinorVersionUpgrade?: bool

    brokerName?: str

    configuration?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfiguration

    dataReplicationMode?: str

    dataReplicationPrimaryBrokerArn?: str

    dataReplicationPrimaryBrokerArnRef?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnRef

    dataReplicationPrimaryBrokerArnSelector?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnSelector

    deploymentMode?: str

    encryptionOptions?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderEncryptionOptions

    engineType?: str

    engineVersion?: str

    hostInstanceType?: str

    ldapServerMetadata?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderLdapServerMetadata

    logs?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderLogs

    maintenanceWindowStartTime?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderMaintenanceWindowStartTime

    publiclyAccessible?: bool

    securityGroupRefs?: [MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupRefsItems0]

    securityGroupSelector?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupSelector

    securityGroups?: [str]

    storageType?: str

    subnetIdRefs?: [MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDRefsItems0]

    subnetIdSelector?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDSelector

    subnetIds?: [str]

    tags?: {str:str}

    user?: [MqAwsUpboundIoV1beta2BrokerSpecInitProviderUserItems0]


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfiguration:
    r"""
    Configuration block for broker configuration. Applies to engine_type of ActiveMQ and RabbitMQ only. Detailed below.

    Attributes
    ----------
    id : str, default is Undefined, optional
        The Configuration ID.
    idRef : MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDRef, default is Undefined, optional
        id ref
    idSelector : MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDSelector, default is Undefined, optional
        id selector
    revision : float, default is Undefined, optional
        Revision of the Configuration.
    """


    id?: str

    idRef?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDRef

    idSelector?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDSelector

    revision?: float


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDRef:
    r"""
    Reference to a Configuration in mq to populate id.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDRefPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDSelector:
    r"""
    Selector for a Configuration in mq to populate id.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDSelectorPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderConfigurationIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnRef:
    r"""
    Reference to a Broker in mq to populate dataReplicationPrimaryBrokerArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnRefPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnSelector:
    r"""
    Selector for a Broker in mq to populate dataReplicationPrimaryBrokerArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnSelectorPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderDataReplicationPrimaryBrokerArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderEncryptionOptions:
    r"""
    Configuration block containing encryption options. Detailed below.

    Attributes
    ----------
    kmsKeyId : str, default is Undefined, optional
        Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting use_aws_owned_key to false. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.
    useAwsOwnedKey : bool, default is Undefined, optional
        Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to true. Setting to false without configuring kms_key_id will create an AWS-managed CMK aliased to aws/mq in your account.
    """


    kmsKeyId?: str

    useAwsOwnedKey?: bool


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderLdapServerMetadata:
    r"""
    Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for engine_type RabbitMQ. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)

    Attributes
    ----------
    hosts : [str], default is Undefined, optional
        List of a fully qualified domain name of the LDAP server and an optional failover server.
    roleBase : str, default is Undefined, optional
        Fully qualified name of the directory to search for a user’s groups.
    roleName : str, default is Undefined, optional
        Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
    roleSearchMatching : str, default is Undefined, optional
        Search criteria for groups.
    roleSearchSubtree : bool, default is Undefined, optional
        Whether the directory search scope is the entire sub-tree.
    serviceAccountPasswordSecretRef : MqAwsUpboundIoV1beta2BrokerSpecInitProviderLdapServerMetadataServiceAccountPasswordSecretRef, default is Undefined, optional
        service account password secret ref
    serviceAccountUsername : str, default is Undefined, optional
        Service account username.
    userBase : str, default is Undefined, optional
        Fully qualified name of the directory where you want to search for users.
    userRoleName : str, default is Undefined, optional
        Specifies the name of the LDAP attribute for the user group membership.
    userSearchMatching : str, default is Undefined, optional
        Search criteria for users.
    userSearchSubtree : bool, default is Undefined, optional
        Whether the directory search scope is the entire sub-tree.
    """


    hosts?: [str]

    roleBase?: str

    roleName?: str

    roleSearchMatching?: str

    roleSearchSubtree?: bool

    serviceAccountPasswordSecretRef?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderLdapServerMetadataServiceAccountPasswordSecretRef

    serviceAccountUsername?: str

    userBase?: str

    userRoleName?: str

    userSearchMatching?: str

    userSearchSubtree?: bool


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderLdapServerMetadataServiceAccountPasswordSecretRef:
    r"""
    Service account password.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderLogs:
    r"""
    Configuration block for the logging configuration of the broker. Detailed below.

    Attributes
    ----------
    audit : str, default is Undefined, optional
        Enables audit logging. Auditing is only possible for engine_type of ActiveMQ. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to false.
    general : bool, default is Undefined, optional
        Enables general logging via CloudWatch. Defaults to false.
    """


    audit?: str

    general?: bool


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderMaintenanceWindowStartTime:
    r"""
    Configuration block for the maintenance window start time. Detailed below.

    Attributes
    ----------
    dayOfWeek : str, default is Undefined, optional
        Day of the week, e.g., MONDAY, TUESDAY, or WEDNESDAY.
    timeOfDay : str, default is Undefined, optional
        Time, in 24-hour format, e.g., 02:00.
    timeZone : str, default is Undefined, optional
        Time zone in either the Country/City format or the UTC offset format, e.g., CET.
    """


    dayOfWeek?: str

    timeOfDay?: str

    timeZone?: str


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupRefsItems0Policy


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroups.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupSelectorPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderSecurityGroupSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDRefsItems0Policy


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnetIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDSelectorPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderSubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderUserItems0:
    r"""
    mq aws upbound io v1beta2 broker spec init provider user items0

    Attributes
    ----------
    consoleAccess : bool, default is Undefined, optional
        Whether to enable access to the ActiveMQ Web Console for the user. Applies to engine_type of ActiveMQ only.
    groups : [str], default is Undefined, optional
        List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to engine_type of ActiveMQ only.
    passwordSecretRef : MqAwsUpboundIoV1beta2BrokerSpecInitProviderUserItems0PasswordSecretRef, default is Undefined, required
        password secret ref
    replicationUser : bool, default is Undefined, optional
        Whether to set set replication user. Defaults to false.
    username : str, default is Undefined, optional
        Username of the user.
    """


    consoleAccess?: bool

    groups?: [str]

    passwordSecretRef: MqAwsUpboundIoV1beta2BrokerSpecInitProviderUserItems0PasswordSecretRef

    replicationUser?: bool

    username?: str


schema MqAwsUpboundIoV1beta2BrokerSpecInitProviderUserItems0PasswordSecretRef:
    r"""
    Password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema MqAwsUpboundIoV1beta2BrokerSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : MqAwsUpboundIoV1beta2BrokerSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: MqAwsUpboundIoV1beta2BrokerSpecProviderConfigRefPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsToConfigRef

    metadata?: MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsToMetadata

    name: str


schema MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsToConfigRefPolicy


schema MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema MqAwsUpboundIoV1beta2BrokerSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema MqAwsUpboundIoV1beta2BrokerSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema MqAwsUpboundIoV1beta2BrokerStatus:
    r"""
    BrokerStatus defines the observed state of Broker.

    Attributes
    ----------
    atProvider : MqAwsUpboundIoV1beta2BrokerStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [MqAwsUpboundIoV1beta2BrokerStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: MqAwsUpboundIoV1beta2BrokerStatusAtProvider

    conditions?: [MqAwsUpboundIoV1beta2BrokerStatusConditionsItems0]

    observedGeneration?: int


schema MqAwsUpboundIoV1beta2BrokerStatusAtProvider:
    r"""
    mq aws upbound io v1beta2 broker status at provider

    Attributes
    ----------
    applyImmediately : bool, default is Undefined, optional
        Specifies whether any broker modifications are applied immediately, or during the next maintenance window. Default is false.
    arn : str, default is Undefined, optional
        ARN of the broker.
    authenticationStrategy : str, default is Undefined, optional
        Authentication strategy used to secure the broker. Valid values are simple and ldap. ldap is not supported for engine_type RabbitMQ.
    autoMinorVersionUpgrade : bool, default is Undefined, optional
        Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
    brokerName : str, default is Undefined, optional
        Name of the broker.
    configuration : MqAwsUpboundIoV1beta2BrokerStatusAtProviderConfiguration, default is Undefined, optional
        configuration
    dataReplicationMode : str, default is Undefined, optional
        Defines whether this broker is a part of a data replication pair. Valid values are CRDR and NONE.
    dataReplicationPrimaryBrokerArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when data_replication_mode is CRDR.
    deploymentMode : str, default is Undefined, optional
        Deployment mode of the broker. Valid values are SINGLE_INSTANCE, ACTIVE_STANDBY_MULTI_AZ, and CLUSTER_MULTI_AZ. Default is SINGLE_INSTANCE.
    encryptionOptions : MqAwsUpboundIoV1beta2BrokerStatusAtProviderEncryptionOptions, default is Undefined, optional
        encryption options
    engineType : str, default is Undefined, optional
        Type of broker engine. Valid values are ActiveMQ and RabbitMQ.
    engineVersion : str, default is Undefined, optional
        Version of the broker engine. See the AmazonMQ Broker Engine docs for supported versions. For example, 5.17.6.
    hostInstanceType : str, default is Undefined, optional
        Broker's instance type. For example, mq.t3.micro, mq.m5.large.
    id : str, default is Undefined, optional
        Unique ID that Amazon MQ generates for the broker.
    instances : [MqAwsUpboundIoV1beta2BrokerStatusAtProviderInstancesItems0], default is Undefined, optional
        List of information about allocated brokers (both active & standby).
    ldapServerMetadata : MqAwsUpboundIoV1beta2BrokerStatusAtProviderLdapServerMetadata, default is Undefined, optional
        ldap server metadata
    logs : MqAwsUpboundIoV1beta2BrokerStatusAtProviderLogs, default is Undefined, optional
        logs
    maintenanceWindowStartTime : MqAwsUpboundIoV1beta2BrokerStatusAtProviderMaintenanceWindowStartTime, default is Undefined, optional
        maintenance window start time
    pendingDataReplicationMode : str, default is Undefined, optional
        The data replication mode that will be applied after reboot.
    publiclyAccessible : bool, default is Undefined, optional
        Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
    securityGroups : [str], default is Undefined, optional
        List of security group IDs assigned to the broker.
    storageType : str, default is Undefined, optional
        Storage type of the broker. For engine_type ActiveMQ, the valid values are efs and ebs, and the AWS-default is efs. For engine_type RabbitMQ, only ebs is supported. When using ebs, only the mq.m5 broker instance type family is supported.
    subnetIds : [str], default is Undefined, optional
        List of subnet IDs in which to launch the broker. A SINGLE_INSTANCE deployment requires one subnet. An ACTIVE_STANDBY_MULTI_AZ deployment requires multiple subnets.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    user : [MqAwsUpboundIoV1beta2BrokerStatusAtProviderUserItems0], default is Undefined, optional
        Configuration block for broker users. For engine_type of RabbitMQ, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
    """


    applyImmediately?: bool

    arn?: str

    authenticationStrategy?: str

    autoMinorVersionUpgrade?: bool

    brokerName?: str

    configuration?: MqAwsUpboundIoV1beta2BrokerStatusAtProviderConfiguration

    dataReplicationMode?: str

    dataReplicationPrimaryBrokerArn?: str

    deploymentMode?: str

    encryptionOptions?: MqAwsUpboundIoV1beta2BrokerStatusAtProviderEncryptionOptions

    engineType?: str

    engineVersion?: str

    hostInstanceType?: str

    id?: str

    instances?: [MqAwsUpboundIoV1beta2BrokerStatusAtProviderInstancesItems0]

    ldapServerMetadata?: MqAwsUpboundIoV1beta2BrokerStatusAtProviderLdapServerMetadata

    logs?: MqAwsUpboundIoV1beta2BrokerStatusAtProviderLogs

    maintenanceWindowStartTime?: MqAwsUpboundIoV1beta2BrokerStatusAtProviderMaintenanceWindowStartTime

    pendingDataReplicationMode?: str

    publiclyAccessible?: bool

    securityGroups?: [str]

    storageType?: str

    subnetIds?: [str]

    tags?: {str:str}

    tagsAll?: {str:str}

    user?: [MqAwsUpboundIoV1beta2BrokerStatusAtProviderUserItems0]


schema MqAwsUpboundIoV1beta2BrokerStatusAtProviderConfiguration:
    r"""
    Configuration block for broker configuration. Applies to engine_type of ActiveMQ and RabbitMQ only. Detailed below.

    Attributes
    ----------
    id : str, default is Undefined, optional
        The Configuration ID.
    revision : float, default is Undefined, optional
        Revision of the Configuration.
    """


    id?: str

    revision?: float


schema MqAwsUpboundIoV1beta2BrokerStatusAtProviderEncryptionOptions:
    r"""
    Configuration block containing encryption options. Detailed below.

    Attributes
    ----------
    kmsKeyId : str, default is Undefined, optional
        Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting use_aws_owned_key to false. To perform drift detection when AWS-managed CMKs or customer-managed CMKs are in use, this value must be configured.
    useAwsOwnedKey : bool, default is Undefined, optional
        Whether to enable an AWS-owned KMS CMK that is not in your account. Defaults to true. Setting to false without configuring kms_key_id will create an AWS-managed CMK aliased to aws/mq in your account.
    """


    kmsKeyId?: str

    useAwsOwnedKey?: bool


schema MqAwsUpboundIoV1beta2BrokerStatusAtProviderInstancesItems0:
    r"""
    mq aws upbound io v1beta2 broker status at provider instances items0

    Attributes
    ----------
    consoleUrl : str, default is Undefined, optional
        The URL of the ActiveMQ Web Console or the RabbitMQ Management UI depending on engine_type.
    endpoints : [str], default is Undefined, optional
        Broker's wire-level protocol endpoints in the following order & format referenceable e.g., as instances.0.endpoints.0 (SSL):
    ipAddress : str, default is Undefined, optional
        IP Address of the broker.
    """


    consoleUrl?: str

    endpoints?: [str]

    ipAddress?: str


schema MqAwsUpboundIoV1beta2BrokerStatusAtProviderLdapServerMetadata:
    r"""
    Configuration block for the LDAP server used to authenticate and authorize connections to the broker. Not supported for engine_type RabbitMQ. Detailed below. (Currently, AWS may not process changes to LDAP server metadata.)

    Attributes
    ----------
    hosts : [str], default is Undefined, optional
        List of a fully qualified domain name of the LDAP server and an optional failover server.
    roleBase : str, default is Undefined, optional
        Fully qualified name of the directory to search for a user’s groups.
    roleName : str, default is Undefined, optional
        Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.
    roleSearchMatching : str, default is Undefined, optional
        Search criteria for groups.
    roleSearchSubtree : bool, default is Undefined, optional
        Whether the directory search scope is the entire sub-tree.
    serviceAccountUsername : str, default is Undefined, optional
        Service account username.
    userBase : str, default is Undefined, optional
        Fully qualified name of the directory where you want to search for users.
    userRoleName : str, default is Undefined, optional
        Specifies the name of the LDAP attribute for the user group membership.
    userSearchMatching : str, default is Undefined, optional
        Search criteria for users.
    userSearchSubtree : bool, default is Undefined, optional
        Whether the directory search scope is the entire sub-tree.
    """


    hosts?: [str]

    roleBase?: str

    roleName?: str

    roleSearchMatching?: str

    roleSearchSubtree?: bool

    serviceAccountUsername?: str

    userBase?: str

    userRoleName?: str

    userSearchMatching?: str

    userSearchSubtree?: bool


schema MqAwsUpboundIoV1beta2BrokerStatusAtProviderLogs:
    r"""
    Configuration block for the logging configuration of the broker. Detailed below.

    Attributes
    ----------
    audit : str, default is Undefined, optional
        Enables audit logging. Auditing is only possible for engine_type of ActiveMQ. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to false.
    general : bool, default is Undefined, optional
        Enables general logging via CloudWatch. Defaults to false.
    """


    audit?: str

    general?: bool


schema MqAwsUpboundIoV1beta2BrokerStatusAtProviderMaintenanceWindowStartTime:
    r"""
    Configuration block for the maintenance window start time. Detailed below.

    Attributes
    ----------
    dayOfWeek : str, default is Undefined, optional
        Day of the week, e.g., MONDAY, TUESDAY, or WEDNESDAY.
    timeOfDay : str, default is Undefined, optional
        Time, in 24-hour format, e.g., 02:00.
    timeZone : str, default is Undefined, optional
        Time zone in either the Country/City format or the UTC offset format, e.g., CET.
    """


    dayOfWeek?: str

    timeOfDay?: str

    timeZone?: str


schema MqAwsUpboundIoV1beta2BrokerStatusAtProviderUserItems0:
    r"""
    mq aws upbound io v1beta2 broker status at provider user items0

    Attributes
    ----------
    consoleAccess : bool, default is Undefined, optional
        Whether to enable access to the ActiveMQ Web Console for the user. Applies to engine_type of ActiveMQ only.
    groups : [str], default is Undefined, optional
        List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to engine_type of ActiveMQ only.
    replicationUser : bool, default is Undefined, optional
        Whether to set set replication user. Defaults to false.
    username : str, default is Undefined, optional
        Username of the user.
    """


    consoleAccess?: bool

    groups?: [str]

    replicationUser?: bool

    username?: str


schema MqAwsUpboundIoV1beta2BrokerStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


