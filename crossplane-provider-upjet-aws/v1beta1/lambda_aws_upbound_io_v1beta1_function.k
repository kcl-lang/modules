"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Function:
    r"""
    Function is the Schema for the Functions API. Provides a Lambda Function resource. Lambda allows you to trigger execution of code in response to events in AWS, enabling serverless backend solutions. The Lambda Function itself includes source code and runtime configuration.

    Attributes
    ----------
    apiVersion : str, default is "lambda.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Function", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : LambdaAwsUpboundIoV1beta1FunctionSpec, default is Undefined, required
        spec
    status : LambdaAwsUpboundIoV1beta1FunctionStatus, default is Undefined, optional
        status
    """


    apiVersion: "lambda.aws.upbound.io/v1beta1" = "lambda.aws.upbound.io/v1beta1"

    kind: "Function" = "Function"

    metadata?: v1.ObjectMeta

    spec: LambdaAwsUpboundIoV1beta1FunctionSpec

    status?: LambdaAwsUpboundIoV1beta1FunctionStatus


schema LambdaAwsUpboundIoV1beta1FunctionSpec:
    r"""
    FunctionSpec defines the desired state of Function

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : LambdaAwsUpboundIoV1beta1FunctionSpecForProvider, default is Undefined, required
        for provider
    initProvider : LambdaAwsUpboundIoV1beta1FunctionSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : LambdaAwsUpboundIoV1beta1FunctionSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : LambdaAwsUpboundIoV1beta1FunctionSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: LambdaAwsUpboundIoV1beta1FunctionSpecForProvider

    initProvider?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: LambdaAwsUpboundIoV1beta1FunctionSpecProviderConfigRef

    publishConnectionDetailsTo?: LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: LambdaAwsUpboundIoV1beta1FunctionSpecWriteConnectionSecretToRef


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProvider:
    r"""
    lambda aws upbound io v1beta1 function spec for provider

    Attributes
    ----------
    architectures : [str], default is Undefined, optional
        Instruction set architecture for your Lambda function. Valid values are ["x86_64"] and ["arm64"]. Default is ["x86_64"]. Removing this attribute, function's architecture stay the same.
    codeSigningConfigArn : str, default is Undefined, optional
        To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
    deadLetterConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderDeadLetterConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    description : str, default is Undefined, optional
        Description of what your Lambda Function does.
    environment : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderEnvironmentItems0], default is Undefined, optional
        Configuration block. Detailed below.
    ephemeralStorage : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderEphemeralStorageItems0], default is Undefined, optional
        The amount of Ephemeral storage(/tmp) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of 512MB. Detailed below.
    fileSystemConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    handler : str, default is Undefined, optional
        Function entrypoint in your code.
    imageConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderImageConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    imageUri : str, default is Undefined, optional
        ECR image URI containing the function's deployment package. Exactly one of filename, image_uri,  or s3_bucket must be specified.
    kmsKeyArn : str, default is Undefined, optional
        Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. To fix the perpetual difference, remove this configuration.
    kmsKeyArnRef : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnRef, default is Undefined, optional
        kms key arn ref
    kmsKeyArnSelector : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnSelector, default is Undefined, optional
        kms key arn selector
    layers : [str], default is Undefined, optional
        List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See Lambda Layers
    layersRefs : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersRefsItems0], default is Undefined, optional
        References to LayerVersion in lambda to populate layers.
    layersSelector : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersSelector, default is Undefined, optional
        layers selector
    loggingConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLoggingConfigItems0], default is Undefined, optional
        Configuration block used to specify advanced logging settings. Detailed below.
    memorySize : float, default is Undefined, optional
        Amount of memory in MB your Lambda Function can use at runtime. Defaults to 128. See Limits
    packageType : str, default is Undefined, optional
        Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.
    publish : bool, default is Undefined, optional
        Whether to publish creation/change as new Lambda Function Version. Defaults to false.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    replaceSecurityGroupsOnDestroy : bool, default is Undefined, optional
        AWS no longer supports this operation. This attribute now has no effect and will be removed in a future major version. Whether to replace the security groups on associated lambda network interfaces upon destruction. Removing these security groups from orphaned network interfaces can speed up security group deletion times by avoiding a dependency on AWS's internal cleanup operations. By default, the ENI security groups will be replaced with the default security group in the function's VPC. Set the replacement_security_group_ids attribute to use a custom list of security groups for replacement.
    replacementSecurityGroupIdRefs : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate replacementSecurityGroupIds.
    replacementSecurityGroupIdSelector : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDSelector, default is Undefined, optional
        replacement security group Id selector
    replacementSecurityGroupIds : [str], default is Undefined, optional
        List of security group IDs to assign to orphaned Lambda function network interfaces upon destruction. replace_security_groups_on_destroy must be set to true to use this attribute.
    reservedConcurrentExecutions : float, default is Undefined, optional
        Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1. See Managing Concurrency
    role : str, default is Undefined, optional
        Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
    roleRef : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleRef, default is Undefined, optional
        role ref
    roleSelector : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleSelector, default is Undefined, optional
        role selector
    runtime : str, default is Undefined, optional
        Identifier of the function's runtime. See Runtimes for valid values.
    s3Bucket : str, default is Undefined, optional
        S3 bucket location containing the function's deployment package. This bucket must reside in the same AWS region where you are creating the Lambda function. Exactly one of filename, image_uri, or s3_bucket must be specified. When s3_bucket is set, s3_key is required.
    s3BucketRef : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketRef, default is Undefined, optional
        s3 bucket ref
    s3BucketSelector : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketSelector, default is Undefined, optional
        s3 bucket selector
    s3Key : str, default is Undefined, optional
        S3 key of an object containing the function's deployment package. When s3_bucket is set, s3_key is required.
    s3ObjectVersion : str, default is Undefined, optional
        Object version containing the function's deployment package. Conflicts with filename and image_uri.
    skipDestroy : bool, default is Undefined, optional
        skip destroy
    snapStart : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderSnapStartItems0], default is Undefined, optional
        Snap start settings block. Detailed below.
    sourceCodeHash : str, default is Undefined, optional
        Used to trigger updates. Must be set to a base64 encoded SHA256 hash of the package file specified with either filename or s3_key. If you have specified this field manually, it should be the actual (computed) hash of the underlying lambda function specified in the filename, image_uri, s3_bucket fields.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    timeout : float, default is Undefined, optional
        Amount of time your Lambda Function has to run in seconds. Defaults to 3. See Limits.
    tracingConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderTracingConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    vpcConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    """


    architectures?: [str]

    codeSigningConfigArn?: str

    deadLetterConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderDeadLetterConfigItems0]

    description?: str

    environment?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderEnvironmentItems0]

    ephemeralStorage?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderEphemeralStorageItems0]

    fileSystemConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0]

    handler?: str

    imageConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderImageConfigItems0]

    imageUri?: str

    kmsKeyArn?: str

    kmsKeyArnRef?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnRef

    kmsKeyArnSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnSelector

    layers?: [str]

    layersRefs?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersRefsItems0]

    layersSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersSelector

    loggingConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLoggingConfigItems0]

    memorySize?: float

    packageType?: str

    publish?: bool

    region: str

    replaceSecurityGroupsOnDestroy?: bool

    replacementSecurityGroupIdRefs?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDRefsItems0]

    replacementSecurityGroupIdSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDSelector

    replacementSecurityGroupIds?: [str]

    reservedConcurrentExecutions?: float

    role?: str

    roleRef?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleRef

    roleSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleSelector

    runtime?: str

    s3Bucket?: str

    s3BucketRef?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketRef

    s3BucketSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketSelector

    s3Key?: str

    s3ObjectVersion?: str

    skipDestroy?: bool

    snapStart?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderSnapStartItems0]

    sourceCodeHash?: str

    tags?: {str:str}

    timeout?: float

    tracingConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderTracingConfigItems0]

    vpcConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0]


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderDeadLetterConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec for provider dead letter config items0

    Attributes
    ----------
    targetArn : str, default is Undefined, optional
        ARN of an SNS topic or SQS queue to notify when an invocation fails. If this option is used, the function's IAM role must be granted suitable access to write to the target object, which means allowing either the sns:Publish or sqs:SendMessage action on this ARN, depending on which service is targeted.
    """


    targetArn?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderEnvironmentItems0:
    r"""
    lambda aws upbound io v1beta1 function spec for provider environment items0

    Attributes
    ----------
    variables : {str:str}, default is Undefined, optional
        Map of environment variables that are accessible from the function code during execution. If provided at least one key must be present.
    """


    variables?: {str:str}


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderEphemeralStorageItems0:
    r"""
    lambda aws upbound io v1beta1 function spec for provider ephemeral storage items0

    Attributes
    ----------
    size : float, default is Undefined, optional
        The size of the Lambda function Ephemeral storage(/tmp) represented in MB. The minimum supported ephemeral_storage value defaults to 512MB and the maximum supported value is 10240MB.
    """


    size?: float


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec for provider file system config items0

    Attributes
    ----------
    arn : str, default is Undefined, optional
        Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
    arnRef : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnRef, default is Undefined, optional
        arn ref
    arnSelector : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnSelector, default is Undefined, optional
        arn selector
    localMountPath : str, default is Undefined, optional
        Path where the function can access the file system, starting with /mnt/.
    """


    arn?: str

    arnRef?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnRef

    arnSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnSelector

    localMountPath?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnRef:
    r"""
    Reference to a AccessPoint in efs to populate arn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnRefPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnSelector:
    r"""
    Selector for a AccessPoint in efs to populate arn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderFileSystemConfigItems0ArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderImageConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec for provider image config items0

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Parameters that you want to pass in with entry_point.
    entryPoint : [str], default is Undefined, optional
        Entry point to your application, which is typically the location of the runtime executable.
    workingDirectory : str, default is Undefined, optional
        Working directory.
    """


    command?: [str]

    entryPoint?: [str]

    workingDirectory?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnRef:
    r"""
    Reference to a Key in kms to populate kmsKeyArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnRefPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnSelector:
    r"""
    Selector for a Key in kms to populate kmsKeyArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderKmsKeyArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersRefsItems0Policy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersSelector:
    r"""
    Selector for a list of LayerVersion in lambda to populate layers.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLayersSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderLoggingConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec for provider logging config items0

    Attributes
    ----------
    applicationLogLevel : str, default is Undefined, optional
        for JSON structured logs, choose the detail level of the logs your application sends to CloudWatch when using supported logging libraries.
    logFormat : str, default is Undefined, optional
        select between Text and structured JSON format for your function's logs.
    logGroup : str, default is Undefined, optional
        the CloudWatch log group your function sends logs to.
    systemLogLevel : str, default is Undefined, optional
        for JSON structured logs, choose the detail level of the Lambda platform event logs sent to CloudWatch, such as ERROR, DEBUG, or INFO.
    """


    applicationLogLevel?: str

    logFormat?: str

    logGroup?: str

    systemLogLevel?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDRefsItems0Policy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate replacementSecurityGroupIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderReplacementSecurityGroupIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleRef:
    r"""
    Reference to a Role in iam to populate role.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleRefPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleSelector:
    r"""
    Selector for a Role in iam to populate role.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderRoleSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketRef:
    r"""
    Reference to a Bucket in s3 to populate s3Bucket.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketRefPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketSelector:
    r"""
    Selector for a Bucket in s3 to populate s3Bucket.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderS3BucketSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderSnapStartItems0:
    r"""
    lambda aws upbound io v1beta1 function spec for provider snap start items0

    Attributes
    ----------
    applyOn : str, default is Undefined, optional
        Conditions where snap start is enabled. Valid values are PublishedVersions.
    """


    applyOn?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderTracingConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec for provider tracing config items0

    Attributes
    ----------
    mode : str, default is Undefined, optional
        Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are PassThrough and Active. If PassThrough, Lambda will only trace the request from an upstream service if it contains a tracing header with "sampled=1". If Active, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.
    """


    mode?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec for provider vpc config items0

    Attributes
    ----------
    ipv6AllowedForDualStack : bool, default is Undefined, optional
        Allows outbound IPv6 traffic on VPC functions that are connected to dual-stack subnets. Default is false.
    securityGroupIdRefs : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroupIds.
    securityGroupIdSelector : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDSelector, default is Undefined, optional
        security group Id selector
    securityGroupIds : [str], default is Undefined, optional
        List of security group IDs associated with the Lambda function.
    subnetIdRefs : [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnetIds.
    subnetIdSelector : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDSelector, default is Undefined, optional
        subnet Id selector
    subnetIds : [str], default is Undefined, optional
        List of subnet IDs associated with the Lambda function.
    """


    ipv6AllowedForDualStack?: bool

    securityGroupIdRefs?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDRefsItems0]

    securityGroupIdSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDSelector

    securityGroupIds?: [str]

    subnetIdRefs?: [LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDRefsItems0]

    subnetIdSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDSelector

    subnetIds?: [str]


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDRefsItems0Policy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SecurityGroupIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDRefsItems0Policy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnetIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecForProviderVpcConfigItems0SubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    architectures : [str], default is Undefined, optional
        Instruction set architecture for your Lambda function. Valid values are ["x86_64"] and ["arm64"]. Default is ["x86_64"]. Removing this attribute, function's architecture stay the same.
    codeSigningConfigArn : str, default is Undefined, optional
        To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
    deadLetterConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderDeadLetterConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    description : str, default is Undefined, optional
        Description of what your Lambda Function does.
    environment : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderEnvironmentItems0], default is Undefined, optional
        Configuration block. Detailed below.
    ephemeralStorage : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderEphemeralStorageItems0], default is Undefined, optional
        The amount of Ephemeral storage(/tmp) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of 512MB. Detailed below.
    fileSystemConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    handler : str, default is Undefined, optional
        Function entrypoint in your code.
    imageConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderImageConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    imageUri : str, default is Undefined, optional
        ECR image URI containing the function's deployment package. Exactly one of filename, image_uri,  or s3_bucket must be specified.
    kmsKeyArn : str, default is Undefined, optional
        Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. To fix the perpetual difference, remove this configuration.
    kmsKeyArnRef : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnRef, default is Undefined, optional
        kms key arn ref
    kmsKeyArnSelector : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnSelector, default is Undefined, optional
        kms key arn selector
    layers : [str], default is Undefined, optional
        List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See Lambda Layers
    layersRefs : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersRefsItems0], default is Undefined, optional
        References to LayerVersion in lambda to populate layers.
    layersSelector : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersSelector, default is Undefined, optional
        layers selector
    loggingConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLoggingConfigItems0], default is Undefined, optional
        Configuration block used to specify advanced logging settings. Detailed below.
    memorySize : float, default is Undefined, optional
        Amount of memory in MB your Lambda Function can use at runtime. Defaults to 128. See Limits
    packageType : str, default is Undefined, optional
        Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.
    publish : bool, default is Undefined, optional
        Whether to publish creation/change as new Lambda Function Version. Defaults to false.
    replaceSecurityGroupsOnDestroy : bool, default is Undefined, optional
        AWS no longer supports this operation. This attribute now has no effect and will be removed in a future major version. Whether to replace the security groups on associated lambda network interfaces upon destruction. Removing these security groups from orphaned network interfaces can speed up security group deletion times by avoiding a dependency on AWS's internal cleanup operations. By default, the ENI security groups will be replaced with the default security group in the function's VPC. Set the replacement_security_group_ids attribute to use a custom list of security groups for replacement.
    replacementSecurityGroupIdRefs : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate replacementSecurityGroupIds.
    replacementSecurityGroupIdSelector : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDSelector, default is Undefined, optional
        replacement security group Id selector
    replacementSecurityGroupIds : [str], default is Undefined, optional
        List of security group IDs to assign to orphaned Lambda function network interfaces upon destruction. replace_security_groups_on_destroy must be set to true to use this attribute.
    reservedConcurrentExecutions : float, default is Undefined, optional
        Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1. See Managing Concurrency
    role : str, default is Undefined, optional
        Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
    roleRef : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleRef, default is Undefined, optional
        role ref
    roleSelector : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleSelector, default is Undefined, optional
        role selector
    runtime : str, default is Undefined, optional
        Identifier of the function's runtime. See Runtimes for valid values.
    s3Bucket : str, default is Undefined, optional
        S3 bucket location containing the function's deployment package. This bucket must reside in the same AWS region where you are creating the Lambda function. Exactly one of filename, image_uri, or s3_bucket must be specified. When s3_bucket is set, s3_key is required.
    s3BucketRef : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketRef, default is Undefined, optional
        s3 bucket ref
    s3BucketSelector : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketSelector, default is Undefined, optional
        s3 bucket selector
    s3Key : str, default is Undefined, optional
        S3 key of an object containing the function's deployment package. When s3_bucket is set, s3_key is required.
    s3ObjectVersion : str, default is Undefined, optional
        Object version containing the function's deployment package. Conflicts with filename and image_uri.
    skipDestroy : bool, default is Undefined, optional
        skip destroy
    snapStart : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderSnapStartItems0], default is Undefined, optional
        Snap start settings block. Detailed below.
    sourceCodeHash : str, default is Undefined, optional
        Used to trigger updates. Must be set to a base64 encoded SHA256 hash of the package file specified with either filename or s3_key. If you have specified this field manually, it should be the actual (computed) hash of the underlying lambda function specified in the filename, image_uri, s3_bucket fields.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    timeout : float, default is Undefined, optional
        Amount of time your Lambda Function has to run in seconds. Defaults to 3. See Limits.
    tracingConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderTracingConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    vpcConfig : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    """


    architectures?: [str]

    codeSigningConfigArn?: str

    deadLetterConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderDeadLetterConfigItems0]

    description?: str

    environment?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderEnvironmentItems0]

    ephemeralStorage?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderEphemeralStorageItems0]

    fileSystemConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0]

    handler?: str

    imageConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderImageConfigItems0]

    imageUri?: str

    kmsKeyArn?: str

    kmsKeyArnRef?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnRef

    kmsKeyArnSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnSelector

    layers?: [str]

    layersRefs?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersRefsItems0]

    layersSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersSelector

    loggingConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLoggingConfigItems0]

    memorySize?: float

    packageType?: str

    publish?: bool

    replaceSecurityGroupsOnDestroy?: bool

    replacementSecurityGroupIdRefs?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDRefsItems0]

    replacementSecurityGroupIdSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDSelector

    replacementSecurityGroupIds?: [str]

    reservedConcurrentExecutions?: float

    role?: str

    roleRef?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleRef

    roleSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleSelector

    runtime?: str

    s3Bucket?: str

    s3BucketRef?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketRef

    s3BucketSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketSelector

    s3Key?: str

    s3ObjectVersion?: str

    skipDestroy?: bool

    snapStart?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderSnapStartItems0]

    sourceCodeHash?: str

    tags?: {str:str}

    timeout?: float

    tracingConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderTracingConfigItems0]

    vpcConfig?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0]


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderDeadLetterConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec init provider dead letter config items0

    Attributes
    ----------
    targetArn : str, default is Undefined, optional
        ARN of an SNS topic or SQS queue to notify when an invocation fails. If this option is used, the function's IAM role must be granted suitable access to write to the target object, which means allowing either the sns:Publish or sqs:SendMessage action on this ARN, depending on which service is targeted.
    """


    targetArn?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderEnvironmentItems0:
    r"""
    lambda aws upbound io v1beta1 function spec init provider environment items0

    Attributes
    ----------
    variables : {str:str}, default is Undefined, optional
        Map of environment variables that are accessible from the function code during execution. If provided at least one key must be present.
    """


    variables?: {str:str}


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderEphemeralStorageItems0:
    r"""
    lambda aws upbound io v1beta1 function spec init provider ephemeral storage items0

    Attributes
    ----------
    size : float, default is Undefined, optional
        The size of the Lambda function Ephemeral storage(/tmp) represented in MB. The minimum supported ephemeral_storage value defaults to 512MB and the maximum supported value is 10240MB.
    """


    size?: float


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec init provider file system config items0

    Attributes
    ----------
    arn : str, default is Undefined, optional
        Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
    arnRef : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnRef, default is Undefined, optional
        arn ref
    arnSelector : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnSelector, default is Undefined, optional
        arn selector
    localMountPath : str, default is Undefined, optional
        Path where the function can access the file system, starting with /mnt/.
    """


    arn?: str

    arnRef?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnRef

    arnSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnSelector

    localMountPath?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnRef:
    r"""
    Reference to a AccessPoint in efs to populate arn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnRefPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnSelector:
    r"""
    Selector for a AccessPoint in efs to populate arn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderFileSystemConfigItems0ArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderImageConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec init provider image config items0

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Parameters that you want to pass in with entry_point.
    entryPoint : [str], default is Undefined, optional
        Entry point to your application, which is typically the location of the runtime executable.
    workingDirectory : str, default is Undefined, optional
        Working directory.
    """


    command?: [str]

    entryPoint?: [str]

    workingDirectory?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnRef:
    r"""
    Reference to a Key in kms to populate kmsKeyArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnRefPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnSelector:
    r"""
    Selector for a Key in kms to populate kmsKeyArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderKmsKeyArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersRefsItems0Policy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersSelector:
    r"""
    Selector for a list of LayerVersion in lambda to populate layers.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLayersSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderLoggingConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec init provider logging config items0

    Attributes
    ----------
    applicationLogLevel : str, default is Undefined, optional
        for JSON structured logs, choose the detail level of the logs your application sends to CloudWatch when using supported logging libraries.
    logFormat : str, default is Undefined, optional
        select between Text and structured JSON format for your function's logs.
    logGroup : str, default is Undefined, optional
        the CloudWatch log group your function sends logs to.
    systemLogLevel : str, default is Undefined, optional
        for JSON structured logs, choose the detail level of the Lambda platform event logs sent to CloudWatch, such as ERROR, DEBUG, or INFO.
    """


    applicationLogLevel?: str

    logFormat?: str

    logGroup?: str

    systemLogLevel?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDRefsItems0Policy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate replacementSecurityGroupIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderReplacementSecurityGroupIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleRef:
    r"""
    Reference to a Role in iam to populate role.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleRefPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleSelector:
    r"""
    Selector for a Role in iam to populate role.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderRoleSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketRef:
    r"""
    Reference to a Bucket in s3 to populate s3Bucket.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketRefPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketSelector:
    r"""
    Selector for a Bucket in s3 to populate s3Bucket.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderS3BucketSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderSnapStartItems0:
    r"""
    lambda aws upbound io v1beta1 function spec init provider snap start items0

    Attributes
    ----------
    applyOn : str, default is Undefined, optional
        Conditions where snap start is enabled. Valid values are PublishedVersions.
    """


    applyOn?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderTracingConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec init provider tracing config items0

    Attributes
    ----------
    mode : str, default is Undefined, optional
        Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are PassThrough and Active. If PassThrough, Lambda will only trace the request from an upstream service if it contains a tracing header with "sampled=1". If Active, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.
    """


    mode?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function spec init provider vpc config items0

    Attributes
    ----------
    ipv6AllowedForDualStack : bool, default is Undefined, optional
        Allows outbound IPv6 traffic on VPC functions that are connected to dual-stack subnets. Default is false.
    securityGroupIdRefs : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDRefsItems0], default is Undefined, optional
        References to SecurityGroup in ec2 to populate securityGroupIds.
    securityGroupIdSelector : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDSelector, default is Undefined, optional
        security group Id selector
    securityGroupIds : [str], default is Undefined, optional
        List of security group IDs associated with the Lambda function.
    subnetIdRefs : [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDRefsItems0], default is Undefined, optional
        References to Subnet in ec2 to populate subnetIds.
    subnetIdSelector : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDSelector, default is Undefined, optional
        subnet Id selector
    subnetIds : [str], default is Undefined, optional
        List of subnet IDs associated with the Lambda function.
    """


    ipv6AllowedForDualStack?: bool

    securityGroupIdRefs?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDRefsItems0]

    securityGroupIdSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDSelector

    securityGroupIds?: [str]

    subnetIdRefs?: [LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDRefsItems0]

    subnetIdSelector?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDSelector

    subnetIds?: [str]


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDRefsItems0Policy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDSelector:
    r"""
    Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SecurityGroupIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDRefsItems0Policy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDSelector:
    r"""
    Selector for a list of Subnet in ec2 to populate subnetIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDSelectorPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecInitProviderVpcConfigItems0SubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecProviderConfigRefPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRef

    metadata?: LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToMetadata

    name: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRefPolicy


schema LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema LambdaAwsUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema LambdaAwsUpboundIoV1beta1FunctionSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema LambdaAwsUpboundIoV1beta1FunctionStatus:
    r"""
    FunctionStatus defines the observed state of Function.

    Attributes
    ----------
    atProvider : LambdaAwsUpboundIoV1beta1FunctionStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [LambdaAwsUpboundIoV1beta1FunctionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: LambdaAwsUpboundIoV1beta1FunctionStatusAtProvider

    conditions?: [LambdaAwsUpboundIoV1beta1FunctionStatusConditionsItems0]

    observedGeneration?: int


schema LambdaAwsUpboundIoV1beta1FunctionStatusAtProvider:
    r"""
    lambda aws upbound io v1beta1 function status at provider

    Attributes
    ----------
    architectures : [str], default is Undefined, optional
        Instruction set architecture for your Lambda function. Valid values are ["x86_64"] and ["arm64"]. Default is ["x86_64"]. Removing this attribute, function's architecture stay the same.
    arn : str, default is Undefined, optional
        Amazon Resource Name (ARN) identifying your Lambda Function.
    codeSha256 : str, default is Undefined, optional
        Base64-encoded representation of raw SHA-256 sum of the zip file.
    codeSigningConfigArn : str, default is Undefined, optional
        To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
    deadLetterConfig : [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderDeadLetterConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    description : str, default is Undefined, optional
        Description of what your Lambda Function does.
    environment : [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderEnvironmentItems0], default is Undefined, optional
        Configuration block. Detailed below.
    ephemeralStorage : [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderEphemeralStorageItems0], default is Undefined, optional
        The amount of Ephemeral storage(/tmp) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of 512MB. Detailed below.
    fileSystemConfig : [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderFileSystemConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    handler : str, default is Undefined, optional
        Function entrypoint in your code.
    id : str, default is Undefined, optional
        id
    imageConfig : [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderImageConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    imageUri : str, default is Undefined, optional
        ECR image URI containing the function's deployment package. Exactly one of filename, image_uri,  or s3_bucket must be specified.
    invokeArn : str, default is Undefined, optional
        ARN to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's uri.
    kmsKeyArn : str, default is Undefined, optional
        Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. To fix the perpetual difference, remove this configuration.
    lastModified : str, default is Undefined, optional
        Date this resource was last modified.
    layers : [str], default is Undefined, optional
        List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See Lambda Layers
    loggingConfig : [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderLoggingConfigItems0], default is Undefined, optional
        Configuration block used to specify advanced logging settings. Detailed below.
    memorySize : float, default is Undefined, optional
        Amount of memory in MB your Lambda Function can use at runtime. Defaults to 128. See Limits
    packageType : str, default is Undefined, optional
        Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.
    publish : bool, default is Undefined, optional
        Whether to publish creation/change as new Lambda Function Version. Defaults to false.
    qualifiedArn : str, default is Undefined, optional
        ARN identifying your Lambda Function Version (if versioning is enabled via publish = true).
    qualifiedInvokeArn : str, default is Undefined, optional
        Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's uri.
    replaceSecurityGroupsOnDestroy : bool, default is Undefined, optional
        AWS no longer supports this operation. This attribute now has no effect and will be removed in a future major version. Whether to replace the security groups on associated lambda network interfaces upon destruction. Removing these security groups from orphaned network interfaces can speed up security group deletion times by avoiding a dependency on AWS's internal cleanup operations. By default, the ENI security groups will be replaced with the default security group in the function's VPC. Set the replacement_security_group_ids attribute to use a custom list of security groups for replacement.
    replacementSecurityGroupIds : [str], default is Undefined, optional
        List of security group IDs to assign to orphaned Lambda function network interfaces upon destruction. replace_security_groups_on_destroy must be set to true to use this attribute.
    reservedConcurrentExecutions : float, default is Undefined, optional
        Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1. See Managing Concurrency
    role : str, default is Undefined, optional
        Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
    runtime : str, default is Undefined, optional
        Identifier of the function's runtime. See Runtimes for valid values.
    s3Bucket : str, default is Undefined, optional
        S3 bucket location containing the function's deployment package. This bucket must reside in the same AWS region where you are creating the Lambda function. Exactly one of filename, image_uri, or s3_bucket must be specified. When s3_bucket is set, s3_key is required.
    s3Key : str, default is Undefined, optional
        S3 key of an object containing the function's deployment package. When s3_bucket is set, s3_key is required.
    s3ObjectVersion : str, default is Undefined, optional
        Object version containing the function's deployment package. Conflicts with filename and image_uri.
    signingJobArn : str, default is Undefined, optional
        ARN of the signing job.
    signingProfileVersionArn : str, default is Undefined, optional
        ARN of the signing profile version.
    skipDestroy : bool, default is Undefined, optional
        skip destroy
    snapStart : [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderSnapStartItems0], default is Undefined, optional
        Snap start settings block. Detailed below.
    sourceCodeHash : str, default is Undefined, optional
        Used to trigger updates. Must be set to a base64 encoded SHA256 hash of the package file specified with either filename or s3_key. If you have specified this field manually, it should be the actual (computed) hash of the underlying lambda function specified in the filename, image_uri, s3_bucket fields.
    sourceCodeSize : float, default is Undefined, optional
        Size in bytes of the function .zip file.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    timeout : float, default is Undefined, optional
        Amount of time your Lambda Function has to run in seconds. Defaults to 3. See Limits.
    tracingConfig : [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderTracingConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    version : str, default is Undefined, optional
        Latest published version of your Lambda Function.
    vpcConfig : [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderVpcConfigItems0], default is Undefined, optional
        Configuration block. Detailed below.
    """


    architectures?: [str]

    arn?: str

    codeSha256?: str

    codeSigningConfigArn?: str

    deadLetterConfig?: [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderDeadLetterConfigItems0]

    description?: str

    environment?: [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderEnvironmentItems0]

    ephemeralStorage?: [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderEphemeralStorageItems0]

    fileSystemConfig?: [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderFileSystemConfigItems0]

    handler?: str

    id?: str

    imageConfig?: [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderImageConfigItems0]

    imageUri?: str

    invokeArn?: str

    kmsKeyArn?: str

    lastModified?: str

    layers?: [str]

    loggingConfig?: [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderLoggingConfigItems0]

    memorySize?: float

    packageType?: str

    publish?: bool

    qualifiedArn?: str

    qualifiedInvokeArn?: str

    replaceSecurityGroupsOnDestroy?: bool

    replacementSecurityGroupIds?: [str]

    reservedConcurrentExecutions?: float

    role?: str

    runtime?: str

    s3Bucket?: str

    s3Key?: str

    s3ObjectVersion?: str

    signingJobArn?: str

    signingProfileVersionArn?: str

    skipDestroy?: bool

    snapStart?: [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderSnapStartItems0]

    sourceCodeHash?: str

    sourceCodeSize?: float

    tags?: {str:str}

    tagsAll?: {str:str}

    timeout?: float

    tracingConfig?: [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderTracingConfigItems0]

    version?: str

    vpcConfig?: [LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderVpcConfigItems0]


schema LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderDeadLetterConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function status at provider dead letter config items0

    Attributes
    ----------
    targetArn : str, default is Undefined, optional
        ARN of an SNS topic or SQS queue to notify when an invocation fails. If this option is used, the function's IAM role must be granted suitable access to write to the target object, which means allowing either the sns:Publish or sqs:SendMessage action on this ARN, depending on which service is targeted.
    """


    targetArn?: str


schema LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderEnvironmentItems0:
    r"""
    lambda aws upbound io v1beta1 function status at provider environment items0

    Attributes
    ----------
    variables : {str:str}, default is Undefined, optional
        Map of environment variables that are accessible from the function code during execution. If provided at least one key must be present.
    """


    variables?: {str:str}


schema LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderEphemeralStorageItems0:
    r"""
    lambda aws upbound io v1beta1 function status at provider ephemeral storage items0

    Attributes
    ----------
    size : float, default is Undefined, optional
        The size of the Lambda function Ephemeral storage(/tmp) represented in MB. The minimum supported ephemeral_storage value defaults to 512MB and the maximum supported value is 10240MB.
    """


    size?: float


schema LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderFileSystemConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function status at provider file system config items0

    Attributes
    ----------
    arn : str, default is Undefined, optional
        Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
    localMountPath : str, default is Undefined, optional
        Path where the function can access the file system, starting with /mnt/.
    """


    arn?: str

    localMountPath?: str


schema LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderImageConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function status at provider image config items0

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Parameters that you want to pass in with entry_point.
    entryPoint : [str], default is Undefined, optional
        Entry point to your application, which is typically the location of the runtime executable.
    workingDirectory : str, default is Undefined, optional
        Working directory.
    """


    command?: [str]

    entryPoint?: [str]

    workingDirectory?: str


schema LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderLoggingConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function status at provider logging config items0

    Attributes
    ----------
    applicationLogLevel : str, default is Undefined, optional
        for JSON structured logs, choose the detail level of the logs your application sends to CloudWatch when using supported logging libraries.
    logFormat : str, default is Undefined, optional
        select between Text and structured JSON format for your function's logs.
    logGroup : str, default is Undefined, optional
        the CloudWatch log group your function sends logs to.
    systemLogLevel : str, default is Undefined, optional
        for JSON structured logs, choose the detail level of the Lambda platform event logs sent to CloudWatch, such as ERROR, DEBUG, or INFO.
    """


    applicationLogLevel?: str

    logFormat?: str

    logGroup?: str

    systemLogLevel?: str


schema LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderSnapStartItems0:
    r"""
    lambda aws upbound io v1beta1 function status at provider snap start items0

    Attributes
    ----------
    applyOn : str, default is Undefined, optional
        Conditions where snap start is enabled. Valid values are PublishedVersions.
    optimizationStatus : str, default is Undefined, optional
        Optimization status of the snap start configuration. Valid values are On and Off.
    """


    applyOn?: str

    optimizationStatus?: str


schema LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderTracingConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function status at provider tracing config items0

    Attributes
    ----------
    mode : str, default is Undefined, optional
        Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are PassThrough and Active. If PassThrough, Lambda will only trace the request from an upstream service if it contains a tracing header with "sampled=1". If Active, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.
    """


    mode?: str


schema LambdaAwsUpboundIoV1beta1FunctionStatusAtProviderVpcConfigItems0:
    r"""
    lambda aws upbound io v1beta1 function status at provider vpc config items0

    Attributes
    ----------
    ipv6AllowedForDualStack : bool, default is Undefined, optional
        Allows outbound IPv6 traffic on VPC functions that are connected to dual-stack subnets. Default is false.
    securityGroupIds : [str], default is Undefined, optional
        List of security group IDs associated with the Lambda function.
    subnetIds : [str], default is Undefined, optional
        List of subnet IDs associated with the Lambda function.
    vpcId : str, default is Undefined, optional
        ID of the VPC.
    """


    ipv6AllowedForDualStack?: bool

    securityGroupIds?: [str]

    subnetIds?: [str]

    vpcId?: str


schema LambdaAwsUpboundIoV1beta1FunctionStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


