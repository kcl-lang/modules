"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VPCEndpoint:
    r"""
    VPCEndpoint is the Schema for the VPCEndpoints API. Provides a VPC Endpoint resource.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VPCEndpoint", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta2VPCEndpointSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta2VPCEndpointStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta2" = "ec2.aws.upbound.io/v1beta2"

    kind: "VPCEndpoint" = "VPCEndpoint"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta2VPCEndpointSpec

    status?: Ec2AwsUpboundIoV1beta2VPCEndpointStatus


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpec:
    r"""
    VPCEndpointSpec defines the desired state of VPCEndpoint

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta2VPCEndpointSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta2VPCEndpointSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProvider:
    r"""
    ec2 aws upbound io v1beta2 v p c endpoint spec for provider

    Attributes
    ----------
    autoAccept : bool, default is Undefined, optional
        Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
    dnsOptions : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderDNSOptions, default is Undefined, optional
        dns options
    ipAddressType : str, default is Undefined, optional
        The IP address type for the endpoint. Valid values are ipv4, dualstack, and ipv6.
    policy : str, default is Undefined, optional
        A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All Gateway and some Interface endpoints support policies - see the relevant AWS documentation for more details.
    privateDnsEnabled : bool, default is Undefined, optional
        Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type Interface. Most users will want this enabled to allow services within the VPC to automatically use the endpoint.
        Defaults to false.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    serviceName : str, default is Undefined, optional
        The service name. For AWS services the service name is usually in the form com.amazonaws.<region>.<service> (the SageMaker Notebook service is an exception to this rule, the service name is in the form aws.sagemaker.<region>.notebook).
    serviceNameRef : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameRef, default is Undefined, optional
        service name ref
    serviceNameSelector : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameSelector, default is Undefined, optional
        service name selector
    serviceRegion : str, default is Undefined, optional
        - The AWS region of the VPC Endpoint Service. If specified, the VPC endpoint will connect to the service in the provided region. Applicable for endpoints of type Interface.
    subnetConfiguration : [Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0], default is Undefined, optional
        Subnet configuration for the endpoint, used to select specific IPv4 and/or IPv6 addresses to the endpoint. See subnet_configuration below.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    vpcEndpointType : str, default is Undefined, optional
        The VPC endpoint type, Gateway, GatewayLoadBalancer, or Interface. Defaults to Gateway.
    vpcId : str, default is Undefined, optional
        The ID of the VPC in which the endpoint will be used.
    vpcIdRef : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    autoAccept?: bool

    dnsOptions?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderDNSOptions

    ipAddressType?: str

    policy?: str

    privateDnsEnabled?: bool

    region: str

    serviceName?: str

    serviceNameRef?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameRef

    serviceNameSelector?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameSelector

    serviceRegion?: str

    subnetConfiguration?: [Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0]

    tags?: {str:str}

    vpcEndpointType?: str

    vpcId?: str

    vpcIdRef?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDRef

    vpcIdSelector?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDSelector


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderDNSOptions:
    r"""
    The DNS options for the endpoint. See dns_options below.

    Attributes
    ----------
    dnsRecordIpType : str, default is Undefined, optional
        The DNS records created for the endpoint. Valid values are ipv4, dualstack, service-defined, and ipv6.
    privateDnsOnlyForInboundResolverEndpoint : bool, default is Undefined, optional
        Indicates whether to enable private DNS only for inbound endpoints. This option is available only for services that support both gateway and interface endpoints. It routes traffic that originates from the VPC to the gateway endpoint and traffic that originates from on-premises to the interface endpoint. Default is false. Can only be specified if private_dns_enabled is true.
    """


    dnsRecordIpType?: str

    privateDnsOnlyForInboundResolverEndpoint?: bool


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameRef:
    r"""
    Reference to a VPCEndpointService in ec2 to populate serviceName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameRefPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameSelector:
    r"""
    Selector for a VPCEndpointService in ec2 to populate serviceName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameSelectorPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderServiceNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0:
    r"""
    ec2 aws upbound io v1beta2 v p c endpoint spec for provider subnet configuration items0

    Attributes
    ----------
    ipv4 : str, default is Undefined, optional
        The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.
    ipv6 : str, default is Undefined, optional
        The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.
    subnetId : str, default is Undefined, optional
        The ID of the VPC endpoint.
    subnetIdRef : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDRef, default is Undefined, optional
        subnet Id ref
    subnetIdSelector : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDSelector, default is Undefined, optional
        subnet Id selector
    """


    ipv4?: str

    ipv6?: str

    subnetId?: str

    subnetIdRef?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDRef

    subnetIdSelector?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDSelector


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDRef:
    r"""
    Reference to a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDRefPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDSelector:
    r"""
    Selector for a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderSubnetConfigurationItems0SubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDRefPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecForProviderVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    autoAccept : bool, default is Undefined, optional
        Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
    dnsOptions : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderDNSOptions, default is Undefined, optional
        dns options
    ipAddressType : str, default is Undefined, optional
        The IP address type for the endpoint. Valid values are ipv4, dualstack, and ipv6.
    policy : str, default is Undefined, optional
        A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All Gateway and some Interface endpoints support policies - see the relevant AWS documentation for more details.
    privateDnsEnabled : bool, default is Undefined, optional
        Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type Interface. Most users will want this enabled to allow services within the VPC to automatically use the endpoint.
        Defaults to false.
    serviceName : str, default is Undefined, optional
        The service name. For AWS services the service name is usually in the form com.amazonaws.<region>.<service> (the SageMaker Notebook service is an exception to this rule, the service name is in the form aws.sagemaker.<region>.notebook).
    serviceNameRef : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameRef, default is Undefined, optional
        service name ref
    serviceNameSelector : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameSelector, default is Undefined, optional
        service name selector
    serviceRegion : str, default is Undefined, optional
        - The AWS region of the VPC Endpoint Service. If specified, the VPC endpoint will connect to the service in the provided region. Applicable for endpoints of type Interface.
    subnetConfiguration : [Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0], default is Undefined, optional
        Subnet configuration for the endpoint, used to select specific IPv4 and/or IPv6 addresses to the endpoint. See subnet_configuration below.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    vpcEndpointType : str, default is Undefined, optional
        The VPC endpoint type, Gateway, GatewayLoadBalancer, or Interface. Defaults to Gateway.
    vpcId : str, default is Undefined, optional
        The ID of the VPC in which the endpoint will be used.
    vpcIdRef : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    autoAccept?: bool

    dnsOptions?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderDNSOptions

    ipAddressType?: str

    policy?: str

    privateDnsEnabled?: bool

    serviceName?: str

    serviceNameRef?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameRef

    serviceNameSelector?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameSelector

    serviceRegion?: str

    subnetConfiguration?: [Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0]

    tags?: {str:str}

    vpcEndpointType?: str

    vpcId?: str

    vpcIdRef?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDRef

    vpcIdSelector?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDSelector


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderDNSOptions:
    r"""
    The DNS options for the endpoint. See dns_options below.

    Attributes
    ----------
    dnsRecordIpType : str, default is Undefined, optional
        The DNS records created for the endpoint. Valid values are ipv4, dualstack, service-defined, and ipv6.
    privateDnsOnlyForInboundResolverEndpoint : bool, default is Undefined, optional
        Indicates whether to enable private DNS only for inbound endpoints. This option is available only for services that support both gateway and interface endpoints. It routes traffic that originates from the VPC to the gateway endpoint and traffic that originates from on-premises to the interface endpoint. Default is false. Can only be specified if private_dns_enabled is true.
    """


    dnsRecordIpType?: str

    privateDnsOnlyForInboundResolverEndpoint?: bool


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameRef:
    r"""
    Reference to a VPCEndpointService in ec2 to populate serviceName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameRefPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameSelector:
    r"""
    Selector for a VPCEndpointService in ec2 to populate serviceName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameSelectorPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderServiceNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0:
    r"""
    ec2 aws upbound io v1beta2 v p c endpoint spec init provider subnet configuration items0

    Attributes
    ----------
    ipv4 : str, default is Undefined, optional
        The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.
    ipv6 : str, default is Undefined, optional
        The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.
    subnetId : str, default is Undefined, optional
        The ID of the VPC endpoint.
    subnetIdRef : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDRef, default is Undefined, optional
        subnet Id ref
    subnetIdSelector : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDSelector, default is Undefined, optional
        subnet Id selector
    """


    ipv4?: str

    ipv6?: str

    subnetId?: str

    subnetIdRef?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDRef

    subnetIdSelector?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDSelector


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDRef:
    r"""
    Reference to a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDRefPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDSelector:
    r"""
    Selector for a Subnet in ec2 to populate subnetId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderSubnetConfigurationItems0SubnetIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDRef:
    r"""
    Reference to a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDRefPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDSelector:
    r"""
    Selector for a VPC in ec2 to populate vpcId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecInitProviderVpcIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta2VPCEndpointSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta2VPCEndpointStatus:
    r"""
    VPCEndpointStatus defines the observed state of VPCEndpoint.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta2VPCEndpointStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta2VPCEndpointStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta2 v p c endpoint status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the VPC endpoint.
    autoAccept : bool, default is Undefined, optional
        Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
    cidrBlocks : [str], default is Undefined, optional
        The list of CIDR blocks for the exposed AWS service. Applicable for endpoints of type Gateway.
    dnsEntry : [Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProviderDNSEntryItems0], default is Undefined, optional
        The DNS entries for the VPC Endpoint. Applicable for endpoints of type Interface. DNS blocks are documented below.
    dnsOptions : Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProviderDNSOptions, default is Undefined, optional
        dns options
    id : str, default is Undefined, optional
        The ID of the VPC endpoint.
    ipAddressType : str, default is Undefined, optional
        The IP address type for the endpoint. Valid values are ipv4, dualstack, and ipv6.
    networkInterfaceIds : [str], default is Undefined, optional
        One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type Interface.
    ownerId : str, default is Undefined, optional
        The ID of the AWS account that owns the VPC endpoint.
    policy : str, default is Undefined, optional
        A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All Gateway and some Interface endpoints support policies - see the relevant AWS documentation for more details.
    prefixListId : str, default is Undefined, optional
        The prefix list ID of the exposed AWS service. Applicable for endpoints of type Gateway.
    privateDnsEnabled : bool, default is Undefined, optional
        Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type Interface. Most users will want this enabled to allow services within the VPC to automatically use the endpoint.
        Defaults to false.
    requesterManaged : bool, default is Undefined, optional
        Whether or not the VPC Endpoint is being managed by its service - true or false.
    routeTableIds : [str], default is Undefined, optional
        One or more route table IDs. Applicable for endpoints of type Gateway.
    securityGroupIds : [str], default is Undefined, optional
        The ID of one or more security groups to associate with the network interface. Applicable for endpoints of type Interface.
        If no security groups are specified, the VPC's default security group is associated with the endpoint.
    serviceName : str, default is Undefined, optional
        The service name. For AWS services the service name is usually in the form com.amazonaws.<region>.<service> (the SageMaker Notebook service is an exception to this rule, the service name is in the form aws.sagemaker.<region>.notebook).
    serviceRegion : str, default is Undefined, optional
        - The AWS region of the VPC Endpoint Service. If specified, the VPC endpoint will connect to the service in the provided region. Applicable for endpoints of type Interface.
    state : str, default is Undefined, optional
        The state of the VPC endpoint.
    subnetConfiguration : [Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProviderSubnetConfigurationItems0], default is Undefined, optional
        Subnet configuration for the endpoint, used to select specific IPv4 and/or IPv6 addresses to the endpoint. See subnet_configuration below.
    subnetIds : [str], default is Undefined, optional
        The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type GatewayLoadBalancer and Interface. Interface type endpoints cannot function without being assigned to a subnet.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    vpcEndpointType : str, default is Undefined, optional
        The VPC endpoint type, Gateway, GatewayLoadBalancer, or Interface. Defaults to Gateway.
    vpcId : str, default is Undefined, optional
        The ID of the VPC in which the endpoint will be used.
    """


    arn?: str

    autoAccept?: bool

    cidrBlocks?: [str]

    dnsEntry?: [Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProviderDNSEntryItems0]

    dnsOptions?: Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProviderDNSOptions

    id?: str

    ipAddressType?: str

    networkInterfaceIds?: [str]

    ownerId?: str

    policy?: str

    prefixListId?: str

    privateDnsEnabled?: bool

    requesterManaged?: bool

    routeTableIds?: [str]

    securityGroupIds?: [str]

    serviceName?: str

    serviceRegion?: str

    state?: str

    subnetConfiguration?: [Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProviderSubnetConfigurationItems0]

    subnetIds?: [str]

    tags?: {str:str}

    tagsAll?: {str:str}

    vpcEndpointType?: str

    vpcId?: str


schema Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProviderDNSEntryItems0:
    r"""
    ec2 aws upbound io v1beta2 v p c endpoint status at provider DNS entry items0

    Attributes
    ----------
    dnsName : str, default is Undefined, optional
        The DNS name.
    hostedZoneId : str, default is Undefined, optional
        The ID of the private hosted zone.
    """


    dnsName?: str

    hostedZoneId?: str


schema Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProviderDNSOptions:
    r"""
    The DNS options for the endpoint. See dns_options below.

    Attributes
    ----------
    dnsRecordIpType : str, default is Undefined, optional
        The DNS records created for the endpoint. Valid values are ipv4, dualstack, service-defined, and ipv6.
    privateDnsOnlyForInboundResolverEndpoint : bool, default is Undefined, optional
        Indicates whether to enable private DNS only for inbound endpoints. This option is available only for services that support both gateway and interface endpoints. It routes traffic that originates from the VPC to the gateway endpoint and traffic that originates from on-premises to the interface endpoint. Default is false. Can only be specified if private_dns_enabled is true.
    """


    dnsRecordIpType?: str

    privateDnsOnlyForInboundResolverEndpoint?: bool


schema Ec2AwsUpboundIoV1beta2VPCEndpointStatusAtProviderSubnetConfigurationItems0:
    r"""
    ec2 aws upbound io v1beta2 v p c endpoint status at provider subnet configuration items0

    Attributes
    ----------
    ipv4 : str, default is Undefined, optional
        The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.
    ipv6 : str, default is Undefined, optional
        The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.
    subnetId : str, default is Undefined, optional
        The ID of the VPC endpoint.
    """


    ipv4?: str

    ipv6?: str

    subnetId?: str


schema Ec2AwsUpboundIoV1beta2VPCEndpointStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


