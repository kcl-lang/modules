"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Authorizer:
    r"""
    Authorizer is the Schema for the Authorizers API. Provides an API Gateway Authorizer.

    Attributes
    ----------
    apiVersion : str, default is "apigateway.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Authorizer", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ApigatewayAwsUpboundIoV1beta1AuthorizerSpec, default is Undefined, required
        spec
    status : ApigatewayAwsUpboundIoV1beta1AuthorizerStatus, default is Undefined, optional
        status
    """


    apiVersion: "apigateway.aws.upbound.io/v1beta1" = "apigateway.aws.upbound.io/v1beta1"

    kind: "Authorizer" = "Authorizer"

    metadata?: v1.ObjectMeta

    spec: ApigatewayAwsUpboundIoV1beta1AuthorizerSpec

    status?: ApigatewayAwsUpboundIoV1beta1AuthorizerStatus


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpec:
    r"""
    AuthorizerSpec defines the desired state of Authorizer

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProvider, default is Undefined, required
        for provider
    initProvider : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProvider

    initProvider?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecProviderConfigRef

    publishConnectionDetailsTo?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecWriteConnectionSecretToRef


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProvider:
    r"""
    apigateway aws upbound io v1beta1 authorizer spec for provider

    Attributes
    ----------
    authorizerCredentials : str, default is Undefined, optional
        Credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.
    authorizerCredentialsRef : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsRef, default is Undefined, optional
        authorizer credentials ref
    authorizerCredentialsSelector : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsSelector, default is Undefined, optional
        authorizer credentials selector
    authorizerResultTtlInSeconds : float, default is Undefined, optional
        TTL of cached authorizer results in seconds. Defaults to 300.
    authorizerUri : str, default is Undefined, optional
        Authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of arn:aws:apigateway:{region}:lambda:path/{service_api},
        e.g., arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations
    authorizerUriRef : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRef, default is Undefined, optional
        authorizer Uri ref
    authorizerUriSelector : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelector, default is Undefined, optional
        authorizer Uri selector
    identitySource : str, default is Undefined, optional
        Source of the identity in an incoming request. Defaults to method.request.header.Authorization. For REQUEST type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., "method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"
    identityValidationExpression : str, default is Undefined, optional
        Validation expression for the incoming identity. For TOKEN type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.
    name : str, default is Undefined, optional
        Name of the authorizer
    providerArns : [str], default is Undefined, optional
        List of the Amazon Cognito user pool ARNs. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    restApiId : str, default is Undefined, optional
        ID of the associated REST API
    restApiIdRef : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDRef, default is Undefined, optional
        rest Api Id ref
    restApiIdSelector : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDSelector, default is Undefined, optional
        rest Api Id selector
    $type : str, default is Undefined, optional
        Type of the authorizer. Possible values are TOKEN for a Lambda function using a single authorization token submitted in a custom header, REQUEST for a Lambda function using incoming request parameters, or COGNITO_USER_POOLS for using an Amazon Cognito user pool. Defaults to TOKEN.
    """


    authorizerCredentials?: str

    authorizerCredentialsRef?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsRef

    authorizerCredentialsSelector?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsSelector

    authorizerResultTtlInSeconds?: float

    authorizerUri?: str

    authorizerUriRef?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRef

    authorizerUriSelector?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelector

    identitySource?: str

    identityValidationExpression?: str

    name?: str

    providerArns?: [str]

    region: str

    restApiId?: str

    restApiIdRef?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDRef

    restApiIdSelector?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDSelector

    $type?: str


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsRef:
    r"""
    Reference to a Role in iam to populate authorizerCredentials.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsRefPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsSelector:
    r"""
    Selector for a Role in iam to populate authorizerCredentials.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerCredentialsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRef:
    r"""
    Reference to a Function in lambda to populate authorizerUri.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRefPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURIRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelector:
    r"""
    Selector for a Function in lambda to populate authorizerUri.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderAuthorizerURISelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDRef:
    r"""
    Reference to a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDSelector:
    r"""
    Selector for a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecForProviderRestAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    authorizerCredentials : str, default is Undefined, optional
        Credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.
    authorizerCredentialsRef : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsRef, default is Undefined, optional
        authorizer credentials ref
    authorizerCredentialsSelector : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsSelector, default is Undefined, optional
        authorizer credentials selector
    authorizerResultTtlInSeconds : float, default is Undefined, optional
        TTL of cached authorizer results in seconds. Defaults to 300.
    authorizerUri : str, default is Undefined, optional
        Authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of arn:aws:apigateway:{region}:lambda:path/{service_api},
        e.g., arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations
    authorizerUriRef : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRef, default is Undefined, optional
        authorizer Uri ref
    authorizerUriSelector : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelector, default is Undefined, optional
        authorizer Uri selector
    identitySource : str, default is Undefined, optional
        Source of the identity in an incoming request. Defaults to method.request.header.Authorization. For REQUEST type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., "method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"
    identityValidationExpression : str, default is Undefined, optional
        Validation expression for the incoming identity. For TOKEN type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.
    name : str, default is Undefined, optional
        Name of the authorizer
    providerArns : [str], default is Undefined, optional
        List of the Amazon Cognito user pool ARNs. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}.
    restApiId : str, default is Undefined, optional
        ID of the associated REST API
    restApiIdRef : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDRef, default is Undefined, optional
        rest Api Id ref
    restApiIdSelector : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDSelector, default is Undefined, optional
        rest Api Id selector
    $type : str, default is Undefined, optional
        Type of the authorizer. Possible values are TOKEN for a Lambda function using a single authorization token submitted in a custom header, REQUEST for a Lambda function using incoming request parameters, or COGNITO_USER_POOLS for using an Amazon Cognito user pool. Defaults to TOKEN.
    """


    authorizerCredentials?: str

    authorizerCredentialsRef?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsRef

    authorizerCredentialsSelector?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsSelector

    authorizerResultTtlInSeconds?: float

    authorizerUri?: str

    authorizerUriRef?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRef

    authorizerUriSelector?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelector

    identitySource?: str

    identityValidationExpression?: str

    name?: str

    providerArns?: [str]

    restApiId?: str

    restApiIdRef?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDRef

    restApiIdSelector?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDSelector

    $type?: str


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsRef:
    r"""
    Reference to a Role in iam to populate authorizerCredentials.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsRefPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsSelector:
    r"""
    Selector for a Role in iam to populate authorizerCredentials.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerCredentialsSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRef:
    r"""
    Reference to a Function in lambda to populate authorizerUri.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRefPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURIRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelector:
    r"""
    Selector for a Function in lambda to populate authorizerUri.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderAuthorizerURISelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDRef:
    r"""
    Reference to a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDSelector:
    r"""
    Selector for a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecInitProviderRestAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecProviderConfigRefPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRef

    metadata?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToMetadata

    name: str


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRefPolicy


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ApigatewayAwsUpboundIoV1beta1AuthorizerSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ApigatewayAwsUpboundIoV1beta1AuthorizerStatus:
    r"""
    AuthorizerStatus defines the observed state of Authorizer.

    Attributes
    ----------
    atProvider : ApigatewayAwsUpboundIoV1beta1AuthorizerStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ApigatewayAwsUpboundIoV1beta1AuthorizerStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ApigatewayAwsUpboundIoV1beta1AuthorizerStatusAtProvider

    conditions?: [ApigatewayAwsUpboundIoV1beta1AuthorizerStatusConditionsItems0]

    observedGeneration?: int


schema ApigatewayAwsUpboundIoV1beta1AuthorizerStatusAtProvider:
    r"""
    apigateway aws upbound io v1beta1 authorizer status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN of the API Gateway Authorizer
    authorizerCredentials : str, default is Undefined, optional
        Credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.
    authorizerResultTtlInSeconds : float, default is Undefined, optional
        TTL of cached authorizer results in seconds. Defaults to 300.
    authorizerUri : str, default is Undefined, optional
        Authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of arn:aws:apigateway:{region}:lambda:path/{service_api},
        e.g., arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations
    id : str, default is Undefined, optional
        Authorizer identifier.
    identitySource : str, default is Undefined, optional
        Source of the identity in an incoming request. Defaults to method.request.header.Authorization. For REQUEST type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., "method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"
    identityValidationExpression : str, default is Undefined, optional
        Validation expression for the incoming identity. For TOKEN type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.
    name : str, default is Undefined, optional
        Name of the authorizer
    providerArns : [str], default is Undefined, optional
        List of the Amazon Cognito user pool ARNs. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}.
    restApiId : str, default is Undefined, optional
        ID of the associated REST API
    $type : str, default is Undefined, optional
        Type of the authorizer. Possible values are TOKEN for a Lambda function using a single authorization token submitted in a custom header, REQUEST for a Lambda function using incoming request parameters, or COGNITO_USER_POOLS for using an Amazon Cognito user pool. Defaults to TOKEN.
    """


    arn?: str

    authorizerCredentials?: str

    authorizerResultTtlInSeconds?: float

    authorizerUri?: str

    id?: str

    identitySource?: str

    identityValidationExpression?: str

    name?: str

    providerArns?: [str]

    restApiId?: str

    $type?: str


schema ApigatewayAwsUpboundIoV1beta1AuthorizerStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


