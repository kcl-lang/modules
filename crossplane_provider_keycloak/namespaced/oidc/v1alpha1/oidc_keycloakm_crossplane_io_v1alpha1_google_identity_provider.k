"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema GoogleIdentityProvider:
    r"""
    GoogleIdentityProvider is the Schema for the GoogleIdentityProviders API.

    Attributes
    ----------
    apiVersion : str, default is "oidc.keycloak.m.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "GoogleIdentityProvider", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpec, default is Undefined, required
        spec
    status : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderStatus, default is Undefined, optional
        status
    """


    apiVersion: "oidc.keycloak.m.crossplane.io/v1alpha1" = "oidc.keycloak.m.crossplane.io/v1alpha1"

    kind: "GoogleIdentityProvider" = "GoogleIdentityProvider"

    metadata?: v1.ObjectMeta

    spec: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpec

    status?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderStatus


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpec:
    r"""
    GoogleIdentityProviderSpec defines the desired state of GoogleIdentityProvider

    Attributes
    ----------
    forProvider : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProvider, default is Undefined, required
        for provider
    initProvider : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    writeConnectionSecretToRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    forProvider: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProvider

    initProvider?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecProviderConfigRef

    writeConnectionSecretToRef?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecWriteConnectionSecretToRef


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProvider:
    r"""
    oidc keycloakm crossplane io v1alpha1 google identity provider spec for provider

    Attributes
    ----------
    acceptsPromptNoneForwardFromClient : bool, default is Undefined, optional
        When true, unauthenticated requests with prompt=none will be forwarded to Google instead of returning an error. Defaults to false.
        This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly returned to client, but the request with prompt=none will be forwarded to this identity provider.
    addReadTokenRoleOnCreate : bool, default is Undefined, optional
        When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.
        Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
    alias : str, default is Undefined, optional
        The alias for the Google identity provider.
        The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this is computed and always google
    authenticateByDefault : bool, default is Undefined, optional
        Enable/disable authenticate users by default.
    clientIdSecretRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderClientIDSecretRef, default is Undefined, optional
        client Id secret ref
    clientSecretSecretRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderClientSecretSecretRef, default is Undefined, optional
        client secret secret ref
    defaultScopes : str, default is Undefined, optional
        The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid profile email.
        The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default value'. Default: 'openid profile email'
    disableUserInfo : bool, default is Undefined, optional
        When true, disables the usage of the user info service to obtain additional user information. Defaults to false.
        Disable usage of User Info service to obtain additional user information?  Default is to use this OIDC service.
    displayName : str, default is Undefined, optional
        Display name for the Google identity provider in the GUI.
        The human-friendly name of the identity provider, used in the log in form.
    enabled : bool, default is Undefined, optional
        When true, users will be able to log in to this realm using this identity provider. Defaults to true.
        Enable/disable this identity provider.
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration to this identity provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.
    firstBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.
        Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account.
    firstBrokerLoginFlowAliasRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRef, default is Undefined, optional
        first broker login flow alias ref
    firstBrokerLoginFlowAliasSelector : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelector, default is Undefined, optional
        first broker login flow alias selector
    guiOrder : str, default is Undefined, optional
        A number defining the order of this identity provider in the GUI.
        GUI Order
    hideOnLoginPage : bool, default is Undefined, optional
        When true, this identity provider will be hidden on the login page. Defaults to false.
        Hide On Login Page.
    hostedDomain : str, default is Undefined, optional
        Sets the "hd" query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When * is entered, an account from any domain can be used.
        Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
    linkOnly : bool, default is Undefined, optional
        When true, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to false.
        If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider
    orgDomain : str, default is Undefined, optional
        org domain
    orgRedirectModeEmailMatches : bool, default is Undefined, optional
        org redirect mode email matches
    organizationId : str, default is Undefined, optional
        ID of organization with which this identity is linked.
    organizationIdRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDRef, default is Undefined, optional
        organization Id ref
    organizationIdSelector : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDSelector, default is Undefined, optional
        organization Id selector
    postBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
        Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
    providerId : str, default is Undefined, optional
        The ID of the identity provider to use. Defaults to google, which should be used unless you have extended Keycloak and provided your own implementation.
        provider id, is always google, unless you have a extended custom implementation
    realm : str, default is Undefined, optional
        The name of the realm. This is unique across Keycloak.
        Realm Name
    realmRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmRef, default is Undefined, optional
        realm ref
    realmSelector : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmSelector, default is Undefined, optional
        realm selector
    requestRefreshToken : bool, default is Undefined, optional
        Sets the "access_type" query parameter to "offline" when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.
        Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at the browser.
    storeToken : bool, default is Undefined, optional
        When true, tokens will be stored after authenticating users. Defaults to true.
        Enable/disable if tokens must be stored after authenticating users.
    syncMode : str, default is Undefined, optional
        The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.
        Sync Mode
    trustEmail : bool, default is Undefined, optional
        When true, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false.
        If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
    useUserIpParam : bool, default is Undefined, optional
        Sets the "userIp" query parameter when querying Google's User Info service. This will use the user's IP address. This is useful if Google is throttling Keycloak's access to the User Info service.
        Set 'userIp' query parameter when invoking on Google's User Info service.  This will use the user's ip address.  Useful if Google is throttling access to the User Info service.
    """


    acceptsPromptNoneForwardFromClient?: bool

    addReadTokenRoleOnCreate?: bool

    alias?: str

    authenticateByDefault?: bool

    clientIdSecretRef?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderClientIDSecretRef

    clientSecretSecretRef?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderClientSecretSecretRef

    defaultScopes?: str

    disableUserInfo?: bool

    displayName?: str

    enabled?: bool

    extraConfig?: {str:str}

    firstBrokerLoginFlowAlias?: str

    firstBrokerLoginFlowAliasRef?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRef

    firstBrokerLoginFlowAliasSelector?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelector

    guiOrder?: str

    hideOnLoginPage?: bool

    hostedDomain?: str

    linkOnly?: bool

    orgDomain?: str

    orgRedirectModeEmailMatches?: bool

    organizationId?: str

    organizationIdRef?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDRef

    organizationIdSelector?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDSelector

    postBrokerLoginFlowAlias?: str

    providerId?: str

    realm?: str

    realmRef?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmRef

    realmSelector?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmSelector

    requestRefreshToken?: bool

    storeToken?: bool

    syncMode?: str

    trustEmail?: bool

    useUserIpParam?: bool


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderClientIDSecretRef:
    r"""
    The client or client identifier registered within the identity provider.
    Client ID.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderClientSecretSecretRef:
    r"""
    The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
    Client Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRef:
    r"""
    Reference to a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelector:
    r"""
    Selector for a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderFirstBrokerLoginFlowAliasSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDRef:
    r"""
    Reference to a Organization in organization to populate organizationId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDSelector:
    r"""
    Selector for a Organization in organization to populate organizationId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderOrganizationIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmRef:
    r"""
    Reference to a Realm in realm to populate realm.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmSelector:
    r"""
    Selector for a Realm in realm to populate realm.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecForProviderRealmSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    acceptsPromptNoneForwardFromClient : bool, default is Undefined, optional
        When true, unauthenticated requests with prompt=none will be forwarded to Google instead of returning an error. Defaults to false.
        This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly returned to client, but the request with prompt=none will be forwarded to this identity provider.
    addReadTokenRoleOnCreate : bool, default is Undefined, optional
        When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.
        Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
    alias : str, default is Undefined, optional
        The alias for the Google identity provider.
        The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this is computed and always google
    authenticateByDefault : bool, default is Undefined, optional
        Enable/disable authenticate users by default.
    clientIdSecretRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderClientIDSecretRef, default is Undefined, required
        client Id secret ref
    clientSecretSecretRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderClientSecretSecretRef, default is Undefined, required
        client secret secret ref
    defaultScopes : str, default is Undefined, optional
        The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid profile email.
        The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default value'. Default: 'openid profile email'
    disableUserInfo : bool, default is Undefined, optional
        When true, disables the usage of the user info service to obtain additional user information. Defaults to false.
        Disable usage of User Info service to obtain additional user information?  Default is to use this OIDC service.
    displayName : str, default is Undefined, optional
        Display name for the Google identity provider in the GUI.
        The human-friendly name of the identity provider, used in the log in form.
    enabled : bool, default is Undefined, optional
        When true, users will be able to log in to this realm using this identity provider. Defaults to true.
        Enable/disable this identity provider.
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration to this identity provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.
    firstBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.
        Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account.
    firstBrokerLoginFlowAliasRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRef, default is Undefined, optional
        first broker login flow alias ref
    firstBrokerLoginFlowAliasSelector : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelector, default is Undefined, optional
        first broker login flow alias selector
    guiOrder : str, default is Undefined, optional
        A number defining the order of this identity provider in the GUI.
        GUI Order
    hideOnLoginPage : bool, default is Undefined, optional
        When true, this identity provider will be hidden on the login page. Defaults to false.
        Hide On Login Page.
    hostedDomain : str, default is Undefined, optional
        Sets the "hd" query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When * is entered, an account from any domain can be used.
        Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
    linkOnly : bool, default is Undefined, optional
        When true, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to false.
        If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider
    orgDomain : str, default is Undefined, optional
        org domain
    orgRedirectModeEmailMatches : bool, default is Undefined, optional
        org redirect mode email matches
    organizationId : str, default is Undefined, optional
        ID of organization with which this identity is linked.
    organizationIdRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDRef, default is Undefined, optional
        organization Id ref
    organizationIdSelector : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDSelector, default is Undefined, optional
        organization Id selector
    postBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
        Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
    providerId : str, default is Undefined, optional
        The ID of the identity provider to use. Defaults to google, which should be used unless you have extended Keycloak and provided your own implementation.
        provider id, is always google, unless you have a extended custom implementation
    realm : str, default is Undefined, optional
        The name of the realm. This is unique across Keycloak.
        Realm Name
    realmRef : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmRef, default is Undefined, optional
        realm ref
    realmSelector : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmSelector, default is Undefined, optional
        realm selector
    requestRefreshToken : bool, default is Undefined, optional
        Sets the "access_type" query parameter to "offline" when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.
        Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at the browser.
    storeToken : bool, default is Undefined, optional
        When true, tokens will be stored after authenticating users. Defaults to true.
        Enable/disable if tokens must be stored after authenticating users.
    syncMode : str, default is Undefined, optional
        The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.
        Sync Mode
    trustEmail : bool, default is Undefined, optional
        When true, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false.
        If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
    useUserIpParam : bool, default is Undefined, optional
        Sets the "userIp" query parameter when querying Google's User Info service. This will use the user's IP address. This is useful if Google is throttling Keycloak's access to the User Info service.
        Set 'userIp' query parameter when invoking on Google's User Info service.  This will use the user's ip address.  Useful if Google is throttling access to the User Info service.
    """


    acceptsPromptNoneForwardFromClient?: bool

    addReadTokenRoleOnCreate?: bool

    alias?: str

    authenticateByDefault?: bool

    clientIdSecretRef: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderClientIDSecretRef

    clientSecretSecretRef: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderClientSecretSecretRef

    defaultScopes?: str

    disableUserInfo?: bool

    displayName?: str

    enabled?: bool

    extraConfig?: {str:str}

    firstBrokerLoginFlowAlias?: str

    firstBrokerLoginFlowAliasRef?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRef

    firstBrokerLoginFlowAliasSelector?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelector

    guiOrder?: str

    hideOnLoginPage?: bool

    hostedDomain?: str

    linkOnly?: bool

    orgDomain?: str

    orgRedirectModeEmailMatches?: bool

    organizationId?: str

    organizationIdRef?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDRef

    organizationIdSelector?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDSelector

    postBrokerLoginFlowAlias?: str

    providerId?: str

    realm?: str

    realmRef?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmRef

    realmSelector?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmSelector

    requestRefreshToken?: bool

    storeToken?: bool

    syncMode?: str

    trustEmail?: bool

    useUserIpParam?: bool


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderClientIDSecretRef:
    r"""
    The client or client identifier registered within the identity provider.
    Client ID.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderClientSecretSecretRef:
    r"""
    The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
    Client Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        Name of the secret.
    """


    key: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRef:
    r"""
    Reference to a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelector:
    r"""
    Selector for a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderFirstBrokerLoginFlowAliasSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDRef:
    r"""
    Reference to a Organization in organization to populate organizationId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDSelector:
    r"""
    Selector for a Organization in organization to populate organizationId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderOrganizationIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmRef:
    r"""
    Reference to a Realm in realm to populate realm.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmRefPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmSelector:
    r"""
    Selector for a Realm in realm to populate realm.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmSelectorPolicy


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecInitProviderRealmSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    kind : str, default is Undefined, required
        Kind of the referenced object.
    name : str, default is Undefined, required
        Name of the referenced object.
    """


    kind: str

    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    """


    name: str


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderStatus:
    r"""
    GoogleIdentityProviderStatus defines the observed state of GoogleIdentityProvider.

    Attributes
    ----------
    atProvider : OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderStatusAtProvider

    conditions?: [OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderStatusConditionsItems0]

    observedGeneration?: int


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderStatusAtProvider:
    r"""
    oidc keycloakm crossplane io v1alpha1 google identity provider status at provider

    Attributes
    ----------
    acceptsPromptNoneForwardFromClient : bool, default is Undefined, optional
        When true, unauthenticated requests with prompt=none will be forwarded to Google instead of returning an error. Defaults to false.
        This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly returned to client, but the request with prompt=none will be forwarded to this identity provider.
    addReadTokenRoleOnCreate : bool, default is Undefined, optional
        When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.
        Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
    alias : str, default is Undefined, optional
        The alias for the Google identity provider.
        The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this is computed and always google
    authenticateByDefault : bool, default is Undefined, optional
        Enable/disable authenticate users by default.
    defaultScopes : str, default is Undefined, optional
        The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid profile email.
        The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default value'. Default: 'openid profile email'
    disableUserInfo : bool, default is Undefined, optional
        When true, disables the usage of the user info service to obtain additional user information. Defaults to false.
        Disable usage of User Info service to obtain additional user information?  Default is to use this OIDC service.
    displayName : str, default is Undefined, optional
        Display name for the Google identity provider in the GUI.
        The human-friendly name of the identity provider, used in the log in form.
    enabled : bool, default is Undefined, optional
        When true, users will be able to log in to this realm using this identity provider. Defaults to true.
        Enable/disable this identity provider.
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration to this identity provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.
    firstBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.
        Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account.
    guiOrder : str, default is Undefined, optional
        A number defining the order of this identity provider in the GUI.
        GUI Order
    hideOnLoginPage : bool, default is Undefined, optional
        When true, this identity provider will be hidden on the login page. Defaults to false.
        Hide On Login Page.
    hostedDomain : str, default is Undefined, optional
        Sets the "hd" query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When * is entered, an account from any domain can be used.
        Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
    id : str, default is Undefined, optional
        id
    internalId : str, default is Undefined, optional
        (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
        Internal Identity Provider Id
    linkOnly : bool, default is Undefined, optional
        When true, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to false.
        If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider
    orgDomain : str, default is Undefined, optional
        org domain
    orgRedirectModeEmailMatches : bool, default is Undefined, optional
        org redirect mode email matches
    organizationId : str, default is Undefined, optional
        ID of organization with which this identity is linked.
    postBrokerLoginFlowAlias : str, default is Undefined, optional
        The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
        Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
    providerId : str, default is Undefined, optional
        The ID of the identity provider to use. Defaults to google, which should be used unless you have extended Keycloak and provided your own implementation.
        provider id, is always google, unless you have a extended custom implementation
    realm : str, default is Undefined, optional
        The name of the realm. This is unique across Keycloak.
        Realm Name
    requestRefreshToken : bool, default is Undefined, optional
        Sets the "access_type" query parameter to "offline" when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.
        Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at the browser.
    storeToken : bool, default is Undefined, optional
        When true, tokens will be stored after authenticating users. Defaults to true.
        Enable/disable if tokens must be stored after authenticating users.
    syncMode : str, default is Undefined, optional
        The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.
        Sync Mode
    trustEmail : bool, default is Undefined, optional
        When true, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false.
        If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
    useUserIpParam : bool, default is Undefined, optional
        Sets the "userIp" query parameter when querying Google's User Info service. This will use the user's IP address. This is useful if Google is throttling Keycloak's access to the User Info service.
        Set 'userIp' query parameter when invoking on Google's User Info service.  This will use the user's ip address.  Useful if Google is throttling access to the User Info service.
    """


    acceptsPromptNoneForwardFromClient?: bool

    addReadTokenRoleOnCreate?: bool

    alias?: str

    authenticateByDefault?: bool

    defaultScopes?: str

    disableUserInfo?: bool

    displayName?: str

    enabled?: bool

    extraConfig?: {str:str}

    firstBrokerLoginFlowAlias?: str

    guiOrder?: str

    hideOnLoginPage?: bool

    hostedDomain?: str

    id?: str

    internalId?: str

    linkOnly?: bool

    orgDomain?: str

    orgRedirectModeEmailMatches?: bool

    organizationId?: str

    postBrokerLoginFlowAlias?: str

    providerId?: str

    realm?: str

    requestRefreshToken?: bool

    storeToken?: bool

    syncMode?: str

    trustEmail?: bool

    useUserIpParam?: bool


schema OidcKeycloakmCrossplaneIoV1alpha1GoogleIdentityProviderStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


