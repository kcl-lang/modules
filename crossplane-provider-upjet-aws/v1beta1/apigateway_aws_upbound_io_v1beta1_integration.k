"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Integration:
    r"""
    Integration is the Schema for the Integrations API. Provides an HTTP Method Integration for an API Gateway Integration.

    Attributes
    ----------
    apiVersion : str, default is "apigateway.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Integration", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ApigatewayAwsUpboundIoV1beta1IntegrationSpec, default is Undefined, required
        spec
    status : ApigatewayAwsUpboundIoV1beta1IntegrationStatus, default is Undefined, optional
        status
    """


    apiVersion: "apigateway.aws.upbound.io/v1beta1" = "apigateway.aws.upbound.io/v1beta1"

    kind: "Integration" = "Integration"

    metadata?: v1.ObjectMeta

    spec: ApigatewayAwsUpboundIoV1beta1IntegrationSpec

    status?: ApigatewayAwsUpboundIoV1beta1IntegrationStatus


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpec:
    r"""
    IntegrationSpec defines the desired state of Integration

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProvider, default is Undefined, required
        for provider
    initProvider : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProvider

    initProvider?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecProviderConfigRef

    publishConnectionDetailsTo?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecWriteConnectionSecretToRef


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProvider:
    r"""
    apigateway aws upbound io v1beta1 integration spec for provider

    Attributes
    ----------
    cacheKeyParameters : [str], default is Undefined, optional
        List of cache key parameters for the integration.
    cacheNamespace : str, default is Undefined, optional
        Integration's cache namespace.
    connectionId : str, default is Undefined, optional
        ID of the VpcLink used for the integration. Required if connection_type is VPC_LINK
    connectionIdRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDRef, default is Undefined, optional
        connection Id ref
    connectionIdSelector : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDSelector, default is Undefined, optional
        connection Id selector
    connectionType : str, default is Undefined, optional
        Integration input's connectionType. Valid values are INTERNET (default for connections through the public routable internet), and VPC_LINK (for private connections between API Gateway and a network load balancer in a VPC).
    contentHandling : str, default is Undefined, optional
        How to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
    credentials : str, default is Undefined, optional
        Credentials required for the integration. For AWS integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::\*:user/\*.
    httpMethod : str, default is Undefined, optional
        HTTP method (GET, POST, PUT, DELETE, HEAD, OPTION, ANY)
        when calling the associated resource.
    httpMethodRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodRef, default is Undefined, optional
        http method ref
    httpMethodSelector : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodSelector, default is Undefined, optional
        http method selector
    integrationHttpMethod : str, default is Undefined, optional
        Integration HTTP method
        (GET, POST, PUT, DELETE, HEAD, OPTIONs, ANY, PATCH) specifying how API Gateway will interact with the back end.
        Required if type is AWS, AWS_PROXY, HTTP or HTTP_PROXY.
        Not all methods are compatible with all AWS integrations.
        e.g., Lambda function can only be invoked via POST.
    passthroughBehavior : str, default is Undefined, optional
        Integration passthrough behavior (WHEN_NO_MATCH, WHEN_NO_TEMPLATES, NEVER).  Required if request_templates is used.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    requestParameters : {str:str}, default is Undefined, optional
        Map of request query string parameters and headers that should be passed to the backend responder.
        For example: request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }
    requestTemplates : {str:str}, default is Undefined, optional
        Map of the integration's request templates.
    resourceId : str, default is Undefined, optional
        API resource ID.
    resourceIdRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDRef, default is Undefined, optional
        resource Id ref
    resourceIdSelector : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDSelector, default is Undefined, optional
        resource Id selector
    restApiId : str, default is Undefined, optional
        ID of the associated REST API.
    restApiIdRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDRef, default is Undefined, optional
        rest Api Id ref
    restApiIdSelector : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDSelector, default is Undefined, optional
        rest Api Id selector
    timeoutMilliseconds : float, default is Undefined, optional
        Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
    tlsConfig : [ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderTLSConfigItems0], default is Undefined, optional
        TLS configuration. See below.
    $type : str, default is Undefined, optional
        Integration input's type. Valid values are HTTP (for HTTP backends), MOCK (not calling any real backend), AWS (for AWS services), AWS_PROXY (for Lambda proxy integration) and HTTP_PROXY (for HTTP proxy integration). An HTTP or HTTP_PROXY integration with a connection_type of VPC_LINK is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
    uri : str, default is Undefined, optional
        Input's URI. Required if type is AWS, AWS_PROXY, HTTP or HTTP_PROXY.
        For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}. region, subdomain and service are used to determine the right endpoint.
        e.g., arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
    uriRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURIRef, default is Undefined, optional
        uri ref
    uriSelector : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURISelector, default is Undefined, optional
        uri selector
    """


    cacheKeyParameters?: [str]

    cacheNamespace?: str

    connectionId?: str

    connectionIdRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDRef

    connectionIdSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDSelector

    connectionType?: str

    contentHandling?: str

    credentials?: str

    httpMethod?: str

    httpMethodRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodRef

    httpMethodSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodSelector

    integrationHttpMethod?: str

    passthroughBehavior?: str

    region: str

    requestParameters?: {str:str}

    requestTemplates?: {str:str}

    resourceId?: str

    resourceIdRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDRef

    resourceIdSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDSelector

    restApiId?: str

    restApiIdRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDRef

    restApiIdSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDSelector

    timeoutMilliseconds?: float

    tlsConfig?: [ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderTLSConfigItems0]

    $type?: str

    uri?: str

    uriRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURIRef

    uriSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURISelector


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDRef:
    r"""
    Reference to a VPCLink in apigateway to populate connectionId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDSelector:
    r"""
    Selector for a VPCLink in apigateway to populate connectionId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderConnectionIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodRef:
    r"""
    Reference to a Method in apigateway to populate httpMethod.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodSelector:
    r"""
    Selector for a Method in apigateway to populate httpMethod.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderHTTPMethodSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDRef:
    r"""
    Reference to a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDSelector:
    r"""
    Selector for a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderResourceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDRef:
    r"""
    Reference to a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDSelector:
    r"""
    Selector for a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderRestAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderTLSConfigItems0:
    r"""
    apigateway aws upbound io v1beta1 integration spec for provider TLS config items0

    Attributes
    ----------
    insecureSkipVerification : bool, default is Undefined, optional
        Whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn’t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for HTTP and HTTP_PROXY integrations.
    """


    insecureSkipVerification?: bool


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURIRef:
    r"""
    Reference to a Function in lambda to populate uri.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURIRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURIRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURIRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURISelector:
    r"""
    Selector for a Function in lambda to populate uri.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURISelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURISelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecForProviderURISelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    cacheKeyParameters : [str], default is Undefined, optional
        List of cache key parameters for the integration.
    cacheNamespace : str, default is Undefined, optional
        Integration's cache namespace.
    connectionId : str, default is Undefined, optional
        ID of the VpcLink used for the integration. Required if connection_type is VPC_LINK
    connectionIdRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDRef, default is Undefined, optional
        connection Id ref
    connectionIdSelector : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDSelector, default is Undefined, optional
        connection Id selector
    connectionType : str, default is Undefined, optional
        Integration input's connectionType. Valid values are INTERNET (default for connections through the public routable internet), and VPC_LINK (for private connections between API Gateway and a network load balancer in a VPC).
    contentHandling : str, default is Undefined, optional
        How to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
    credentials : str, default is Undefined, optional
        Credentials required for the integration. For AWS integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::\*:user/\*.
    httpMethod : str, default is Undefined, optional
        HTTP method (GET, POST, PUT, DELETE, HEAD, OPTION, ANY)
        when calling the associated resource.
    httpMethodRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodRef, default is Undefined, optional
        http method ref
    httpMethodSelector : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodSelector, default is Undefined, optional
        http method selector
    integrationHttpMethod : str, default is Undefined, optional
        Integration HTTP method
        (GET, POST, PUT, DELETE, HEAD, OPTIONs, ANY, PATCH) specifying how API Gateway will interact with the back end.
        Required if type is AWS, AWS_PROXY, HTTP or HTTP_PROXY.
        Not all methods are compatible with all AWS integrations.
        e.g., Lambda function can only be invoked via POST.
    passthroughBehavior : str, default is Undefined, optional
        Integration passthrough behavior (WHEN_NO_MATCH, WHEN_NO_TEMPLATES, NEVER).  Required if request_templates is used.
    requestParameters : {str:str}, default is Undefined, optional
        Map of request query string parameters and headers that should be passed to the backend responder.
        For example: request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }
    requestTemplates : {str:str}, default is Undefined, optional
        Map of the integration's request templates.
    resourceId : str, default is Undefined, optional
        API resource ID.
    resourceIdRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDRef, default is Undefined, optional
        resource Id ref
    resourceIdSelector : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDSelector, default is Undefined, optional
        resource Id selector
    restApiId : str, default is Undefined, optional
        ID of the associated REST API.
    restApiIdRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDRef, default is Undefined, optional
        rest Api Id ref
    restApiIdSelector : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDSelector, default is Undefined, optional
        rest Api Id selector
    timeoutMilliseconds : float, default is Undefined, optional
        Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
    tlsConfig : [ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderTLSConfigItems0], default is Undefined, optional
        TLS configuration. See below.
    $type : str, default is Undefined, optional
        Integration input's type. Valid values are HTTP (for HTTP backends), MOCK (not calling any real backend), AWS (for AWS services), AWS_PROXY (for Lambda proxy integration) and HTTP_PROXY (for HTTP proxy integration). An HTTP or HTTP_PROXY integration with a connection_type of VPC_LINK is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
    uri : str, default is Undefined, optional
        Input's URI. Required if type is AWS, AWS_PROXY, HTTP or HTTP_PROXY.
        For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}. region, subdomain and service are used to determine the right endpoint.
        e.g., arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
    uriRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURIRef, default is Undefined, optional
        uri ref
    uriSelector : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURISelector, default is Undefined, optional
        uri selector
    """


    cacheKeyParameters?: [str]

    cacheNamespace?: str

    connectionId?: str

    connectionIdRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDRef

    connectionIdSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDSelector

    connectionType?: str

    contentHandling?: str

    credentials?: str

    httpMethod?: str

    httpMethodRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodRef

    httpMethodSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodSelector

    integrationHttpMethod?: str

    passthroughBehavior?: str

    requestParameters?: {str:str}

    requestTemplates?: {str:str}

    resourceId?: str

    resourceIdRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDRef

    resourceIdSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDSelector

    restApiId?: str

    restApiIdRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDRef

    restApiIdSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDSelector

    timeoutMilliseconds?: float

    tlsConfig?: [ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderTLSConfigItems0]

    $type?: str

    uri?: str

    uriRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURIRef

    uriSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURISelector


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDRef:
    r"""
    Reference to a VPCLink in apigateway to populate connectionId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDSelector:
    r"""
    Selector for a VPCLink in apigateway to populate connectionId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderConnectionIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodRef:
    r"""
    Reference to a Method in apigateway to populate httpMethod.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodSelector:
    r"""
    Selector for a Method in apigateway to populate httpMethod.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderHTTPMethodSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDRef:
    r"""
    Reference to a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDSelector:
    r"""
    Selector for a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderResourceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDRef:
    r"""
    Reference to a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDSelector:
    r"""
    Selector for a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderRestAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderTLSConfigItems0:
    r"""
    apigateway aws upbound io v1beta1 integration spec init provider TLS config items0

    Attributes
    ----------
    insecureSkipVerification : bool, default is Undefined, optional
        Whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn’t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for HTTP and HTTP_PROXY integrations.
    """


    insecureSkipVerification?: bool


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURIRef:
    r"""
    Reference to a Function in lambda to populate uri.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURIRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURIRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURIRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURISelector:
    r"""
    Selector for a Function in lambda to populate uri.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURISelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURISelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecInitProviderURISelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecProviderConfigRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsToConfigRef

    metadata?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsToMetadata

    name: str


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsToConfigRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ApigatewayAwsUpboundIoV1beta1IntegrationSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ApigatewayAwsUpboundIoV1beta1IntegrationStatus:
    r"""
    IntegrationStatus defines the observed state of Integration.

    Attributes
    ----------
    atProvider : ApigatewayAwsUpboundIoV1beta1IntegrationStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ApigatewayAwsUpboundIoV1beta1IntegrationStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ApigatewayAwsUpboundIoV1beta1IntegrationStatusAtProvider

    conditions?: [ApigatewayAwsUpboundIoV1beta1IntegrationStatusConditionsItems0]

    observedGeneration?: int


schema ApigatewayAwsUpboundIoV1beta1IntegrationStatusAtProvider:
    r"""
    apigateway aws upbound io v1beta1 integration status at provider

    Attributes
    ----------
    cacheKeyParameters : [str], default is Undefined, optional
        List of cache key parameters for the integration.
    cacheNamespace : str, default is Undefined, optional
        Integration's cache namespace.
    connectionId : str, default is Undefined, optional
        ID of the VpcLink used for the integration. Required if connection_type is VPC_LINK
    connectionType : str, default is Undefined, optional
        Integration input's connectionType. Valid values are INTERNET (default for connections through the public routable internet), and VPC_LINK (for private connections between API Gateway and a network load balancer in a VPC).
    contentHandling : str, default is Undefined, optional
        How to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
    credentials : str, default is Undefined, optional
        Credentials required for the integration. For AWS integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::\*:user/\*.
    httpMethod : str, default is Undefined, optional
        HTTP method (GET, POST, PUT, DELETE, HEAD, OPTION, ANY)
        when calling the associated resource.
    id : str, default is Undefined, optional
        id
    integrationHttpMethod : str, default is Undefined, optional
        Integration HTTP method
        (GET, POST, PUT, DELETE, HEAD, OPTIONs, ANY, PATCH) specifying how API Gateway will interact with the back end.
        Required if type is AWS, AWS_PROXY, HTTP or HTTP_PROXY.
        Not all methods are compatible with all AWS integrations.
        e.g., Lambda function can only be invoked via POST.
    passthroughBehavior : str, default is Undefined, optional
        Integration passthrough behavior (WHEN_NO_MATCH, WHEN_NO_TEMPLATES, NEVER).  Required if request_templates is used.
    requestParameters : {str:str}, default is Undefined, optional
        Map of request query string parameters and headers that should be passed to the backend responder.
        For example: request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }
    requestTemplates : {str:str}, default is Undefined, optional
        Map of the integration's request templates.
    resourceId : str, default is Undefined, optional
        API resource ID.
    restApiId : str, default is Undefined, optional
        ID of the associated REST API.
    timeoutMilliseconds : float, default is Undefined, optional
        Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
    tlsConfig : [ApigatewayAwsUpboundIoV1beta1IntegrationStatusAtProviderTLSConfigItems0], default is Undefined, optional
        TLS configuration. See below.
    $type : str, default is Undefined, optional
        Integration input's type. Valid values are HTTP (for HTTP backends), MOCK (not calling any real backend), AWS (for AWS services), AWS_PROXY (for Lambda proxy integration) and HTTP_PROXY (for HTTP proxy integration). An HTTP or HTTP_PROXY integration with a connection_type of VPC_LINK is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
    uri : str, default is Undefined, optional
        Input's URI. Required if type is AWS, AWS_PROXY, HTTP or HTTP_PROXY.
        For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}. region, subdomain and service are used to determine the right endpoint.
        e.g., arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
    """


    cacheKeyParameters?: [str]

    cacheNamespace?: str

    connectionId?: str

    connectionType?: str

    contentHandling?: str

    credentials?: str

    httpMethod?: str

    id?: str

    integrationHttpMethod?: str

    passthroughBehavior?: str

    requestParameters?: {str:str}

    requestTemplates?: {str:str}

    resourceId?: str

    restApiId?: str

    timeoutMilliseconds?: float

    tlsConfig?: [ApigatewayAwsUpboundIoV1beta1IntegrationStatusAtProviderTLSConfigItems0]

    $type?: str

    uri?: str


schema ApigatewayAwsUpboundIoV1beta1IntegrationStatusAtProviderTLSConfigItems0:
    r"""
    apigateway aws upbound io v1beta1 integration status at provider TLS config items0

    Attributes
    ----------
    insecureSkipVerification : bool, default is Undefined, optional
        Whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isn’t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for HTTP and HTTP_PROXY integrations.
    """


    insecureSkipVerification?: bool


schema ApigatewayAwsUpboundIoV1beta1IntegrationStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


