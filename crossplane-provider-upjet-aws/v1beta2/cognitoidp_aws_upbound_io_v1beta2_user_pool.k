"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema UserPool:
    r"""
    UserPool is the Schema for the UserPools API. Provides a Cognito User Pool resource.

    Attributes
    ----------
    apiVersion : str, default is "cognitoidp.aws.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "UserPool", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : CognitoidpAwsUpboundIoV1beta2UserPoolSpec, default is Undefined, required
        spec
    status : CognitoidpAwsUpboundIoV1beta2UserPoolStatus, default is Undefined, optional
        status
    """


    apiVersion: "cognitoidp.aws.upbound.io/v1beta2" = "cognitoidp.aws.upbound.io/v1beta2"

    kind: "UserPool" = "UserPool"

    metadata?: v1.ObjectMeta

    spec: CognitoidpAwsUpboundIoV1beta2UserPoolSpec

    status?: CognitoidpAwsUpboundIoV1beta2UserPoolStatus


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpec:
    r"""
    UserPoolSpec defines the desired state of UserPool

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProvider, default is Undefined, required
        for provider
    initProvider : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProvider

    initProvider?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecProviderConfigRef

    publishConnectionDetailsTo?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecWriteConnectionSecretToRef


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProvider:
    r"""
    cognitoidp aws upbound io v1beta2 user pool spec for provider

    Attributes
    ----------
    accountRecoverySetting : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAccountRecoverySetting, default is Undefined, optional
        account recovery setting
    adminCreateUserConfig : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAdminCreateUserConfig, default is Undefined, optional
        admin create user config
    aliasAttributes : [str], default is Undefined, optional
        Attributes supported as an alias for this user pool. Valid values: phone_number, email, or preferred_username. Conflicts with username_attributes.
    autoVerifiedAttributes : [str], default is Undefined, optional
        Attributes to be auto-verified. Valid values: email, phone_number.
    deletionProtection : str, default is Undefined, optional
        When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are ACTIVE and INACTIVE, Default value is INACTIVE.
    deviceConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderDeviceConfiguration, default is Undefined, optional
        device configuration
    emailConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderEmailConfiguration, default is Undefined, optional
        email configuration
    emailVerificationMessage : str, default is Undefined, optional
        String representing the email verification message. Conflicts with verification_message_template configuration block email_message argument.
    emailVerificationSubject : str, default is Undefined, optional
        String representing the email verification subject. Conflicts with verification_message_template configuration block email_subject argument.
    lambdaConfig : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfig, default is Undefined, optional
        lambda config
    mfaConfiguration : str, default is Undefined, optional
        Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of OFF. Valid values are OFF (MFA Tokens are not required), ON (MFA is required for all users to sign in; requires at least one of sms_configuration or software_token_mfa_configuration to be configured), or OPTIONAL (MFA Will be required only for individual users who have MFA Enabled; requires at least one of sms_configuration or software_token_mfa_configuration to be configured).
    name : str, default is Undefined, optional
        Name of the user pool.
    passwordPolicy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderPasswordPolicy, default is Undefined, optional
        password policy
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    $schema : [CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSchemaItems0], default is Undefined, optional
        Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the standard attribute set only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.
    smsAuthenticationMessage : str, default is Undefined, optional
        String representing the SMS authentication message. The Message must contain the {####} placeholder, which will be replaced with the code.
    smsConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfiguration, default is Undefined, optional
        sms configuration
    smsVerificationMessage : str, default is Undefined, optional
        String representing the SMS verification message. Conflicts with verification_message_template configuration block sms_message argument.
    softwareTokenMfaConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSoftwareTokenMfaConfiguration, default is Undefined, optional
        software token mfa configuration
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    userAttributeUpdateSettings : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderUserAttributeUpdateSettings, default is Undefined, optional
        user attribute update settings
    userPoolAddOns : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderUserPoolAddOns, default is Undefined, optional
        user pool add ons
    usernameAttributes : [str], default is Undefined, optional
        Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with alias_attributes.
    usernameConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderUsernameConfiguration, default is Undefined, optional
        username configuration
    verificationMessageTemplate : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderVerificationMessageTemplate, default is Undefined, optional
        verification message template
    """


    accountRecoverySetting?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAccountRecoverySetting

    adminCreateUserConfig?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAdminCreateUserConfig

    aliasAttributes?: [str]

    autoVerifiedAttributes?: [str]

    deletionProtection?: str

    deviceConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderDeviceConfiguration

    emailConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderEmailConfiguration

    emailVerificationMessage?: str

    emailVerificationSubject?: str

    lambdaConfig?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfig

    mfaConfiguration?: str

    name?: str

    passwordPolicy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderPasswordPolicy

    region: str

    $schema?: [CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSchemaItems0]

    smsAuthenticationMessage?: str

    smsConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfiguration

    smsVerificationMessage?: str

    softwareTokenMfaConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSoftwareTokenMfaConfiguration

    tags?: {str:str}

    userAttributeUpdateSettings?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderUserAttributeUpdateSettings

    userPoolAddOns?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderUserPoolAddOns

    usernameAttributes?: [str]

    usernameConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderUsernameConfiguration

    verificationMessageTemplate?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderVerificationMessageTemplate


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAccountRecoverySetting:
    r"""
    Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.

    Attributes
    ----------
    recoveryMechanism : [CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAccountRecoverySettingRecoveryMechanismItems0], default is Undefined, optional
        List of Account Recovery Options of the following structure:
    """


    recoveryMechanism?: [CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAccountRecoverySettingRecoveryMechanismItems0]


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAccountRecoverySettingRecoveryMechanismItems0:
    r"""
    cognitoidp aws upbound io v1beta2 user pool spec for provider account recovery setting recovery mechanism items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the user pool.
    priority : float, default is Undefined, optional
        Positive integer specifying priority of a method with 1 being the highest priority.
    """


    name?: str

    priority?: float


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAdminCreateUserConfig:
    r"""
    Configuration block for creating a new user profile. Detailed below.

    Attributes
    ----------
    allowAdminCreateUserOnly : bool, default is Undefined, optional
        Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
    inviteMessageTemplate : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAdminCreateUserConfigInviteMessageTemplate, default is Undefined, optional
        invite message template
    """


    allowAdminCreateUserOnly?: bool

    inviteMessageTemplate?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAdminCreateUserConfigInviteMessageTemplate


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderAdminCreateUserConfigInviteMessageTemplate:
    r"""
    Invite message template structure. Detailed below.

    Attributes
    ----------
    emailMessage : str, default is Undefined, optional
        Message template for email messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.
    emailSubject : str, default is Undefined, optional
        Subject line for email messages.
    smsMessage : str, default is Undefined, optional
        Message template for SMS messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.
    """


    emailMessage?: str

    emailSubject?: str

    smsMessage?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderDeviceConfiguration:
    r"""
    Configuration block for the user pool's device tracking. Detailed below.

    Attributes
    ----------
    challengeRequiredOnNewDevice : bool, default is Undefined, optional
        Whether a challenge is required on a new device. Only applicable to a new device.
    deviceOnlyRememberedOnUserPrompt : bool, default is Undefined, optional
        Whether a device is only remembered on user prompt. false equates to "Always" remember, true is "User Opt In," and not using a device_configuration block is "No."
    """


    challengeRequiredOnNewDevice?: bool

    deviceOnlyRememberedOnUserPrompt?: bool


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderEmailConfiguration:
    r"""
    Configuration block for configuring email. Detailed below.

    Attributes
    ----------
    configurationSet : str, default is Undefined, optional
        Email configuration set name from SES.
    emailSendingAccount : str, default is Undefined, optional
        Email delivery method to use. COGNITO_DEFAULT for the default email functionality built into Cognito or DEVELOPER to use your Amazon SES configuration. Required to be DEVELOPER if from_email_address is set.
    fromEmailAddress : str, default is Undefined, optional
        Sender’s email address or sender’s display name with their email address (e.g., john@example.com, John Smith <john@example.com> or \"John Smith Ph.D.\" <john@example.com>). Escaped double quotes are required around display names that contain certain characters as specified in RFC 5322.
    replyToEmailAddress : str, default is Undefined, optional
        REPLY-TO email address.
    sourceArn : str, default is Undefined, optional
        ARN of the SES verified email identity to use. Required if email_sending_account is set to DEVELOPER.
    """


    configurationSet?: str

    emailSendingAccount?: str

    fromEmailAddress?: str

    replyToEmailAddress?: str

    sourceArn?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfig:
    r"""
    Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.

    Attributes
    ----------
    createAuthChallenge : str, default is Undefined, optional
        ARN of the lambda creating an authentication challenge.
    createAuthChallengeRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeRef, default is Undefined, optional
        create auth challenge ref
    createAuthChallengeSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeSelector, default is Undefined, optional
        create auth challenge selector
    customEmailSender : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSender, default is Undefined, optional
        custom email sender
    customMessage : str, default is Undefined, optional
        Custom Message AWS Lambda trigger.
    customMessageRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageRef, default is Undefined, optional
        custom message ref
    customMessageSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageSelector, default is Undefined, optional
        custom message selector
    customSmsSender : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSender, default is Undefined, optional
        custom sms sender
    defineAuthChallenge : str, default is Undefined, optional
        Defines the authentication challenge.
    defineAuthChallengeRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeRef, default is Undefined, optional
        define auth challenge ref
    defineAuthChallengeSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeSelector, default is Undefined, optional
        define auth challenge selector
    kmsKeyId : str, default is Undefined, optional
        The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.
    kmsKeyIdRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDRef, default is Undefined, optional
        kms key Id ref
    kmsKeyIdSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDSelector, default is Undefined, optional
        kms key Id selector
    postAuthentication : str, default is Undefined, optional
        Post-authentication AWS Lambda trigger.
    postAuthenticationRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationRef, default is Undefined, optional
        post authentication ref
    postAuthenticationSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationSelector, default is Undefined, optional
        post authentication selector
    postConfirmation : str, default is Undefined, optional
        Post-confirmation AWS Lambda trigger.
    postConfirmationRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationRef, default is Undefined, optional
        post confirmation ref
    postConfirmationSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationSelector, default is Undefined, optional
        post confirmation selector
    preAuthentication : str, default is Undefined, optional
        Pre-authentication AWS Lambda trigger.
    preAuthenticationRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationRef, default is Undefined, optional
        pre authentication ref
    preAuthenticationSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationSelector, default is Undefined, optional
        pre authentication selector
    preSignUp : str, default is Undefined, optional
        Pre-registration AWS Lambda trigger.
    preSignUpRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpRef, default is Undefined, optional
        pre sign up ref
    preSignUpSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpSelector, default is Undefined, optional
        pre sign up selector
    preTokenGeneration : str, default is Undefined, optional
        Allow to customize identity token claims before token generation. Set this parameter for legacy purposes; for new instances of pre token generation triggers, set the lambda_arn of pre_token_generation_config.
    preTokenGenerationConfig : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationConfig, default is Undefined, optional
        pre token generation config
    preTokenGenerationRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationRef, default is Undefined, optional
        pre token generation ref
    preTokenGenerationSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationSelector, default is Undefined, optional
        pre token generation selector
    userMigration : str, default is Undefined, optional
        User migration Lambda config type.
    userMigrationRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationRef, default is Undefined, optional
        user migration ref
    userMigrationSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationSelector, default is Undefined, optional
        user migration selector
    verifyAuthChallengeResponse : str, default is Undefined, optional
        Verifies the authentication challenge response.
    verifyAuthChallengeResponseRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseRef, default is Undefined, optional
        verify auth challenge response ref
    verifyAuthChallengeResponseSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseSelector, default is Undefined, optional
        verify auth challenge response selector
    """


    createAuthChallenge?: str

    createAuthChallengeRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeRef

    createAuthChallengeSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeSelector

    customEmailSender?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSender

    customMessage?: str

    customMessageRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageRef

    customMessageSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageSelector

    customSmsSender?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSender

    defineAuthChallenge?: str

    defineAuthChallengeRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeRef

    defineAuthChallengeSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeSelector

    kmsKeyId?: str

    kmsKeyIdRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDRef

    kmsKeyIdSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDSelector

    postAuthentication?: str

    postAuthenticationRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationRef

    postAuthenticationSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationSelector

    postConfirmation?: str

    postConfirmationRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationRef

    postConfirmationSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationSelector

    preAuthentication?: str

    preAuthenticationRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationRef

    preAuthenticationSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationSelector

    preSignUp?: str

    preSignUpRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpRef

    preSignUpSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpSelector

    preTokenGeneration?: str

    preTokenGenerationConfig?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationConfig

    preTokenGenerationRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationRef

    preTokenGenerationSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationSelector

    userMigration?: str

    userMigrationRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationRef

    userMigrationSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationSelector

    verifyAuthChallengeResponse?: str

    verifyAuthChallengeResponseRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseRef

    verifyAuthChallengeResponseSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseSelector


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeRef:
    r"""
    Reference to a Function in lambda to populate createAuthChallenge.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeSelector:
    r"""
    Selector for a Function in lambda to populate createAuthChallenge.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCreateAuthChallengeSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSender:
    r"""
    A custom email sender AWS Lambda trigger. See custom_email_sender Below.

    Attributes
    ----------
    lambdaArn : str, default is Undefined, optional
        The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.
    lambdaArnRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnRef, default is Undefined, optional
        lambda arn ref
    lambdaArnSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnSelector, default is Undefined, optional
        lambda arn selector
    lambdaVersion : str, default is Undefined, optional
        The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom email Lambda function. The only supported value is V1_0.
    """


    lambdaArn?: str

    lambdaArnRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnRef

    lambdaArnSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnSelector

    lambdaVersion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnRef:
    r"""
    Reference to a Function in lambda to populate lambdaArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnSelector:
    r"""
    Selector for a Function in lambda to populate lambdaArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomEmailSenderLambdaArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageRef:
    r"""
    Reference to a Function in lambda to populate customMessage.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageSelector:
    r"""
    Selector for a Function in lambda to populate customMessage.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomMessageSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSender:
    r"""
    A custom SMS sender AWS Lambda trigger. See custom_sms_sender Below.

    Attributes
    ----------
    lambdaArn : str, default is Undefined, optional
        The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
    lambdaArnRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnRef, default is Undefined, optional
        lambda arn ref
    lambdaArnSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnSelector, default is Undefined, optional
        lambda arn selector
    lambdaVersion : str, default is Undefined, optional
        The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is V1_0.
    """


    lambdaArn?: str

    lambdaArnRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnRef

    lambdaArnSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnSelector

    lambdaVersion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnRef:
    r"""
    Reference to a Function in lambda to populate lambdaArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnSelector:
    r"""
    Selector for a Function in lambda to populate lambdaArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigCustomSmsSenderLambdaArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeRef:
    r"""
    Reference to a Function in lambda to populate defineAuthChallenge.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeSelector:
    r"""
    Selector for a Function in lambda to populate defineAuthChallenge.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigDefineAuthChallengeSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDRef:
    r"""
    Reference to a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDSelector:
    r"""
    Selector for a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigKmsKeyIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationRef:
    r"""
    Reference to a Function in lambda to populate postAuthentication.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationSelector:
    r"""
    Selector for a Function in lambda to populate postAuthentication.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostAuthenticationSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationRef:
    r"""
    Reference to a Function in lambda to populate postConfirmation.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationSelector:
    r"""
    Selector for a Function in lambda to populate postConfirmation.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPostConfirmationSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationRef:
    r"""
    Reference to a Function in lambda to populate preAuthentication.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationSelector:
    r"""
    Selector for a Function in lambda to populate preAuthentication.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreAuthenticationSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpRef:
    r"""
    Reference to a Function in lambda to populate preSignUp.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpSelector:
    r"""
    Selector for a Function in lambda to populate preSignUp.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreSignUpSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationConfig:
    r"""
    Allow to customize access tokens. See pre_token_configuration_type

    Attributes
    ----------
    lambdaArn : str, default is Undefined, optional
        The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
    lambdaVersion : str, default is Undefined, optional
        The Lambda version represents the signature of the "version" attribute in the "event" information Amazon Cognito passes to your pre Token Generation Lambda function. The supported values are V1_0, V2_0.
    """


    lambdaArn?: str

    lambdaVersion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationRef:
    r"""
    Reference to a Function in lambda to populate preTokenGeneration.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationSelector:
    r"""
    Selector for a Function in lambda to populate preTokenGeneration.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigPreTokenGenerationSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationRef:
    r"""
    Reference to a Function in lambda to populate userMigration.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationSelector:
    r"""
    Selector for a Function in lambda to populate userMigration.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigUserMigrationSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseRef:
    r"""
    Reference to a Function in lambda to populate verifyAuthChallengeResponse.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseSelector:
    r"""
    Selector for a Function in lambda to populate verifyAuthChallengeResponse.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderLambdaConfigVerifyAuthChallengeResponseSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderPasswordPolicy:
    r"""
    Configuration block for information about the user pool password policy. Detailed below.

    Attributes
    ----------
    minimumLength : float, default is Undefined, optional
        Minimum length of the password policy that you have set.
    passwordHistorySize : float, default is Undefined, optional
        Number of previous passwords that you want Amazon Cognito to restrict each user from reusing. Users can't set a password that matches any of number of previous passwords specified by this argument. A value of 0 means that password history is not enforced. Valid values are between 0 and 24.
    requireLowercase : bool, default is Undefined, optional
        Whether you have required users to use at least one lowercase letter in their password.
    requireNumbers : bool, default is Undefined, optional
        Whether you have required users to use at least one number in their password.
    requireSymbols : bool, default is Undefined, optional
        Whether you have required users to use at least one symbol in their password.
    requireUppercase : bool, default is Undefined, optional
        Whether you have required users to use at least one uppercase letter in their password.
    temporaryPasswordValidityDays : float, default is Undefined, optional
        In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
    """


    minimumLength?: float

    passwordHistorySize?: float

    requireLowercase?: bool

    requireNumbers?: bool

    requireSymbols?: bool

    requireUppercase?: bool

    temporaryPasswordValidityDays?: float


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSchemaItems0:
    r"""
    cognitoidp aws upbound io v1beta2 user pool spec for provider schema items0

    Attributes
    ----------
    attributeDataType : str, default is Undefined, optional
        Attribute data type. Must be one of Boolean, Number, String, DateTime.
    developerOnlyAttribute : bool, default is Undefined, optional
        Whether the attribute type is developer only.
    mutable : bool, default is Undefined, optional
        Whether the attribute can be changed once it has been created.
    name : str, default is Undefined, optional
        Name of the user pool.
    numberAttributeConstraints : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSchemaItems0NumberAttributeConstraints, default is Undefined, optional
        number attribute constraints
    required : bool, default is Undefined, optional
        Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
    stringAttributeConstraints : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSchemaItems0StringAttributeConstraints, default is Undefined, optional
        string attribute constraints
    """


    attributeDataType?: str

    developerOnlyAttribute?: bool

    mutable?: bool

    name?: str

    numberAttributeConstraints?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSchemaItems0NumberAttributeConstraints

    required?: bool

    stringAttributeConstraints?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSchemaItems0StringAttributeConstraints


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSchemaItems0NumberAttributeConstraints:
    r"""
    Configuration block for the constraints for an attribute of the number type. Detailed below.

    Attributes
    ----------
    maxValue : str, default is Undefined, optional
        Maximum value of an attribute that is of the number data type.
    minValue : str, default is Undefined, optional
        Minimum value of an attribute that is of the number data type.
    """


    maxValue?: str

    minValue?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSchemaItems0StringAttributeConstraints:
    r"""
    Constraints for an attribute of the string type. Detailed below.

    Attributes
    ----------
    maxLength : str, default is Undefined, optional
        Maximum length of an attribute value of the string type.
    minLength : str, default is Undefined, optional
        Minimum length of an attribute value of the string type.
    """


    maxLength?: str

    minLength?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfiguration:
    r"""
    Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the taint command.

    Attributes
    ----------
    externalId : str, default is Undefined, optional
        External ID used in IAM role trust relationships. For more information about using external IDs, see How to Use an External ID When Granting Access to Your AWS Resources to a Third Party.
    snsCallerArn : str, default is Undefined, optional
        ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
    snsCallerArnRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnRef, default is Undefined, optional
        sns caller arn ref
    snsCallerArnSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnSelector, default is Undefined, optional
        sns caller arn selector
    snsRegion : str, default is Undefined, optional
        The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see SMS message settings for Amazon Cognito user pools.
    """


    externalId?: str

    snsCallerArn?: str

    snsCallerArnRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnRef

    snsCallerArnSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnSelector

    snsRegion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnRef:
    r"""
    Reference to a Role in iam to populate snsCallerArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnSelector:
    r"""
    Selector for a Role in iam to populate snsCallerArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSmsConfigurationSnsCallerArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderSoftwareTokenMfaConfiguration:
    r"""
    Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA When sms_configuration is not present, the mfa_configuration argument must be set to OFF and the software_token_mfa_configuration configuration block must be fully removed.
    """


    enabled?: bool


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderUserAttributeUpdateSettings:
    r"""
    Configuration block for user attribute update settings. Detailed below.

    Attributes
    ----------
    attributesRequireVerificationBeforeUpdate : [str], default is Undefined, optional
        A list of attributes requiring verification before update. If set, the provided value(s) must also be set in auto_verified_attributes. Valid values: email, phone_number.
    """


    attributesRequireVerificationBeforeUpdate?: [str]


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderUserPoolAddOns:
    r"""
    Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.

    Attributes
    ----------
    advancedSecurityMode : str, default is Undefined, optional
        Mode for advanced security, must be one of OFF, AUDIT or ENFORCED.
    """


    advancedSecurityMode?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderUsernameConfiguration:
    r"""
    Configuration block for username configuration. Detailed below.

    Attributes
    ----------
    caseSensitive : bool, default is Undefined, optional
        Whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
    """


    caseSensitive?: bool


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecForProviderVerificationMessageTemplate:
    r"""
    Configuration block for verification message templates. Detailed below.

    Attributes
    ----------
    defaultEmailOption : str, default is Undefined, optional
        Default email option. Must be either CONFIRM_WITH_CODE or CONFIRM_WITH_LINK. Defaults to CONFIRM_WITH_CODE.
    emailMessage : str, default is Undefined, optional
        Email message template. Must contain the {####} placeholder. Conflicts with email_verification_message argument.
    emailMessageByLink : str, default is Undefined, optional
        Email message template for sending a confirmation link to the user, it must contain the {##Click Here##} placeholder.
    emailSubject : str, default is Undefined, optional
        Subject line for the email message template. Conflicts with email_verification_subject argument.
    emailSubjectByLink : str, default is Undefined, optional
        Subject line for the email message template for sending a confirmation link to the user.
    smsMessage : str, default is Undefined, optional
        SMS message template. Must contain the {####} placeholder. Conflicts with sms_verification_message argument.
    """


    defaultEmailOption?: str

    emailMessage?: str

    emailMessageByLink?: str

    emailSubject?: str

    emailSubjectByLink?: str

    smsMessage?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    accountRecoverySetting : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAccountRecoverySetting, default is Undefined, optional
        account recovery setting
    adminCreateUserConfig : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAdminCreateUserConfig, default is Undefined, optional
        admin create user config
    aliasAttributes : [str], default is Undefined, optional
        Attributes supported as an alias for this user pool. Valid values: phone_number, email, or preferred_username. Conflicts with username_attributes.
    autoVerifiedAttributes : [str], default is Undefined, optional
        Attributes to be auto-verified. Valid values: email, phone_number.
    deletionProtection : str, default is Undefined, optional
        When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are ACTIVE and INACTIVE, Default value is INACTIVE.
    deviceConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderDeviceConfiguration, default is Undefined, optional
        device configuration
    emailConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderEmailConfiguration, default is Undefined, optional
        email configuration
    emailVerificationMessage : str, default is Undefined, optional
        String representing the email verification message. Conflicts with verification_message_template configuration block email_message argument.
    emailVerificationSubject : str, default is Undefined, optional
        String representing the email verification subject. Conflicts with verification_message_template configuration block email_subject argument.
    lambdaConfig : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfig, default is Undefined, optional
        lambda config
    mfaConfiguration : str, default is Undefined, optional
        Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of OFF. Valid values are OFF (MFA Tokens are not required), ON (MFA is required for all users to sign in; requires at least one of sms_configuration or software_token_mfa_configuration to be configured), or OPTIONAL (MFA Will be required only for individual users who have MFA Enabled; requires at least one of sms_configuration or software_token_mfa_configuration to be configured).
    name : str, default is Undefined, optional
        Name of the user pool.
    passwordPolicy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderPasswordPolicy, default is Undefined, optional
        password policy
    $schema : [CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSchemaItems0], default is Undefined, optional
        Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the standard attribute set only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.
    smsAuthenticationMessage : str, default is Undefined, optional
        String representing the SMS authentication message. The Message must contain the {####} placeholder, which will be replaced with the code.
    smsConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfiguration, default is Undefined, optional
        sms configuration
    smsVerificationMessage : str, default is Undefined, optional
        String representing the SMS verification message. Conflicts with verification_message_template configuration block sms_message argument.
    softwareTokenMfaConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSoftwareTokenMfaConfiguration, default is Undefined, optional
        software token mfa configuration
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    userAttributeUpdateSettings : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderUserAttributeUpdateSettings, default is Undefined, optional
        user attribute update settings
    userPoolAddOns : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderUserPoolAddOns, default is Undefined, optional
        user pool add ons
    usernameAttributes : [str], default is Undefined, optional
        Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with alias_attributes.
    usernameConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderUsernameConfiguration, default is Undefined, optional
        username configuration
    verificationMessageTemplate : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderVerificationMessageTemplate, default is Undefined, optional
        verification message template
    """


    accountRecoverySetting?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAccountRecoverySetting

    adminCreateUserConfig?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAdminCreateUserConfig

    aliasAttributes?: [str]

    autoVerifiedAttributes?: [str]

    deletionProtection?: str

    deviceConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderDeviceConfiguration

    emailConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderEmailConfiguration

    emailVerificationMessage?: str

    emailVerificationSubject?: str

    lambdaConfig?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfig

    mfaConfiguration?: str

    name?: str

    passwordPolicy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderPasswordPolicy

    $schema?: [CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSchemaItems0]

    smsAuthenticationMessage?: str

    smsConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfiguration

    smsVerificationMessage?: str

    softwareTokenMfaConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSoftwareTokenMfaConfiguration

    tags?: {str:str}

    userAttributeUpdateSettings?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderUserAttributeUpdateSettings

    userPoolAddOns?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderUserPoolAddOns

    usernameAttributes?: [str]

    usernameConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderUsernameConfiguration

    verificationMessageTemplate?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderVerificationMessageTemplate


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAccountRecoverySetting:
    r"""
    Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.

    Attributes
    ----------
    recoveryMechanism : [CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAccountRecoverySettingRecoveryMechanismItems0], default is Undefined, optional
        List of Account Recovery Options of the following structure:
    """


    recoveryMechanism?: [CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAccountRecoverySettingRecoveryMechanismItems0]


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAccountRecoverySettingRecoveryMechanismItems0:
    r"""
    cognitoidp aws upbound io v1beta2 user pool spec init provider account recovery setting recovery mechanism items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the user pool.
    priority : float, default is Undefined, optional
        Positive integer specifying priority of a method with 1 being the highest priority.
    """


    name?: str

    priority?: float


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAdminCreateUserConfig:
    r"""
    Configuration block for creating a new user profile. Detailed below.

    Attributes
    ----------
    allowAdminCreateUserOnly : bool, default is Undefined, optional
        Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
    inviteMessageTemplate : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAdminCreateUserConfigInviteMessageTemplate, default is Undefined, optional
        invite message template
    """


    allowAdminCreateUserOnly?: bool

    inviteMessageTemplate?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAdminCreateUserConfigInviteMessageTemplate


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderAdminCreateUserConfigInviteMessageTemplate:
    r"""
    Invite message template structure. Detailed below.

    Attributes
    ----------
    emailMessage : str, default is Undefined, optional
        Message template for email messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.
    emailSubject : str, default is Undefined, optional
        Subject line for email messages.
    smsMessage : str, default is Undefined, optional
        Message template for SMS messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.
    """


    emailMessage?: str

    emailSubject?: str

    smsMessage?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderDeviceConfiguration:
    r"""
    Configuration block for the user pool's device tracking. Detailed below.

    Attributes
    ----------
    challengeRequiredOnNewDevice : bool, default is Undefined, optional
        Whether a challenge is required on a new device. Only applicable to a new device.
    deviceOnlyRememberedOnUserPrompt : bool, default is Undefined, optional
        Whether a device is only remembered on user prompt. false equates to "Always" remember, true is "User Opt In," and not using a device_configuration block is "No."
    """


    challengeRequiredOnNewDevice?: bool

    deviceOnlyRememberedOnUserPrompt?: bool


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderEmailConfiguration:
    r"""
    Configuration block for configuring email. Detailed below.

    Attributes
    ----------
    configurationSet : str, default is Undefined, optional
        Email configuration set name from SES.
    emailSendingAccount : str, default is Undefined, optional
        Email delivery method to use. COGNITO_DEFAULT for the default email functionality built into Cognito or DEVELOPER to use your Amazon SES configuration. Required to be DEVELOPER if from_email_address is set.
    fromEmailAddress : str, default is Undefined, optional
        Sender’s email address or sender’s display name with their email address (e.g., john@example.com, John Smith <john@example.com> or \"John Smith Ph.D.\" <john@example.com>). Escaped double quotes are required around display names that contain certain characters as specified in RFC 5322.
    replyToEmailAddress : str, default is Undefined, optional
        REPLY-TO email address.
    sourceArn : str, default is Undefined, optional
        ARN of the SES verified email identity to use. Required if email_sending_account is set to DEVELOPER.
    """


    configurationSet?: str

    emailSendingAccount?: str

    fromEmailAddress?: str

    replyToEmailAddress?: str

    sourceArn?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfig:
    r"""
    Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.

    Attributes
    ----------
    createAuthChallenge : str, default is Undefined, optional
        ARN of the lambda creating an authentication challenge.
    createAuthChallengeRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeRef, default is Undefined, optional
        create auth challenge ref
    createAuthChallengeSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeSelector, default is Undefined, optional
        create auth challenge selector
    customEmailSender : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSender, default is Undefined, optional
        custom email sender
    customMessage : str, default is Undefined, optional
        Custom Message AWS Lambda trigger.
    customMessageRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageRef, default is Undefined, optional
        custom message ref
    customMessageSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageSelector, default is Undefined, optional
        custom message selector
    customSmsSender : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSender, default is Undefined, optional
        custom sms sender
    defineAuthChallenge : str, default is Undefined, optional
        Defines the authentication challenge.
    defineAuthChallengeRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeRef, default is Undefined, optional
        define auth challenge ref
    defineAuthChallengeSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeSelector, default is Undefined, optional
        define auth challenge selector
    kmsKeyId : str, default is Undefined, optional
        The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.
    kmsKeyIdRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDRef, default is Undefined, optional
        kms key Id ref
    kmsKeyIdSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDSelector, default is Undefined, optional
        kms key Id selector
    postAuthentication : str, default is Undefined, optional
        Post-authentication AWS Lambda trigger.
    postAuthenticationRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationRef, default is Undefined, optional
        post authentication ref
    postAuthenticationSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationSelector, default is Undefined, optional
        post authentication selector
    postConfirmation : str, default is Undefined, optional
        Post-confirmation AWS Lambda trigger.
    postConfirmationRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationRef, default is Undefined, optional
        post confirmation ref
    postConfirmationSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationSelector, default is Undefined, optional
        post confirmation selector
    preAuthentication : str, default is Undefined, optional
        Pre-authentication AWS Lambda trigger.
    preAuthenticationRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationRef, default is Undefined, optional
        pre authentication ref
    preAuthenticationSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationSelector, default is Undefined, optional
        pre authentication selector
    preSignUp : str, default is Undefined, optional
        Pre-registration AWS Lambda trigger.
    preSignUpRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpRef, default is Undefined, optional
        pre sign up ref
    preSignUpSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpSelector, default is Undefined, optional
        pre sign up selector
    preTokenGeneration : str, default is Undefined, optional
        Allow to customize identity token claims before token generation. Set this parameter for legacy purposes; for new instances of pre token generation triggers, set the lambda_arn of pre_token_generation_config.
    preTokenGenerationConfig : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationConfig, default is Undefined, optional
        pre token generation config
    preTokenGenerationRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationRef, default is Undefined, optional
        pre token generation ref
    preTokenGenerationSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationSelector, default is Undefined, optional
        pre token generation selector
    userMigration : str, default is Undefined, optional
        User migration Lambda config type.
    userMigrationRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationRef, default is Undefined, optional
        user migration ref
    userMigrationSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationSelector, default is Undefined, optional
        user migration selector
    verifyAuthChallengeResponse : str, default is Undefined, optional
        Verifies the authentication challenge response.
    verifyAuthChallengeResponseRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseRef, default is Undefined, optional
        verify auth challenge response ref
    verifyAuthChallengeResponseSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseSelector, default is Undefined, optional
        verify auth challenge response selector
    """


    createAuthChallenge?: str

    createAuthChallengeRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeRef

    createAuthChallengeSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeSelector

    customEmailSender?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSender

    customMessage?: str

    customMessageRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageRef

    customMessageSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageSelector

    customSmsSender?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSender

    defineAuthChallenge?: str

    defineAuthChallengeRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeRef

    defineAuthChallengeSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeSelector

    kmsKeyId?: str

    kmsKeyIdRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDRef

    kmsKeyIdSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDSelector

    postAuthentication?: str

    postAuthenticationRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationRef

    postAuthenticationSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationSelector

    postConfirmation?: str

    postConfirmationRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationRef

    postConfirmationSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationSelector

    preAuthentication?: str

    preAuthenticationRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationRef

    preAuthenticationSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationSelector

    preSignUp?: str

    preSignUpRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpRef

    preSignUpSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpSelector

    preTokenGeneration?: str

    preTokenGenerationConfig?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationConfig

    preTokenGenerationRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationRef

    preTokenGenerationSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationSelector

    userMigration?: str

    userMigrationRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationRef

    userMigrationSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationSelector

    verifyAuthChallengeResponse?: str

    verifyAuthChallengeResponseRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseRef

    verifyAuthChallengeResponseSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseSelector


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeRef:
    r"""
    Reference to a Function in lambda to populate createAuthChallenge.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeSelector:
    r"""
    Selector for a Function in lambda to populate createAuthChallenge.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCreateAuthChallengeSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSender:
    r"""
    A custom email sender AWS Lambda trigger. See custom_email_sender Below.

    Attributes
    ----------
    lambdaArn : str, default is Undefined, optional
        The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.
    lambdaArnRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnRef, default is Undefined, optional
        lambda arn ref
    lambdaArnSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnSelector, default is Undefined, optional
        lambda arn selector
    lambdaVersion : str, default is Undefined, optional
        The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom email Lambda function. The only supported value is V1_0.
    """


    lambdaArn?: str

    lambdaArnRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnRef

    lambdaArnSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnSelector

    lambdaVersion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnRef:
    r"""
    Reference to a Function in lambda to populate lambdaArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnSelector:
    r"""
    Selector for a Function in lambda to populate lambdaArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomEmailSenderLambdaArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageRef:
    r"""
    Reference to a Function in lambda to populate customMessage.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageSelector:
    r"""
    Selector for a Function in lambda to populate customMessage.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomMessageSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSender:
    r"""
    A custom SMS sender AWS Lambda trigger. See custom_sms_sender Below.

    Attributes
    ----------
    lambdaArn : str, default is Undefined, optional
        The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
    lambdaArnRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnRef, default is Undefined, optional
        lambda arn ref
    lambdaArnSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnSelector, default is Undefined, optional
        lambda arn selector
    lambdaVersion : str, default is Undefined, optional
        The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is V1_0.
    """


    lambdaArn?: str

    lambdaArnRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnRef

    lambdaArnSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnSelector

    lambdaVersion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnRef:
    r"""
    Reference to a Function in lambda to populate lambdaArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnSelector:
    r"""
    Selector for a Function in lambda to populate lambdaArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigCustomSmsSenderLambdaArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeRef:
    r"""
    Reference to a Function in lambda to populate defineAuthChallenge.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeSelector:
    r"""
    Selector for a Function in lambda to populate defineAuthChallenge.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigDefineAuthChallengeSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDRef:
    r"""
    Reference to a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDSelector:
    r"""
    Selector for a Key in kms to populate kmsKeyId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigKmsKeyIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationRef:
    r"""
    Reference to a Function in lambda to populate postAuthentication.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationSelector:
    r"""
    Selector for a Function in lambda to populate postAuthentication.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostAuthenticationSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationRef:
    r"""
    Reference to a Function in lambda to populate postConfirmation.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationSelector:
    r"""
    Selector for a Function in lambda to populate postConfirmation.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPostConfirmationSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationRef:
    r"""
    Reference to a Function in lambda to populate preAuthentication.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationSelector:
    r"""
    Selector for a Function in lambda to populate preAuthentication.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreAuthenticationSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpRef:
    r"""
    Reference to a Function in lambda to populate preSignUp.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpSelector:
    r"""
    Selector for a Function in lambda to populate preSignUp.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreSignUpSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationConfig:
    r"""
    Allow to customize access tokens. See pre_token_configuration_type

    Attributes
    ----------
    lambdaArn : str, default is Undefined, optional
        The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
    lambdaVersion : str, default is Undefined, optional
        The Lambda version represents the signature of the "version" attribute in the "event" information Amazon Cognito passes to your pre Token Generation Lambda function. The supported values are V1_0, V2_0.
    """


    lambdaArn?: str

    lambdaVersion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationRef:
    r"""
    Reference to a Function in lambda to populate preTokenGeneration.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationSelector:
    r"""
    Selector for a Function in lambda to populate preTokenGeneration.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigPreTokenGenerationSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationRef:
    r"""
    Reference to a Function in lambda to populate userMigration.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationSelector:
    r"""
    Selector for a Function in lambda to populate userMigration.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigUserMigrationSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseRef:
    r"""
    Reference to a Function in lambda to populate verifyAuthChallengeResponse.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseSelector:
    r"""
    Selector for a Function in lambda to populate verifyAuthChallengeResponse.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderLambdaConfigVerifyAuthChallengeResponseSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderPasswordPolicy:
    r"""
    Configuration block for information about the user pool password policy. Detailed below.

    Attributes
    ----------
    minimumLength : float, default is Undefined, optional
        Minimum length of the password policy that you have set.
    passwordHistorySize : float, default is Undefined, optional
        Number of previous passwords that you want Amazon Cognito to restrict each user from reusing. Users can't set a password that matches any of number of previous passwords specified by this argument. A value of 0 means that password history is not enforced. Valid values are between 0 and 24.
    requireLowercase : bool, default is Undefined, optional
        Whether you have required users to use at least one lowercase letter in their password.
    requireNumbers : bool, default is Undefined, optional
        Whether you have required users to use at least one number in their password.
    requireSymbols : bool, default is Undefined, optional
        Whether you have required users to use at least one symbol in their password.
    requireUppercase : bool, default is Undefined, optional
        Whether you have required users to use at least one uppercase letter in their password.
    temporaryPasswordValidityDays : float, default is Undefined, optional
        In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
    """


    minimumLength?: float

    passwordHistorySize?: float

    requireLowercase?: bool

    requireNumbers?: bool

    requireSymbols?: bool

    requireUppercase?: bool

    temporaryPasswordValidityDays?: float


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSchemaItems0:
    r"""
    cognitoidp aws upbound io v1beta2 user pool spec init provider schema items0

    Attributes
    ----------
    attributeDataType : str, default is Undefined, optional
        Attribute data type. Must be one of Boolean, Number, String, DateTime.
    developerOnlyAttribute : bool, default is Undefined, optional
        Whether the attribute type is developer only.
    mutable : bool, default is Undefined, optional
        Whether the attribute can be changed once it has been created.
    name : str, default is Undefined, optional
        Name of the user pool.
    numberAttributeConstraints : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSchemaItems0NumberAttributeConstraints, default is Undefined, optional
        number attribute constraints
    required : bool, default is Undefined, optional
        Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
    stringAttributeConstraints : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSchemaItems0StringAttributeConstraints, default is Undefined, optional
        string attribute constraints
    """


    attributeDataType?: str

    developerOnlyAttribute?: bool

    mutable?: bool

    name?: str

    numberAttributeConstraints?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSchemaItems0NumberAttributeConstraints

    required?: bool

    stringAttributeConstraints?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSchemaItems0StringAttributeConstraints


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSchemaItems0NumberAttributeConstraints:
    r"""
    Configuration block for the constraints for an attribute of the number type. Detailed below.

    Attributes
    ----------
    maxValue : str, default is Undefined, optional
        Maximum value of an attribute that is of the number data type.
    minValue : str, default is Undefined, optional
        Minimum value of an attribute that is of the number data type.
    """


    maxValue?: str

    minValue?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSchemaItems0StringAttributeConstraints:
    r"""
    Constraints for an attribute of the string type. Detailed below.

    Attributes
    ----------
    maxLength : str, default is Undefined, optional
        Maximum length of an attribute value of the string type.
    minLength : str, default is Undefined, optional
        Minimum length of an attribute value of the string type.
    """


    maxLength?: str

    minLength?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfiguration:
    r"""
    Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the taint command.

    Attributes
    ----------
    externalId : str, default is Undefined, optional
        External ID used in IAM role trust relationships. For more information about using external IDs, see How to Use an External ID When Granting Access to Your AWS Resources to a Third Party.
    snsCallerArn : str, default is Undefined, optional
        ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
    snsCallerArnRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnRef, default is Undefined, optional
        sns caller arn ref
    snsCallerArnSelector : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnSelector, default is Undefined, optional
        sns caller arn selector
    snsRegion : str, default is Undefined, optional
        The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see SMS message settings for Amazon Cognito user pools.
    """


    externalId?: str

    snsCallerArn?: str

    snsCallerArnRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnRef

    snsCallerArnSelector?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnSelector

    snsRegion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnRef:
    r"""
    Reference to a Role in iam to populate snsCallerArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnSelector:
    r"""
    Selector for a Role in iam to populate snsCallerArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSmsConfigurationSnsCallerArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderSoftwareTokenMfaConfiguration:
    r"""
    Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA When sms_configuration is not present, the mfa_configuration argument must be set to OFF and the software_token_mfa_configuration configuration block must be fully removed.
    """


    enabled?: bool


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderUserAttributeUpdateSettings:
    r"""
    Configuration block for user attribute update settings. Detailed below.

    Attributes
    ----------
    attributesRequireVerificationBeforeUpdate : [str], default is Undefined, optional
        A list of attributes requiring verification before update. If set, the provided value(s) must also be set in auto_verified_attributes. Valid values: email, phone_number.
    """


    attributesRequireVerificationBeforeUpdate?: [str]


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderUserPoolAddOns:
    r"""
    Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.

    Attributes
    ----------
    advancedSecurityMode : str, default is Undefined, optional
        Mode for advanced security, must be one of OFF, AUDIT or ENFORCED.
    """


    advancedSecurityMode?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderUsernameConfiguration:
    r"""
    Configuration block for username configuration. Detailed below.

    Attributes
    ----------
    caseSensitive : bool, default is Undefined, optional
        Whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
    """


    caseSensitive?: bool


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecInitProviderVerificationMessageTemplate:
    r"""
    Configuration block for verification message templates. Detailed below.

    Attributes
    ----------
    defaultEmailOption : str, default is Undefined, optional
        Default email option. Must be either CONFIRM_WITH_CODE or CONFIRM_WITH_LINK. Defaults to CONFIRM_WITH_CODE.
    emailMessage : str, default is Undefined, optional
        Email message template. Must contain the {####} placeholder. Conflicts with email_verification_message argument.
    emailMessageByLink : str, default is Undefined, optional
        Email message template for sending a confirmation link to the user, it must contain the {##Click Here##} placeholder.
    emailSubject : str, default is Undefined, optional
        Subject line for the email message template. Conflicts with email_verification_subject argument.
    emailSubjectByLink : str, default is Undefined, optional
        Subject line for the email message template for sending a confirmation link to the user.
    smsMessage : str, default is Undefined, optional
        SMS message template. Must contain the {####} placeholder. Conflicts with sms_verification_message argument.
    """


    defaultEmailOption?: str

    emailMessage?: str

    emailMessageByLink?: str

    emailSubject?: str

    emailSubjectByLink?: str

    smsMessage?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecProviderConfigRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsToConfigRef

    metadata?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsToMetadata

    name: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsToConfigRefPolicy


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatus:
    r"""
    UserPoolStatus defines the observed state of UserPool.

    Attributes
    ----------
    atProvider : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [CognitoidpAwsUpboundIoV1beta2UserPoolStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProvider

    conditions?: [CognitoidpAwsUpboundIoV1beta2UserPoolStatusConditionsItems0]

    observedGeneration?: int


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProvider:
    r"""
    cognitoidp aws upbound io v1beta2 user pool status at provider

    Attributes
    ----------
    accountRecoverySetting : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAccountRecoverySetting, default is Undefined, optional
        account recovery setting
    adminCreateUserConfig : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAdminCreateUserConfig, default is Undefined, optional
        admin create user config
    aliasAttributes : [str], default is Undefined, optional
        Attributes supported as an alias for this user pool. Valid values: phone_number, email, or preferred_username. Conflicts with username_attributes.
    arn : str, default is Undefined, optional
        ARN of the user pool.
    autoVerifiedAttributes : [str], default is Undefined, optional
        Attributes to be auto-verified. Valid values: email, phone_number.
    creationDate : str, default is Undefined, optional
        Date the user pool was created.
    customDomain : str, default is Undefined, optional
        A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. For example: auth.example.com.
    deletionProtection : str, default is Undefined, optional
        When active, DeletionProtection prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature. Valid values are ACTIVE and INACTIVE, Default value is INACTIVE.
    deviceConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderDeviceConfiguration, default is Undefined, optional
        device configuration
    domain : str, default is Undefined, optional
        Holds the domain prefix if the user pool has a domain associated with it.
    emailConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderEmailConfiguration, default is Undefined, optional
        email configuration
    emailVerificationMessage : str, default is Undefined, optional
        String representing the email verification message. Conflicts with verification_message_template configuration block email_message argument.
    emailVerificationSubject : str, default is Undefined, optional
        String representing the email verification subject. Conflicts with verification_message_template configuration block email_subject argument.
    endpoint : str, default is Undefined, optional
        Endpoint name of the user pool. Example format: cognito-idp.REGION.amazonaws.com/xxxx_yyyyy
    estimatedNumberOfUsers : float, default is Undefined, optional
        A number estimating the size of the user pool.
    id : str, default is Undefined, optional
        ID of the user pool.
    lambdaConfig : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfig, default is Undefined, optional
        lambda config
    lastModifiedDate : str, default is Undefined, optional
        Date the user pool was last modified.
    mfaConfiguration : str, default is Undefined, optional
        Multi-Factor Authentication (MFA) configuration for the User Pool. Defaults of OFF. Valid values are OFF (MFA Tokens are not required), ON (MFA is required for all users to sign in; requires at least one of sms_configuration or software_token_mfa_configuration to be configured), or OPTIONAL (MFA Will be required only for individual users who have MFA Enabled; requires at least one of sms_configuration or software_token_mfa_configuration to be configured).
    name : str, default is Undefined, optional
        Name of the user pool.
    passwordPolicy : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderPasswordPolicy, default is Undefined, optional
        password policy
    $schema : [CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSchemaItems0], default is Undefined, optional
        Configuration block for the schema attributes of a user pool. Detailed below. Schema attributes from the standard attribute set only need to be specified if they are different from the default configuration. Attributes can be added, but not modified or removed. Maximum of 50 attributes.
    smsAuthenticationMessage : str, default is Undefined, optional
        String representing the SMS authentication message. The Message must contain the {####} placeholder, which will be replaced with the code.
    smsConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSmsConfiguration, default is Undefined, optional
        sms configuration
    smsVerificationMessage : str, default is Undefined, optional
        String representing the SMS verification message. Conflicts with verification_message_template configuration block sms_message argument.
    softwareTokenMfaConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSoftwareTokenMfaConfiguration, default is Undefined, optional
        software token mfa configuration
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    userAttributeUpdateSettings : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderUserAttributeUpdateSettings, default is Undefined, optional
        user attribute update settings
    userPoolAddOns : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderUserPoolAddOns, default is Undefined, optional
        user pool add ons
    usernameAttributes : [str], default is Undefined, optional
        Whether email addresses or phone numbers can be specified as usernames when a user signs up. Conflicts with alias_attributes.
    usernameConfiguration : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderUsernameConfiguration, default is Undefined, optional
        username configuration
    verificationMessageTemplate : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderVerificationMessageTemplate, default is Undefined, optional
        verification message template
    """


    accountRecoverySetting?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAccountRecoverySetting

    adminCreateUserConfig?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAdminCreateUserConfig

    aliasAttributes?: [str]

    arn?: str

    autoVerifiedAttributes?: [str]

    creationDate?: str

    customDomain?: str

    deletionProtection?: str

    deviceConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderDeviceConfiguration

    domain?: str

    emailConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderEmailConfiguration

    emailVerificationMessage?: str

    emailVerificationSubject?: str

    endpoint?: str

    estimatedNumberOfUsers?: float

    id?: str

    lambdaConfig?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfig

    lastModifiedDate?: str

    mfaConfiguration?: str

    name?: str

    passwordPolicy?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderPasswordPolicy

    $schema?: [CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSchemaItems0]

    smsAuthenticationMessage?: str

    smsConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSmsConfiguration

    smsVerificationMessage?: str

    softwareTokenMfaConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSoftwareTokenMfaConfiguration

    tags?: {str:str}

    tagsAll?: {str:str}

    userAttributeUpdateSettings?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderUserAttributeUpdateSettings

    userPoolAddOns?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderUserPoolAddOns

    usernameAttributes?: [str]

    usernameConfiguration?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderUsernameConfiguration

    verificationMessageTemplate?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderVerificationMessageTemplate


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAccountRecoverySetting:
    r"""
    Configuration block to define which verified available method a user can use to recover their forgotten password. Detailed below.

    Attributes
    ----------
    recoveryMechanism : [CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAccountRecoverySettingRecoveryMechanismItems0], default is Undefined, optional
        List of Account Recovery Options of the following structure:
    """


    recoveryMechanism?: [CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAccountRecoverySettingRecoveryMechanismItems0]


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAccountRecoverySettingRecoveryMechanismItems0:
    r"""
    cognitoidp aws upbound io v1beta2 user pool status at provider account recovery setting recovery mechanism items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the user pool.
    priority : float, default is Undefined, optional
        Positive integer specifying priority of a method with 1 being the highest priority.
    """


    name?: str

    priority?: float


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAdminCreateUserConfig:
    r"""
    Configuration block for creating a new user profile. Detailed below.

    Attributes
    ----------
    allowAdminCreateUserOnly : bool, default is Undefined, optional
        Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
    inviteMessageTemplate : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAdminCreateUserConfigInviteMessageTemplate, default is Undefined, optional
        invite message template
    """


    allowAdminCreateUserOnly?: bool

    inviteMessageTemplate?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAdminCreateUserConfigInviteMessageTemplate


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderAdminCreateUserConfigInviteMessageTemplate:
    r"""
    Invite message template structure. Detailed below.

    Attributes
    ----------
    emailMessage : str, default is Undefined, optional
        Message template for email messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.
    emailSubject : str, default is Undefined, optional
        Subject line for email messages.
    smsMessage : str, default is Undefined, optional
        Message template for SMS messages. Must contain {username} and {####} placeholders, for username and temporary password, respectively.
    """


    emailMessage?: str

    emailSubject?: str

    smsMessage?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderDeviceConfiguration:
    r"""
    Configuration block for the user pool's device tracking. Detailed below.

    Attributes
    ----------
    challengeRequiredOnNewDevice : bool, default is Undefined, optional
        Whether a challenge is required on a new device. Only applicable to a new device.
    deviceOnlyRememberedOnUserPrompt : bool, default is Undefined, optional
        Whether a device is only remembered on user prompt. false equates to "Always" remember, true is "User Opt In," and not using a device_configuration block is "No."
    """


    challengeRequiredOnNewDevice?: bool

    deviceOnlyRememberedOnUserPrompt?: bool


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderEmailConfiguration:
    r"""
    Configuration block for configuring email. Detailed below.

    Attributes
    ----------
    configurationSet : str, default is Undefined, optional
        Email configuration set name from SES.
    emailSendingAccount : str, default is Undefined, optional
        Email delivery method to use. COGNITO_DEFAULT for the default email functionality built into Cognito or DEVELOPER to use your Amazon SES configuration. Required to be DEVELOPER if from_email_address is set.
    fromEmailAddress : str, default is Undefined, optional
        Sender’s email address or sender’s display name with their email address (e.g., john@example.com, John Smith <john@example.com> or \"John Smith Ph.D.\" <john@example.com>). Escaped double quotes are required around display names that contain certain characters as specified in RFC 5322.
    replyToEmailAddress : str, default is Undefined, optional
        REPLY-TO email address.
    sourceArn : str, default is Undefined, optional
        ARN of the SES verified email identity to use. Required if email_sending_account is set to DEVELOPER.
    """


    configurationSet?: str

    emailSendingAccount?: str

    fromEmailAddress?: str

    replyToEmailAddress?: str

    sourceArn?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfig:
    r"""
    Configuration block for the AWS Lambda triggers associated with the user pool. Detailed below.

    Attributes
    ----------
    createAuthChallenge : str, default is Undefined, optional
        ARN of the lambda creating an authentication challenge.
    customEmailSender : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfigCustomEmailSender, default is Undefined, optional
        custom email sender
    customMessage : str, default is Undefined, optional
        Custom Message AWS Lambda trigger.
    customSmsSender : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfigCustomSmsSender, default is Undefined, optional
        custom sms sender
    defineAuthChallenge : str, default is Undefined, optional
        Defines the authentication challenge.
    kmsKeyId : str, default is Undefined, optional
        The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.
    postAuthentication : str, default is Undefined, optional
        Post-authentication AWS Lambda trigger.
    postConfirmation : str, default is Undefined, optional
        Post-confirmation AWS Lambda trigger.
    preAuthentication : str, default is Undefined, optional
        Pre-authentication AWS Lambda trigger.
    preSignUp : str, default is Undefined, optional
        Pre-registration AWS Lambda trigger.
    preTokenGeneration : str, default is Undefined, optional
        Allow to customize identity token claims before token generation. Set this parameter for legacy purposes; for new instances of pre token generation triggers, set the lambda_arn of pre_token_generation_config.
    preTokenGenerationConfig : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfigPreTokenGenerationConfig, default is Undefined, optional
        pre token generation config
    userMigration : str, default is Undefined, optional
        User migration Lambda config type.
    verifyAuthChallengeResponse : str, default is Undefined, optional
        Verifies the authentication challenge response.
    """


    createAuthChallenge?: str

    customEmailSender?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfigCustomEmailSender

    customMessage?: str

    customSmsSender?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfigCustomSmsSender

    defineAuthChallenge?: str

    kmsKeyId?: str

    postAuthentication?: str

    postConfirmation?: str

    preAuthentication?: str

    preSignUp?: str

    preTokenGeneration?: str

    preTokenGenerationConfig?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfigPreTokenGenerationConfig

    userMigration?: str

    verifyAuthChallengeResponse?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfigCustomEmailSender:
    r"""
    A custom email sender AWS Lambda trigger. See custom_email_sender Below.

    Attributes
    ----------
    lambdaArn : str, default is Undefined, optional
        The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send email notifications to users.
    lambdaVersion : str, default is Undefined, optional
        The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom email Lambda function. The only supported value is V1_0.
    """


    lambdaArn?: str

    lambdaVersion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfigCustomSmsSender:
    r"""
    A custom SMS sender AWS Lambda trigger. See custom_sms_sender Below.

    Attributes
    ----------
    lambdaArn : str, default is Undefined, optional
        The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
    lambdaVersion : str, default is Undefined, optional
        The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom SMS Lambda function. The only supported value is V1_0.
    """


    lambdaArn?: str

    lambdaVersion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderLambdaConfigPreTokenGenerationConfig:
    r"""
    Allow to customize access tokens. See pre_token_configuration_type

    Attributes
    ----------
    lambdaArn : str, default is Undefined, optional
        The Lambda Amazon Resource Name of the Lambda function that Amazon Cognito triggers to send SMS notifications to users.
    lambdaVersion : str, default is Undefined, optional
        The Lambda version represents the signature of the "version" attribute in the "event" information Amazon Cognito passes to your pre Token Generation Lambda function. The supported values are V1_0, V2_0.
    """


    lambdaArn?: str

    lambdaVersion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderPasswordPolicy:
    r"""
    Configuration block for information about the user pool password policy. Detailed below.

    Attributes
    ----------
    minimumLength : float, default is Undefined, optional
        Minimum length of the password policy that you have set.
    passwordHistorySize : float, default is Undefined, optional
        Number of previous passwords that you want Amazon Cognito to restrict each user from reusing. Users can't set a password that matches any of number of previous passwords specified by this argument. A value of 0 means that password history is not enforced. Valid values are between 0 and 24.
    requireLowercase : bool, default is Undefined, optional
        Whether you have required users to use at least one lowercase letter in their password.
    requireNumbers : bool, default is Undefined, optional
        Whether you have required users to use at least one number in their password.
    requireSymbols : bool, default is Undefined, optional
        Whether you have required users to use at least one symbol in their password.
    requireUppercase : bool, default is Undefined, optional
        Whether you have required users to use at least one uppercase letter in their password.
    temporaryPasswordValidityDays : float, default is Undefined, optional
        In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
    """


    minimumLength?: float

    passwordHistorySize?: float

    requireLowercase?: bool

    requireNumbers?: bool

    requireSymbols?: bool

    requireUppercase?: bool

    temporaryPasswordValidityDays?: float


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSchemaItems0:
    r"""
    cognitoidp aws upbound io v1beta2 user pool status at provider schema items0

    Attributes
    ----------
    attributeDataType : str, default is Undefined, optional
        Attribute data type. Must be one of Boolean, Number, String, DateTime.
    developerOnlyAttribute : bool, default is Undefined, optional
        Whether the attribute type is developer only.
    mutable : bool, default is Undefined, optional
        Whether the attribute can be changed once it has been created.
    name : str, default is Undefined, optional
        Name of the user pool.
    numberAttributeConstraints : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSchemaItems0NumberAttributeConstraints, default is Undefined, optional
        number attribute constraints
    required : bool, default is Undefined, optional
        Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
    stringAttributeConstraints : CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSchemaItems0StringAttributeConstraints, default is Undefined, optional
        string attribute constraints
    """


    attributeDataType?: str

    developerOnlyAttribute?: bool

    mutable?: bool

    name?: str

    numberAttributeConstraints?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSchemaItems0NumberAttributeConstraints

    required?: bool

    stringAttributeConstraints?: CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSchemaItems0StringAttributeConstraints


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSchemaItems0NumberAttributeConstraints:
    r"""
    Configuration block for the constraints for an attribute of the number type. Detailed below.

    Attributes
    ----------
    maxValue : str, default is Undefined, optional
        Maximum value of an attribute that is of the number data type.
    minValue : str, default is Undefined, optional
        Minimum value of an attribute that is of the number data type.
    """


    maxValue?: str

    minValue?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSchemaItems0StringAttributeConstraints:
    r"""
    Constraints for an attribute of the string type. Detailed below.

    Attributes
    ----------
    maxLength : str, default is Undefined, optional
        Maximum length of an attribute value of the string type.
    minLength : str, default is Undefined, optional
        Minimum length of an attribute value of the string type.
    """


    maxLength?: str

    minLength?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSmsConfiguration:
    r"""
    Configuration block for Short Message Service (SMS) settings. Detailed below. These settings apply to SMS user verification and SMS Multi-Factor Authentication (MFA). Due to Cognito API restrictions, the SMS configuration cannot be removed without recreating the Cognito User Pool. For user data safety, this resource will ignore the removal of this configuration by disabling drift detection. To force resource recreation after this configuration has been applied, see the taint command.

    Attributes
    ----------
    externalId : str, default is Undefined, optional
        External ID used in IAM role trust relationships. For more information about using external IDs, see How to Use an External ID When Granting Access to Your AWS Resources to a Third Party.
    snsCallerArn : str, default is Undefined, optional
        ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
    snsRegion : str, default is Undefined, optional
        The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported Legacy Amazon SNS alternate Region. Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see SMS message settings for Amazon Cognito user pools.
    """


    externalId?: str

    snsCallerArn?: str

    snsRegion?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderSoftwareTokenMfaConfiguration:
    r"""
    Configuration block for software token Mult-Factor Authentication (MFA) settings. Detailed below.

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA When sms_configuration is not present, the mfa_configuration argument must be set to OFF and the software_token_mfa_configuration configuration block must be fully removed.
    """


    enabled?: bool


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderUserAttributeUpdateSettings:
    r"""
    Configuration block for user attribute update settings. Detailed below.

    Attributes
    ----------
    attributesRequireVerificationBeforeUpdate : [str], default is Undefined, optional
        A list of attributes requiring verification before update. If set, the provided value(s) must also be set in auto_verified_attributes. Valid values: email, phone_number.
    """


    attributesRequireVerificationBeforeUpdate?: [str]


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderUserPoolAddOns:
    r"""
    Configuration block for user pool add-ons to enable user pool advanced security mode features. Detailed below.

    Attributes
    ----------
    advancedSecurityMode : str, default is Undefined, optional
        Mode for advanced security, must be one of OFF, AUDIT or ENFORCED.
    """


    advancedSecurityMode?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderUsernameConfiguration:
    r"""
    Configuration block for username configuration. Detailed below.

    Attributes
    ----------
    caseSensitive : bool, default is Undefined, optional
        Whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
    """


    caseSensitive?: bool


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusAtProviderVerificationMessageTemplate:
    r"""
    Configuration block for verification message templates. Detailed below.

    Attributes
    ----------
    defaultEmailOption : str, default is Undefined, optional
        Default email option. Must be either CONFIRM_WITH_CODE or CONFIRM_WITH_LINK. Defaults to CONFIRM_WITH_CODE.
    emailMessage : str, default is Undefined, optional
        Email message template. Must contain the {####} placeholder. Conflicts with email_verification_message argument.
    emailMessageByLink : str, default is Undefined, optional
        Email message template for sending a confirmation link to the user, it must contain the {##Click Here##} placeholder.
    emailSubject : str, default is Undefined, optional
        Subject line for the email message template. Conflicts with email_verification_subject argument.
    emailSubjectByLink : str, default is Undefined, optional
        Subject line for the email message template for sending a confirmation link to the user.
    smsMessage : str, default is Undefined, optional
        SMS message template. Must contain the {####} placeholder. Conflicts with sms_verification_message argument.
    """


    defaultEmailOption?: str

    emailMessage?: str

    emailMessageByLink?: str

    emailSubject?: str

    emailSubjectByLink?: str

    smsMessage?: str


schema CognitoidpAwsUpboundIoV1beta2UserPoolStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


