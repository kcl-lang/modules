"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Grant:
    r"""
    Grant is the Schema for the Grants API. Provides a resource-based access control mechanism for KMS Customer Master Keys.

    Attributes
    ----------
    apiVersion : str, default is "kms.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Grant", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : KmsAwsUpboundIoV1beta1GrantSpec, default is Undefined, required
        spec
    status : KmsAwsUpboundIoV1beta1GrantStatus, default is Undefined, optional
        status
    """


    apiVersion: "kms.aws.upbound.io/v1beta1" = "kms.aws.upbound.io/v1beta1"

    kind: "Grant" = "Grant"

    metadata?: v1.ObjectMeta

    spec: KmsAwsUpboundIoV1beta1GrantSpec

    status?: KmsAwsUpboundIoV1beta1GrantStatus


schema KmsAwsUpboundIoV1beta1GrantSpec:
    r"""
    GrantSpec defines the desired state of Grant

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : KmsAwsUpboundIoV1beta1GrantSpecForProvider, default is Undefined, required
        for provider
    initProvider : KmsAwsUpboundIoV1beta1GrantSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : KmsAwsUpboundIoV1beta1GrantSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : KmsAwsUpboundIoV1beta1GrantSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: KmsAwsUpboundIoV1beta1GrantSpecForProvider

    initProvider?: KmsAwsUpboundIoV1beta1GrantSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: KmsAwsUpboundIoV1beta1GrantSpecProviderConfigRef

    publishConnectionDetailsTo?: KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: KmsAwsUpboundIoV1beta1GrantSpecWriteConnectionSecretToRef


schema KmsAwsUpboundIoV1beta1GrantSpecForProvider:
    r"""
    kms aws upbound io v1beta1 grant spec for provider

    Attributes
    ----------
    constraints : [KmsAwsUpboundIoV1beta1GrantSpecForProviderConstraintsItems0], default is Undefined, optional
        A structure that you can use to allow certain operations in the grant only when the desired encryption context is present. For more information about encryption context, see Encryption Context.
    grantCreationTokens : [str], default is Undefined, optional
        A list of grant tokens to be used when creating the grant. See Grant Tokens for more information about grant tokens.
    granteePrincipal : str, default is Undefined, optional
        The principal that is given permission to perform the operations that the grant permits in ARN format.
    granteePrincipalRef : KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalRef, default is Undefined, optional
        grantee principal ref
    granteePrincipalSelector : KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalSelector, default is Undefined, optional
        grantee principal selector
    keyId : str, default is Undefined, optional
        The unique identifier for the customer master key (CMK) that the grant applies to. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN.
    keyIdRef : KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDRef, default is Undefined, optional
        key Id ref
    keyIdSelector : KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDSelector, default is Undefined, optional
        key Id selector
    name : str, default is Undefined, optional
        A friendly name for identifying the grant.
    operations : [str], default is Undefined, optional
        A list of operations that the grant permits. The permitted values are: Decrypt, Encrypt, GenerateDataKey, GenerateDataKeyWithoutPlaintext, ReEncryptFrom, ReEncryptTo, Sign, Verify, GetPublicKey, CreateGrant, RetireGrant, DescribeKey, GenerateDataKeyPair, or GenerateDataKeyPairWithoutPlaintext.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    retireOnDelete : bool, default is Undefined, optional
        (Defaults to false, Forces new resources) If set to false (the default) the grants will be revoked upon deletion, and if set to true the grants will try to be retired upon deletion. Note that retiring grants requires special permissions, hence why we default to revoking grants.
        See RetireGrant for more information.
    retiringPrincipal : str, default is Undefined, optional
        The principal that is given permission to retire the grant by using RetireGrant operation in ARN format.
    """


    constraints?: [KmsAwsUpboundIoV1beta1GrantSpecForProviderConstraintsItems0]

    grantCreationTokens?: [str]

    granteePrincipal?: str

    granteePrincipalRef?: KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalRef

    granteePrincipalSelector?: KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalSelector

    keyId?: str

    keyIdRef?: KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDRef

    keyIdSelector?: KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDSelector

    name?: str

    operations?: [str]

    region: str

    retireOnDelete?: bool

    retiringPrincipal?: str


schema KmsAwsUpboundIoV1beta1GrantSpecForProviderConstraintsItems0:
    r"""
    kms aws upbound io v1beta1 grant spec for provider constraints items0

    Attributes
    ----------
    encryptionContextEquals : {str:str}, default is Undefined, optional
        A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with encryption_context_subset.
    encryptionContextSubset : {str:str}, default is Undefined, optional
        A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with encryption_context_equals.
    """


    encryptionContextEquals?: {str:str}

    encryptionContextSubset?: {str:str}


schema KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalRef:
    r"""
    Reference to a Role in iam to populate granteePrincipal.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalRefPolicy


schema KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalSelector:
    r"""
    Selector for a Role in iam to populate granteePrincipal.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalSelectorPolicy


schema KmsAwsUpboundIoV1beta1GrantSpecForProviderGranteePrincipalSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDRef:
    r"""
    Reference to a Key in kms to populate keyId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDRefPolicy


schema KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDSelector:
    r"""
    Selector for a Key in kms to populate keyId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDSelectorPolicy


schema KmsAwsUpboundIoV1beta1GrantSpecForProviderKeyIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsAwsUpboundIoV1beta1GrantSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    constraints : [KmsAwsUpboundIoV1beta1GrantSpecInitProviderConstraintsItems0], default is Undefined, optional
        A structure that you can use to allow certain operations in the grant only when the desired encryption context is present. For more information about encryption context, see Encryption Context.
    grantCreationTokens : [str], default is Undefined, optional
        A list of grant tokens to be used when creating the grant. See Grant Tokens for more information about grant tokens.
    granteePrincipal : str, default is Undefined, optional
        The principal that is given permission to perform the operations that the grant permits in ARN format.
    granteePrincipalRef : KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalRef, default is Undefined, optional
        grantee principal ref
    granteePrincipalSelector : KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalSelector, default is Undefined, optional
        grantee principal selector
    keyId : str, default is Undefined, optional
        The unique identifier for the customer master key (CMK) that the grant applies to. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN.
    keyIdRef : KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDRef, default is Undefined, optional
        key Id ref
    keyIdSelector : KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDSelector, default is Undefined, optional
        key Id selector
    name : str, default is Undefined, optional
        A friendly name for identifying the grant.
    operations : [str], default is Undefined, optional
        A list of operations that the grant permits. The permitted values are: Decrypt, Encrypt, GenerateDataKey, GenerateDataKeyWithoutPlaintext, ReEncryptFrom, ReEncryptTo, Sign, Verify, GetPublicKey, CreateGrant, RetireGrant, DescribeKey, GenerateDataKeyPair, or GenerateDataKeyPairWithoutPlaintext.
    retireOnDelete : bool, default is Undefined, optional
        (Defaults to false, Forces new resources) If set to false (the default) the grants will be revoked upon deletion, and if set to true the grants will try to be retired upon deletion. Note that retiring grants requires special permissions, hence why we default to revoking grants.
        See RetireGrant for more information.
    retiringPrincipal : str, default is Undefined, optional
        The principal that is given permission to retire the grant by using RetireGrant operation in ARN format.
    """


    constraints?: [KmsAwsUpboundIoV1beta1GrantSpecInitProviderConstraintsItems0]

    grantCreationTokens?: [str]

    granteePrincipal?: str

    granteePrincipalRef?: KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalRef

    granteePrincipalSelector?: KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalSelector

    keyId?: str

    keyIdRef?: KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDRef

    keyIdSelector?: KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDSelector

    name?: str

    operations?: [str]

    retireOnDelete?: bool

    retiringPrincipal?: str


schema KmsAwsUpboundIoV1beta1GrantSpecInitProviderConstraintsItems0:
    r"""
    kms aws upbound io v1beta1 grant spec init provider constraints items0

    Attributes
    ----------
    encryptionContextEquals : {str:str}, default is Undefined, optional
        A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with encryption_context_subset.
    encryptionContextSubset : {str:str}, default is Undefined, optional
        A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with encryption_context_equals.
    """


    encryptionContextEquals?: {str:str}

    encryptionContextSubset?: {str:str}


schema KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalRef:
    r"""
    Reference to a Role in iam to populate granteePrincipal.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalRefPolicy


schema KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalSelector:
    r"""
    Selector for a Role in iam to populate granteePrincipal.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalSelectorPolicy


schema KmsAwsUpboundIoV1beta1GrantSpecInitProviderGranteePrincipalSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDRef:
    r"""
    Reference to a Key in kms to populate keyId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDRefPolicy


schema KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDSelector:
    r"""
    Selector for a Key in kms to populate keyId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDSelectorPolicy


schema KmsAwsUpboundIoV1beta1GrantSpecInitProviderKeyIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsAwsUpboundIoV1beta1GrantSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : KmsAwsUpboundIoV1beta1GrantSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: KmsAwsUpboundIoV1beta1GrantSpecProviderConfigRefPolicy


schema KmsAwsUpboundIoV1beta1GrantSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsToConfigRef

    metadata?: KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsToMetadata

    name: str


schema KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsToConfigRefPolicy


schema KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsAwsUpboundIoV1beta1GrantSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema KmsAwsUpboundIoV1beta1GrantSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema KmsAwsUpboundIoV1beta1GrantStatus:
    r"""
    GrantStatus defines the observed state of Grant.

    Attributes
    ----------
    atProvider : KmsAwsUpboundIoV1beta1GrantStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [KmsAwsUpboundIoV1beta1GrantStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: KmsAwsUpboundIoV1beta1GrantStatusAtProvider

    conditions?: [KmsAwsUpboundIoV1beta1GrantStatusConditionsItems0]

    observedGeneration?: int


schema KmsAwsUpboundIoV1beta1GrantStatusAtProvider:
    r"""
    kms aws upbound io v1beta1 grant status at provider

    Attributes
    ----------
    constraints : [KmsAwsUpboundIoV1beta1GrantStatusAtProviderConstraintsItems0], default is Undefined, optional
        A structure that you can use to allow certain operations in the grant only when the desired encryption context is present. For more information about encryption context, see Encryption Context.
    grantCreationTokens : [str], default is Undefined, optional
        A list of grant tokens to be used when creating the grant. See Grant Tokens for more information about grant tokens.
    grantId : str, default is Undefined, optional
        The unique identifier for the grant.
    granteePrincipal : str, default is Undefined, optional
        The principal that is given permission to perform the operations that the grant permits in ARN format.
    id : str, default is Undefined, optional
        id
    keyId : str, default is Undefined, optional
        The unique identifier for the customer master key (CMK) that the grant applies to. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN.
    name : str, default is Undefined, optional
        A friendly name for identifying the grant.
    operations : [str], default is Undefined, optional
        A list of operations that the grant permits. The permitted values are: Decrypt, Encrypt, GenerateDataKey, GenerateDataKeyWithoutPlaintext, ReEncryptFrom, ReEncryptTo, Sign, Verify, GetPublicKey, CreateGrant, RetireGrant, DescribeKey, GenerateDataKeyPair, or GenerateDataKeyPairWithoutPlaintext.
    retireOnDelete : bool, default is Undefined, optional
        (Defaults to false, Forces new resources) If set to false (the default) the grants will be revoked upon deletion, and if set to true the grants will try to be retired upon deletion. Note that retiring grants requires special permissions, hence why we default to revoking grants.
        See RetireGrant for more information.
    retiringPrincipal : str, default is Undefined, optional
        The principal that is given permission to retire the grant by using RetireGrant operation in ARN format.
    """


    constraints?: [KmsAwsUpboundIoV1beta1GrantStatusAtProviderConstraintsItems0]

    grantCreationTokens?: [str]

    grantId?: str

    granteePrincipal?: str

    id?: str

    keyId?: str

    name?: str

    operations?: [str]

    retireOnDelete?: bool

    retiringPrincipal?: str


schema KmsAwsUpboundIoV1beta1GrantStatusAtProviderConstraintsItems0:
    r"""
    kms aws upbound io v1beta1 grant status at provider constraints items0

    Attributes
    ----------
    encryptionContextEquals : {str:str}, default is Undefined, optional
        A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with encryption_context_subset.
    encryptionContextSubset : {str:str}, default is Undefined, optional
        A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with encryption_context_equals.
    """


    encryptionContextEquals?: {str:str}

    encryptionContextSubset?: {str:str}


schema KmsAwsUpboundIoV1beta1GrantStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


