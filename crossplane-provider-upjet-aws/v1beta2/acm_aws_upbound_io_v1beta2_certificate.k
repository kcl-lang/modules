"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Certificate:
    r"""
    Certificate is the Schema for the Certificates API. Requests and manages a certificate from Amazon Certificate Manager (ACM).

    Attributes
    ----------
    apiVersion : str, default is "acm.aws.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Certificate", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AcmAwsUpboundIoV1beta2CertificateSpec, default is Undefined, required
        spec
    status : AcmAwsUpboundIoV1beta2CertificateStatus, default is Undefined, optional
        status
    """


    apiVersion: "acm.aws.upbound.io/v1beta2" = "acm.aws.upbound.io/v1beta2"

    kind: "Certificate" = "Certificate"

    metadata?: v1.ObjectMeta

    spec: AcmAwsUpboundIoV1beta2CertificateSpec

    status?: AcmAwsUpboundIoV1beta2CertificateStatus


schema AcmAwsUpboundIoV1beta2CertificateSpec:
    r"""
    CertificateSpec defines the desired state of Certificate

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : AcmAwsUpboundIoV1beta2CertificateSpecForProvider, default is Undefined, required
        for provider
    initProvider : AcmAwsUpboundIoV1beta2CertificateSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : AcmAwsUpboundIoV1beta2CertificateSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : AcmAwsUpboundIoV1beta2CertificateSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: AcmAwsUpboundIoV1beta2CertificateSpecForProvider

    initProvider?: AcmAwsUpboundIoV1beta2CertificateSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: AcmAwsUpboundIoV1beta2CertificateSpecProviderConfigRef

    publishConnectionDetailsTo?: AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: AcmAwsUpboundIoV1beta2CertificateSpecWriteConnectionSecretToRef


schema AcmAwsUpboundIoV1beta2CertificateSpecForProvider:
    r"""
    acm aws upbound io v1beta2 certificate spec for provider

    Attributes
    ----------
    certificateAuthorityArn : str, default is Undefined, optional
        ARN of an ACM PCA
    certificateAuthorityArnRef : AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnRef, default is Undefined, optional
        certificate authority arn ref
    certificateAuthorityArnSelector : AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnSelector, default is Undefined, optional
        certificate authority arn selector
    certificateBody : str, default is Undefined, optional
        Certificate's PEM-formatted public key
    certificateChain : str, default is Undefined, optional
        Certificate's PEM-formatted chain
    domainName : str, default is Undefined, optional
        Domain name for which the certificate should be issued
    earlyRenewalDuration : str, default is Undefined, optional
        Amount of time to start automatic renewal process before expiration.
        Has no effect if less than 60 days.
        Represented by either
        a subset of RFC 3339 duration supporting years, months, and days (e.g., P90D),
        or a string such as 2160h.
    keyAlgorithm : str, default is Undefined, optional
        Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See ACM Certificate characteristics for more details.
    options : AcmAwsUpboundIoV1beta2CertificateSpecForProviderOptions, default is Undefined, optional
        options
    privateKeySecretRef : AcmAwsUpboundIoV1beta2CertificateSpecForProviderPrivateKeySecretRef, default is Undefined, optional
        private key secret ref
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    subjectAlternativeNames : [str], default is Undefined, optional
        Set of domains that should be SANs in the issued certificate.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    validationMethod : str, default is Undefined, optional
        Which method to use for validation. DNS or EMAIL are valid.
    validationOption : [AcmAwsUpboundIoV1beta2CertificateSpecForProviderValidationOptionItems0], default is Undefined, optional
        Configuration block used to specify information about the initial validation of each domain name. Detailed below.
    """


    certificateAuthorityArn?: str

    certificateAuthorityArnRef?: AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnRef

    certificateAuthorityArnSelector?: AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnSelector

    certificateBody?: str

    certificateChain?: str

    domainName?: str

    earlyRenewalDuration?: str

    keyAlgorithm?: str

    options?: AcmAwsUpboundIoV1beta2CertificateSpecForProviderOptions

    privateKeySecretRef?: AcmAwsUpboundIoV1beta2CertificateSpecForProviderPrivateKeySecretRef

    region: str

    subjectAlternativeNames?: [str]

    tags?: {str:str}

    validationMethod?: str

    validationOption?: [AcmAwsUpboundIoV1beta2CertificateSpecForProviderValidationOptionItems0]


schema AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnRef:
    r"""
    Reference to a CertificateAuthority in acmpca to populate certificateAuthorityArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnRefPolicy


schema AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnSelector:
    r"""
    Selector for a CertificateAuthority in acmpca to populate certificateAuthorityArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnSelectorPolicy


schema AcmAwsUpboundIoV1beta2CertificateSpecForProviderCertificateAuthorityArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AcmAwsUpboundIoV1beta2CertificateSpecForProviderOptions:
    r"""
    Configuration block used to set certificate options. Detailed below.

    Attributes
    ----------
    certificateTransparencyLoggingPreference : str, default is Undefined, optional
        Whether certificate details should be added to a certificate transparency log. Valid values are ENABLED or DISABLED. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
    """


    certificateTransparencyLoggingPreference?: str


schema AcmAwsUpboundIoV1beta2CertificateSpecForProviderPrivateKeySecretRef:
    r"""
    Certificate's PEM-formatted private key

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema AcmAwsUpboundIoV1beta2CertificateSpecForProviderValidationOptionItems0:
    r"""
    acm aws upbound io v1beta2 certificate spec for provider validation option items0

    Attributes
    ----------
    domainName : str, default is Undefined, optional
        Fully qualified domain name (FQDN) in the certificate.
    validationDomain : str, default is Undefined, optional
        Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the domain_name value or a superdomain of the domain_name value. For example, if you request a certificate for "testing.example.com", you can specify "example.com" for this value.
    """


    domainName?: str

    validationDomain?: str


schema AcmAwsUpboundIoV1beta2CertificateSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    certificateAuthorityArn : str, default is Undefined, optional
        ARN of an ACM PCA
    certificateAuthorityArnRef : AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnRef, default is Undefined, optional
        certificate authority arn ref
    certificateAuthorityArnSelector : AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnSelector, default is Undefined, optional
        certificate authority arn selector
    certificateBody : str, default is Undefined, optional
        Certificate's PEM-formatted public key
    certificateChain : str, default is Undefined, optional
        Certificate's PEM-formatted chain
    domainName : str, default is Undefined, optional
        Domain name for which the certificate should be issued
    earlyRenewalDuration : str, default is Undefined, optional
        Amount of time to start automatic renewal process before expiration.
        Has no effect if less than 60 days.
        Represented by either
        a subset of RFC 3339 duration supporting years, months, and days (e.g., P90D),
        or a string such as 2160h.
    keyAlgorithm : str, default is Undefined, optional
        Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See ACM Certificate characteristics for more details.
    options : AcmAwsUpboundIoV1beta2CertificateSpecInitProviderOptions, default is Undefined, optional
        options
    privateKeySecretRef : AcmAwsUpboundIoV1beta2CertificateSpecInitProviderPrivateKeySecretRef, default is Undefined, optional
        private key secret ref
    subjectAlternativeNames : [str], default is Undefined, optional
        Set of domains that should be SANs in the issued certificate.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    validationMethod : str, default is Undefined, optional
        Which method to use for validation. DNS or EMAIL are valid.
    validationOption : [AcmAwsUpboundIoV1beta2CertificateSpecInitProviderValidationOptionItems0], default is Undefined, optional
        Configuration block used to specify information about the initial validation of each domain name. Detailed below.
    """


    certificateAuthorityArn?: str

    certificateAuthorityArnRef?: AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnRef

    certificateAuthorityArnSelector?: AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnSelector

    certificateBody?: str

    certificateChain?: str

    domainName?: str

    earlyRenewalDuration?: str

    keyAlgorithm?: str

    options?: AcmAwsUpboundIoV1beta2CertificateSpecInitProviderOptions

    privateKeySecretRef?: AcmAwsUpboundIoV1beta2CertificateSpecInitProviderPrivateKeySecretRef

    subjectAlternativeNames?: [str]

    tags?: {str:str}

    validationMethod?: str

    validationOption?: [AcmAwsUpboundIoV1beta2CertificateSpecInitProviderValidationOptionItems0]


schema AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnRef:
    r"""
    Reference to a CertificateAuthority in acmpca to populate certificateAuthorityArn.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnRefPolicy


schema AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnSelector:
    r"""
    Selector for a CertificateAuthority in acmpca to populate certificateAuthorityArn.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnSelectorPolicy


schema AcmAwsUpboundIoV1beta2CertificateSpecInitProviderCertificateAuthorityArnSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AcmAwsUpboundIoV1beta2CertificateSpecInitProviderOptions:
    r"""
    Configuration block used to set certificate options. Detailed below.

    Attributes
    ----------
    certificateTransparencyLoggingPreference : str, default is Undefined, optional
        Whether certificate details should be added to a certificate transparency log. Valid values are ENABLED or DISABLED. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
    """


    certificateTransparencyLoggingPreference?: str


schema AcmAwsUpboundIoV1beta2CertificateSpecInitProviderPrivateKeySecretRef:
    r"""
    Certificate's PEM-formatted private key

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema AcmAwsUpboundIoV1beta2CertificateSpecInitProviderValidationOptionItems0:
    r"""
    acm aws upbound io v1beta2 certificate spec init provider validation option items0

    Attributes
    ----------
    domainName : str, default is Undefined, optional
        Fully qualified domain name (FQDN) in the certificate.
    validationDomain : str, default is Undefined, optional
        Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the domain_name value or a superdomain of the domain_name value. For example, if you request a certificate for "testing.example.com", you can specify "example.com" for this value.
    """


    domainName?: str

    validationDomain?: str


schema AcmAwsUpboundIoV1beta2CertificateSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AcmAwsUpboundIoV1beta2CertificateSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AcmAwsUpboundIoV1beta2CertificateSpecProviderConfigRefPolicy


schema AcmAwsUpboundIoV1beta2CertificateSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsToConfigRef

    metadata?: AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsToMetadata

    name: str


schema AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsToConfigRefPolicy


schema AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AcmAwsUpboundIoV1beta2CertificateSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema AcmAwsUpboundIoV1beta2CertificateSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema AcmAwsUpboundIoV1beta2CertificateStatus:
    r"""
    CertificateStatus defines the observed state of Certificate.

    Attributes
    ----------
    atProvider : AcmAwsUpboundIoV1beta2CertificateStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [AcmAwsUpboundIoV1beta2CertificateStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: AcmAwsUpboundIoV1beta2CertificateStatusAtProvider

    conditions?: [AcmAwsUpboundIoV1beta2CertificateStatusConditionsItems0]

    observedGeneration?: int


schema AcmAwsUpboundIoV1beta2CertificateStatusAtProvider:
    r"""
    acm aws upbound io v1beta2 certificate status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN of the certificate
    certificateAuthorityArn : str, default is Undefined, optional
        ARN of an ACM PCA
    certificateBody : str, default is Undefined, optional
        Certificate's PEM-formatted public key
    certificateChain : str, default is Undefined, optional
        Certificate's PEM-formatted chain
    domainName : str, default is Undefined, optional
        Domain name for which the certificate should be issued
    domainValidationOptions : [AcmAwsUpboundIoV1beta2CertificateStatusAtProviderDomainValidationOptionsItems0], default is Undefined, optional
        Set of domain validation objects which can be used to complete certificate validation.
        Can have more than one element, e.g., if SANs are defined.
        Only set if DNS-validation was used.
    earlyRenewalDuration : str, default is Undefined, optional
        Amount of time to start automatic renewal process before expiration.
        Has no effect if less than 60 days.
        Represented by either
        a subset of RFC 3339 duration supporting years, months, and days (e.g., P90D),
        or a string such as 2160h.
    id : str, default is Undefined, optional
        ARN of the certificate
    keyAlgorithm : str, default is Undefined, optional
        Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See ACM Certificate characteristics for more details.
    notAfter : str, default is Undefined, optional
        Expiration date and time of the certificate.
    notBefore : str, default is Undefined, optional
        Start of the validity period of the certificate.
    options : AcmAwsUpboundIoV1beta2CertificateStatusAtProviderOptions, default is Undefined, optional
        options
    pendingRenewal : bool, default is Undefined, optional
        true if a Private certificate eligible for managed renewal is within the early_renewal_duration period.
    renewalEligibility : str, default is Undefined, optional
        Whether the certificate is eligible for managed renewal.
    renewalSummary : [AcmAwsUpboundIoV1beta2CertificateStatusAtProviderRenewalSummaryItems0], default is Undefined, optional
        Contains information about the status of ACM's managed renewal for the certificate.
    status : str, default is Undefined, optional
        Status of the certificate.
    subjectAlternativeNames : [str], default is Undefined, optional
        Set of domains that should be SANs in the issued certificate.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    $type : str, default is Undefined, optional
        Source of the certificate.
    validationEmails : [str], default is Undefined, optional
        List of addresses that received a validation email. Only set if EMAIL validation was used.
    validationMethod : str, default is Undefined, optional
        Which method to use for validation. DNS or EMAIL are valid.
    validationOption : [AcmAwsUpboundIoV1beta2CertificateStatusAtProviderValidationOptionItems0], default is Undefined, optional
        Configuration block used to specify information about the initial validation of each domain name. Detailed below.
    """


    arn?: str

    certificateAuthorityArn?: str

    certificateBody?: str

    certificateChain?: str

    domainName?: str

    domainValidationOptions?: [AcmAwsUpboundIoV1beta2CertificateStatusAtProviderDomainValidationOptionsItems0]

    earlyRenewalDuration?: str

    id?: str

    keyAlgorithm?: str

    notAfter?: str

    notBefore?: str

    options?: AcmAwsUpboundIoV1beta2CertificateStatusAtProviderOptions

    pendingRenewal?: bool

    renewalEligibility?: str

    renewalSummary?: [AcmAwsUpboundIoV1beta2CertificateStatusAtProviderRenewalSummaryItems0]

    status?: str

    subjectAlternativeNames?: [str]

    tags?: {str:str}

    tagsAll?: {str:str}

    $type?: str

    validationEmails?: [str]

    validationMethod?: str

    validationOption?: [AcmAwsUpboundIoV1beta2CertificateStatusAtProviderValidationOptionItems0]


schema AcmAwsUpboundIoV1beta2CertificateStatusAtProviderDomainValidationOptionsItems0:
    r"""
    acm aws upbound io v1beta2 certificate status at provider domain validation options items0

    Attributes
    ----------
    domainName : str, default is Undefined, optional
        Fully qualified domain name (FQDN) in the certificate.
    resourceRecordName : str, default is Undefined, optional
        The name of the DNS record to create to validate the certificate
    resourceRecordType : str, default is Undefined, optional
        The type of DNS record to create
    resourceRecordValue : str, default is Undefined, optional
        The value the DNS record needs to have
    """


    domainName?: str

    resourceRecordName?: str

    resourceRecordType?: str

    resourceRecordValue?: str


schema AcmAwsUpboundIoV1beta2CertificateStatusAtProviderOptions:
    r"""
    Configuration block used to set certificate options. Detailed below.

    Attributes
    ----------
    certificateTransparencyLoggingPreference : str, default is Undefined, optional
        Whether certificate details should be added to a certificate transparency log. Valid values are ENABLED or DISABLED. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
    """


    certificateTransparencyLoggingPreference?: str


schema AcmAwsUpboundIoV1beta2CertificateStatusAtProviderRenewalSummaryItems0:
    r"""
    acm aws upbound io v1beta2 certificate status at provider renewal summary items0

    Attributes
    ----------
    renewalStatus : str, default is Undefined, optional
        The status of ACM's managed renewal of the certificate
    renewalStatusReason : str, default is Undefined, optional
        The reason that a renewal request was unsuccessful or is pending
    updatedAt : str, default is Undefined, optional
        updated at
    """


    renewalStatus?: str

    renewalStatusReason?: str

    updatedAt?: str


schema AcmAwsUpboundIoV1beta2CertificateStatusAtProviderValidationOptionItems0:
    r"""
    acm aws upbound io v1beta2 certificate status at provider validation option items0

    Attributes
    ----------
    domainName : str, default is Undefined, optional
        Fully qualified domain name (FQDN) in the certificate.
    validationDomain : str, default is Undefined, optional
        Domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the domain_name value or a superdomain of the domain_name value. For example, if you request a certificate for "testing.example.com", you can specify "example.com" for this value.
    """


    domainName?: str

    validationDomain?: str


schema AcmAwsUpboundIoV1beta2CertificateStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


