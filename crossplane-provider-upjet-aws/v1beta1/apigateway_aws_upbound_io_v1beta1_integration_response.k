"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema IntegrationResponse:
    r"""
    IntegrationResponse is the Schema for the IntegrationResponses API. Provides an HTTP Method Integration Response for an API Gateway Resource.

    Attributes
    ----------
    apiVersion : str, default is "apigateway.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "IntegrationResponse", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpec, default is Undefined, required
        spec
    status : ApigatewayAwsUpboundIoV1beta1IntegrationResponseStatus, default is Undefined, optional
        status
    """


    apiVersion: "apigateway.aws.upbound.io/v1beta1" = "apigateway.aws.upbound.io/v1beta1"

    kind: "IntegrationResponse" = "IntegrationResponse"

    metadata?: v1.ObjectMeta

    spec: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpec

    status?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseStatus


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpec:
    r"""
    IntegrationResponseSpec defines the desired state of IntegrationResponse

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProvider, default is Undefined, required
        for provider
    initProvider : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProvider

    initProvider?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecProviderConfigRef

    publishConnectionDetailsTo?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecWriteConnectionSecretToRef


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProvider:
    r"""
    apigateway aws upbound io v1beta1 integration response spec for provider

    Attributes
    ----------
    contentHandling : str, default is Undefined, optional
        How to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
    httpMethod : str, default is Undefined, optional
        HTTP method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY).
    httpMethodRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodRef, default is Undefined, optional
        http method ref
    httpMethodSelector : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodSelector, default is Undefined, optional
        http method selector
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    resourceId : str, default is Undefined, optional
        API resource ID.
    resourceIdRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDRef, default is Undefined, optional
        resource Id ref
    resourceIdSelector : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDSelector, default is Undefined, optional
        resource Id selector
    responseParameters : {str:str}, default is Undefined, optional
        Map of response parameters that can be read from the backend response. For example: response_parameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }.
    responseTemplates : {str:str}, default is Undefined, optional
        Map of templates used to transform the integration response body.
    restApiId : str, default is Undefined, optional
        ID of the associated REST API.
    restApiIdRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDRef, default is Undefined, optional
        rest Api Id ref
    restApiIdSelector : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDSelector, default is Undefined, optional
        rest Api Id selector
    selectionPattern : str, default is Undefined, optional
        Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an AWS Lambda function, the AWS Lambda function error header is matched. For all other HTTP and AWS backends, the HTTP status code is matched.
    statusCode : str, default is Undefined, optional
        HTTP status code.
    statusCodeRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeRef, default is Undefined, optional
        status code ref
    statusCodeSelector : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeSelector, default is Undefined, optional
        status code selector
    """


    contentHandling?: str

    httpMethod?: str

    httpMethodRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodRef

    httpMethodSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodSelector

    region: str

    resourceId?: str

    resourceIdRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDRef

    resourceIdSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDSelector

    responseParameters?: {str:str}

    responseTemplates?: {str:str}

    restApiId?: str

    restApiIdRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDRef

    restApiIdSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDSelector

    selectionPattern?: str

    statusCode?: str

    statusCodeRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeRef

    statusCodeSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeSelector


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodRef:
    r"""
    Reference to a Method in apigateway to populate httpMethod.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodSelector:
    r"""
    Selector for a Method in apigateway to populate httpMethod.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderHTTPMethodSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDRef:
    r"""
    Reference to a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDSelector:
    r"""
    Selector for a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderResourceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDRef:
    r"""
    Reference to a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDSelector:
    r"""
    Selector for a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderRestAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeRef:
    r"""
    Reference to a MethodResponse in apigateway to populate statusCode.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeSelector:
    r"""
    Selector for a MethodResponse in apigateway to populate statusCode.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecForProviderStatusCodeSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    contentHandling : str, default is Undefined, optional
        How to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
    httpMethod : str, default is Undefined, optional
        HTTP method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY).
    httpMethodRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodRef, default is Undefined, optional
        http method ref
    httpMethodSelector : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodSelector, default is Undefined, optional
        http method selector
    resourceId : str, default is Undefined, optional
        API resource ID.
    resourceIdRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDRef, default is Undefined, optional
        resource Id ref
    resourceIdSelector : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDSelector, default is Undefined, optional
        resource Id selector
    responseParameters : {str:str}, default is Undefined, optional
        Map of response parameters that can be read from the backend response. For example: response_parameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }.
    responseTemplates : {str:str}, default is Undefined, optional
        Map of templates used to transform the integration response body.
    restApiId : str, default is Undefined, optional
        ID of the associated REST API.
    restApiIdRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDRef, default is Undefined, optional
        rest Api Id ref
    restApiIdSelector : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDSelector, default is Undefined, optional
        rest Api Id selector
    selectionPattern : str, default is Undefined, optional
        Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an AWS Lambda function, the AWS Lambda function error header is matched. For all other HTTP and AWS backends, the HTTP status code is matched.
    statusCode : str, default is Undefined, optional
        HTTP status code.
    statusCodeRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeRef, default is Undefined, optional
        status code ref
    statusCodeSelector : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeSelector, default is Undefined, optional
        status code selector
    """


    contentHandling?: str

    httpMethod?: str

    httpMethodRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodRef

    httpMethodSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodSelector

    resourceId?: str

    resourceIdRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDRef

    resourceIdSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDSelector

    responseParameters?: {str:str}

    responseTemplates?: {str:str}

    restApiId?: str

    restApiIdRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDRef

    restApiIdSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDSelector

    selectionPattern?: str

    statusCode?: str

    statusCodeRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeRef

    statusCodeSelector?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeSelector


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodRef:
    r"""
    Reference to a Method in apigateway to populate httpMethod.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodSelector:
    r"""
    Selector for a Method in apigateway to populate httpMethod.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderHTTPMethodSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDRef:
    r"""
    Reference to a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDSelector:
    r"""
    Selector for a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderResourceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDRef:
    r"""
    Reference to a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDSelector:
    r"""
    Selector for a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderRestAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeRef:
    r"""
    Reference to a MethodResponse in apigateway to populate statusCode.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeSelector:
    r"""
    Selector for a MethodResponse in apigateway to populate statusCode.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecInitProviderStatusCodeSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecProviderConfigRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsToConfigRef

    metadata?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsToMetadata

    name: str


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsToConfigRefPolicy


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseStatus:
    r"""
    IntegrationResponseStatus defines the observed state of IntegrationResponse.

    Attributes
    ----------
    atProvider : ApigatewayAwsUpboundIoV1beta1IntegrationResponseStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ApigatewayAwsUpboundIoV1beta1IntegrationResponseStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ApigatewayAwsUpboundIoV1beta1IntegrationResponseStatusAtProvider

    conditions?: [ApigatewayAwsUpboundIoV1beta1IntegrationResponseStatusConditionsItems0]

    observedGeneration?: int


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseStatusAtProvider:
    r"""
    apigateway aws upbound io v1beta1 integration response status at provider

    Attributes
    ----------
    contentHandling : str, default is Undefined, optional
        How to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT. If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
    httpMethod : str, default is Undefined, optional
        HTTP method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY).
    id : str, default is Undefined, optional
        id
    resourceId : str, default is Undefined, optional
        API resource ID.
    responseParameters : {str:str}, default is Undefined, optional
        Map of response parameters that can be read from the backend response. For example: response_parameters = { "method.response.header.X-Some-Header" = "integration.response.header.X-Some-Other-Header" }.
    responseTemplates : {str:str}, default is Undefined, optional
        Map of templates used to transform the integration response body.
    restApiId : str, default is Undefined, optional
        ID of the associated REST API.
    selectionPattern : str, default is Undefined, optional
        Regular expression pattern used to choose an integration response based on the response from the backend. Omit configuring this to make the integration the default one. If the backend is an AWS Lambda function, the AWS Lambda function error header is matched. For all other HTTP and AWS backends, the HTTP status code is matched.
    statusCode : str, default is Undefined, optional
        HTTP status code.
    """


    contentHandling?: str

    httpMethod?: str

    id?: str

    resourceId?: str

    responseParameters?: {str:str}

    responseTemplates?: {str:str}

    restApiId?: str

    selectionPattern?: str

    statusCode?: str


schema ApigatewayAwsUpboundIoV1beta1IntegrationResponseStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


