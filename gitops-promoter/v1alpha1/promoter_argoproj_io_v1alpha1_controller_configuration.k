"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema ControllerConfiguration:
    r"""
    ControllerConfiguration is the Schema for the controllerconfigurations API.

    Attributes
    ----------
    apiVersion : str, default is "promoter.argoproj.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ControllerConfiguration", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : PromoterArgoprojIoV1alpha1ControllerConfigurationSpec, default is Undefined, optional
        spec
    status : any, default is Undefined, optional
        ControllerConfigurationStatus defines the observed state of ControllerConfiguration.

        Currently, this resource does not maintain any status information as it is a configuration-only
        resource. Status fields may be added in the future to track configuration validation or
        controller health metrics.
    """


    apiVersion: "promoter.argoproj.io/v1alpha1" = "promoter.argoproj.io/v1alpha1"

    kind: "ControllerConfiguration" = "ControllerConfiguration"

    metadata?: v1.ObjectMeta

    spec?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpec

    status?: any


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpec:
    r"""
    ControllerConfigurationSpec defines the desired state of ControllerConfiguration.

    This spec contains the global configuration for all controllers in the promoter system.
    Each controller has its own configuration section that specifies WorkQueue settings,
    rate limiters, and other controller-specific parameters. All fields should be required,
    with defaults set in manifests rather than in code.

    Attributes
    ----------
    argocdCommitStatus : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatus, default is Undefined, required
        argocd commit status
    changeTransferPolicy : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicy, default is Undefined, required
        change transfer policy
    commitStatus : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatus, default is Undefined, required
        commit status
    promotionStrategy : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategy, default is Undefined, required
        promotion strategy
    pullRequest : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequest, default is Undefined, required
        pull request
    """


    argocdCommitStatus: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatus

    changeTransferPolicy: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicy

    commitStatus: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatus

    promotionStrategy: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategy

    pullRequest: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequest


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatus:
    r"""
    ArgoCDCommitStatus contains the configuration for the ArgoCDCommitStatus controller,
    including WorkQueue settings that control reconciliation behavior.

    Attributes
    ----------
    watchLocalApplications : bool, default is True, required
        WatchLocalApplications controls whether the controller monitors Argo CD Applications
        in the local cluster. When false, the controller will only watch Applications in remote clusters
        configured via kubeconfig secrets. This is useful when the Argo CD Application CRD is not installed
        in the local cluster or when all Applications are deployed to remote clusters.
    workQueue : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueue, default is Undefined, required
        work queue
    """


    watchLocalApplications: bool = True

    workQueue: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueue


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueue:
    r"""
    WorkQueue contains the work queue configuration for the ArgoCDCommitStatus controller.
    This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.

    Attributes
    ----------
    maxConcurrentReconciles : int, default is Undefined, required
        MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
        that can run for this controller. Higher values increase throughput but consume more
        resources. Must be at least 1.
    rateLimiter : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiter, default is Undefined, required
        rate limiter
    requeueDuration : str, default is Undefined, required
        RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
        This creates a periodic reconciliation loop that ensures the desired state is maintained even
        without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
    """


    maxConcurrentReconciles: int

    rateLimiter: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiter

    requeueDuration: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiter:
    r"""
    RateLimiter defines the rate limiting strategy for the controller's work queue.
    Rate limiting controls how quickly failed reconciliations are retried and helps
    prevent overwhelming external APIs or systems.

    Attributes
    ----------
    bucket : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterBucket, default is Undefined, optional
        bucket
    exponentialFailure : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterExponentialFailure, default is Undefined, optional
        exponential failure
    fastSlow : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterFastSlow, default is Undefined, optional
        fast slow
    maxOf : [PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0], default is Undefined, optional
        MaxOf allows combining multiple rate limiters, where the maximum delay from all
        limiters is used. This enables sophisticated rate limiting that respects multiple
        constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
    """


    bucket?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterBucket

    exponentialFailure?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterExponentialFailure

    fastSlow?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterFastSlow

    maxOf?: [PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0]


    check:
        len(maxOf) <= 3 if maxOf


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterBucket:
    r"""
    Bucket rate limiter uses a token bucket algorithm to control request rate.
    Allows bursts while maintaining an average rate limit.

    Attributes
    ----------
    bucket : int, default is Undefined, required
        Bucket is the maximum number of tokens that can be accumulated in the bucket.
        This defines the maximum burst size - how many operations can occur in rapid
        succession before rate limiting takes effect. Must be non-negative.
    qps : int, default is Undefined, required
        Qps (queries per second) is the rate at which tokens are added to the bucket.
        This defines the sustained rate limit for operations. Must be non-negative.
    """


    bucket: int

    qps: int


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterExponentialFailure:
    r"""
    ExponentialFailure rate limiter increases delay exponentially with each failure.
    Standard approach for backing off when operations fail repeatedly.

    Attributes
    ----------
    baseDelay : str, default is Undefined, required
        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
    maxDelay : str, default is Undefined, required
        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
        this value, all subsequent retries will use this delay.
        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
    """


    baseDelay: str

    maxDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterFastSlow:
    r"""
    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
    Useful for quickly retrying transient errors while backing off for persistent failures.

    Attributes
    ----------
    fastDelay : str, default is Undefined, required
        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
    maxFastAttempts : int, default is Undefined, required
        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
        Must be at least 1.
    slowDelay : str, default is Undefined, required
        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
    """


    fastDelay: str

    maxFastAttempts: int

    slowDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0:
    r"""
    RateLimiterTypes defines the different algorithms available for rate limiting.

    Exactly one of the three rate limiter types must be specified:
      - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
      - ExponentialFailure: Standard exponential backoff for repeated failures
      - Bucket: Token bucket algorithm for controlling overall request rate

    See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.

    Attributes
    ----------
    bucket : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0Bucket, default is Undefined, optional
        bucket
    exponentialFailure : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0ExponentialFailure, default is Undefined, optional
        exponential failure
    fastSlow : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0FastSlow, default is Undefined, optional
        fast slow
    """


    bucket?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0Bucket

    exponentialFailure?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0ExponentialFailure

    fastSlow?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0FastSlow


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0Bucket:
    r"""
    Bucket rate limiter uses a token bucket algorithm to control request rate.
    Allows bursts while maintaining an average rate limit.

    Attributes
    ----------
    bucket : int, default is Undefined, required
        Bucket is the maximum number of tokens that can be accumulated in the bucket.
        This defines the maximum burst size - how many operations can occur in rapid
        succession before rate limiting takes effect. Must be non-negative.
    qps : int, default is Undefined, required
        Qps (queries per second) is the rate at which tokens are added to the bucket.
        This defines the sustained rate limit for operations. Must be non-negative.
    """


    bucket: int

    qps: int


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0ExponentialFailure:
    r"""
    ExponentialFailure rate limiter increases delay exponentially with each failure.
    Standard approach for backing off when operations fail repeatedly.

    Attributes
    ----------
    baseDelay : str, default is Undefined, required
        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
    maxDelay : str, default is Undefined, required
        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
        this value, all subsequent retries will use this delay.
        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
    """


    baseDelay: str

    maxDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecArgocdCommitStatusWorkQueueRateLimiterMaxOfItems0FastSlow:
    r"""
    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
    Useful for quickly retrying transient errors while backing off for persistent failures.

    Attributes
    ----------
    fastDelay : str, default is Undefined, required
        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
    maxFastAttempts : int, default is Undefined, required
        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
        Must be at least 1.
    slowDelay : str, default is Undefined, required
        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
    """


    fastDelay: str

    maxFastAttempts: int

    slowDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicy:
    r"""
    ChangeTransferPolicy contains the configuration for the ChangeTransferPolicy controller,
    including WorkQueue settings that control reconciliation behavior.

    Attributes
    ----------
    workQueue : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueue, default is Undefined, required
        work queue
    """


    workQueue: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueue


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueue:
    r"""
    WorkQueue contains the work queue configuration for the ChangeTransferPolicy controller.
    This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.

    Attributes
    ----------
    maxConcurrentReconciles : int, default is Undefined, required
        MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
        that can run for this controller. Higher values increase throughput but consume more
        resources. Must be at least 1.
    rateLimiter : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiter, default is Undefined, required
        rate limiter
    requeueDuration : str, default is Undefined, required
        RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
        This creates a periodic reconciliation loop that ensures the desired state is maintained even
        without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
    """


    maxConcurrentReconciles: int

    rateLimiter: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiter

    requeueDuration: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiter:
    r"""
    RateLimiter defines the rate limiting strategy for the controller's work queue.
    Rate limiting controls how quickly failed reconciliations are retried and helps
    prevent overwhelming external APIs or systems.

    Attributes
    ----------
    bucket : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterBucket, default is Undefined, optional
        bucket
    exponentialFailure : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterExponentialFailure, default is Undefined, optional
        exponential failure
    fastSlow : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterFastSlow, default is Undefined, optional
        fast slow
    maxOf : [PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0], default is Undefined, optional
        MaxOf allows combining multiple rate limiters, where the maximum delay from all
        limiters is used. This enables sophisticated rate limiting that respects multiple
        constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
    """


    bucket?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterBucket

    exponentialFailure?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterExponentialFailure

    fastSlow?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterFastSlow

    maxOf?: [PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0]


    check:
        len(maxOf) <= 3 if maxOf


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterBucket:
    r"""
    Bucket rate limiter uses a token bucket algorithm to control request rate.
    Allows bursts while maintaining an average rate limit.

    Attributes
    ----------
    bucket : int, default is Undefined, required
        Bucket is the maximum number of tokens that can be accumulated in the bucket.
        This defines the maximum burst size - how many operations can occur in rapid
        succession before rate limiting takes effect. Must be non-negative.
    qps : int, default is Undefined, required
        Qps (queries per second) is the rate at which tokens are added to the bucket.
        This defines the sustained rate limit for operations. Must be non-negative.
    """


    bucket: int

    qps: int


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterExponentialFailure:
    r"""
    ExponentialFailure rate limiter increases delay exponentially with each failure.
    Standard approach for backing off when operations fail repeatedly.

    Attributes
    ----------
    baseDelay : str, default is Undefined, required
        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
    maxDelay : str, default is Undefined, required
        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
        this value, all subsequent retries will use this delay.
        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
    """


    baseDelay: str

    maxDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterFastSlow:
    r"""
    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
    Useful for quickly retrying transient errors while backing off for persistent failures.

    Attributes
    ----------
    fastDelay : str, default is Undefined, required
        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
    maxFastAttempts : int, default is Undefined, required
        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
        Must be at least 1.
    slowDelay : str, default is Undefined, required
        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
    """


    fastDelay: str

    maxFastAttempts: int

    slowDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0:
    r"""
    RateLimiterTypes defines the different algorithms available for rate limiting.

    Exactly one of the three rate limiter types must be specified:
      - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
      - ExponentialFailure: Standard exponential backoff for repeated failures
      - Bucket: Token bucket algorithm for controlling overall request rate

    See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.

    Attributes
    ----------
    bucket : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0Bucket, default is Undefined, optional
        bucket
    exponentialFailure : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0ExponentialFailure, default is Undefined, optional
        exponential failure
    fastSlow : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0FastSlow, default is Undefined, optional
        fast slow
    """


    bucket?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0Bucket

    exponentialFailure?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0ExponentialFailure

    fastSlow?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0FastSlow


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0Bucket:
    r"""
    Bucket rate limiter uses a token bucket algorithm to control request rate.
    Allows bursts while maintaining an average rate limit.

    Attributes
    ----------
    bucket : int, default is Undefined, required
        Bucket is the maximum number of tokens that can be accumulated in the bucket.
        This defines the maximum burst size - how many operations can occur in rapid
        succession before rate limiting takes effect. Must be non-negative.
    qps : int, default is Undefined, required
        Qps (queries per second) is the rate at which tokens are added to the bucket.
        This defines the sustained rate limit for operations. Must be non-negative.
    """


    bucket: int

    qps: int


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0ExponentialFailure:
    r"""
    ExponentialFailure rate limiter increases delay exponentially with each failure.
    Standard approach for backing off when operations fail repeatedly.

    Attributes
    ----------
    baseDelay : str, default is Undefined, required
        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
    maxDelay : str, default is Undefined, required
        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
        this value, all subsequent retries will use this delay.
        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
    """


    baseDelay: str

    maxDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecChangeTransferPolicyWorkQueueRateLimiterMaxOfItems0FastSlow:
    r"""
    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
    Useful for quickly retrying transient errors while backing off for persistent failures.

    Attributes
    ----------
    fastDelay : str, default is Undefined, required
        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
    maxFastAttempts : int, default is Undefined, required
        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
        Must be at least 1.
    slowDelay : str, default is Undefined, required
        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
    """


    fastDelay: str

    maxFastAttempts: int

    slowDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatus:
    r"""
    CommitStatus contains the configuration for the CommitStatus controller,
    including WorkQueue settings that control reconciliation behavior.

    Attributes
    ----------
    workQueue : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueue, default is Undefined, required
        work queue
    """


    workQueue: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueue


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueue:
    r"""
    WorkQueue contains the work queue configuration for the CommitStatus controller.
    This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.

    Attributes
    ----------
    maxConcurrentReconciles : int, default is Undefined, required
        MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
        that can run for this controller. Higher values increase throughput but consume more
        resources. Must be at least 1.
    rateLimiter : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiter, default is Undefined, required
        rate limiter
    requeueDuration : str, default is Undefined, required
        RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
        This creates a periodic reconciliation loop that ensures the desired state is maintained even
        without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
    """


    maxConcurrentReconciles: int

    rateLimiter: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiter

    requeueDuration: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiter:
    r"""
    RateLimiter defines the rate limiting strategy for the controller's work queue.
    Rate limiting controls how quickly failed reconciliations are retried and helps
    prevent overwhelming external APIs or systems.

    Attributes
    ----------
    bucket : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterBucket, default is Undefined, optional
        bucket
    exponentialFailure : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterExponentialFailure, default is Undefined, optional
        exponential failure
    fastSlow : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterFastSlow, default is Undefined, optional
        fast slow
    maxOf : [PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0], default is Undefined, optional
        MaxOf allows combining multiple rate limiters, where the maximum delay from all
        limiters is used. This enables sophisticated rate limiting that respects multiple
        constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
    """


    bucket?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterBucket

    exponentialFailure?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterExponentialFailure

    fastSlow?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterFastSlow

    maxOf?: [PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0]


    check:
        len(maxOf) <= 3 if maxOf


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterBucket:
    r"""
    Bucket rate limiter uses a token bucket algorithm to control request rate.
    Allows bursts while maintaining an average rate limit.

    Attributes
    ----------
    bucket : int, default is Undefined, required
        Bucket is the maximum number of tokens that can be accumulated in the bucket.
        This defines the maximum burst size - how many operations can occur in rapid
        succession before rate limiting takes effect. Must be non-negative.
    qps : int, default is Undefined, required
        Qps (queries per second) is the rate at which tokens are added to the bucket.
        This defines the sustained rate limit for operations. Must be non-negative.
    """


    bucket: int

    qps: int


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterExponentialFailure:
    r"""
    ExponentialFailure rate limiter increases delay exponentially with each failure.
    Standard approach for backing off when operations fail repeatedly.

    Attributes
    ----------
    baseDelay : str, default is Undefined, required
        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
    maxDelay : str, default is Undefined, required
        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
        this value, all subsequent retries will use this delay.
        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
    """


    baseDelay: str

    maxDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterFastSlow:
    r"""
    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
    Useful for quickly retrying transient errors while backing off for persistent failures.

    Attributes
    ----------
    fastDelay : str, default is Undefined, required
        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
    maxFastAttempts : int, default is Undefined, required
        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
        Must be at least 1.
    slowDelay : str, default is Undefined, required
        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
    """


    fastDelay: str

    maxFastAttempts: int

    slowDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0:
    r"""
    RateLimiterTypes defines the different algorithms available for rate limiting.

    Exactly one of the three rate limiter types must be specified:
      - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
      - ExponentialFailure: Standard exponential backoff for repeated failures
      - Bucket: Token bucket algorithm for controlling overall request rate

    See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.

    Attributes
    ----------
    bucket : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0Bucket, default is Undefined, optional
        bucket
    exponentialFailure : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0ExponentialFailure, default is Undefined, optional
        exponential failure
    fastSlow : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0FastSlow, default is Undefined, optional
        fast slow
    """


    bucket?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0Bucket

    exponentialFailure?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0ExponentialFailure

    fastSlow?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0FastSlow


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0Bucket:
    r"""
    Bucket rate limiter uses a token bucket algorithm to control request rate.
    Allows bursts while maintaining an average rate limit.

    Attributes
    ----------
    bucket : int, default is Undefined, required
        Bucket is the maximum number of tokens that can be accumulated in the bucket.
        This defines the maximum burst size - how many operations can occur in rapid
        succession before rate limiting takes effect. Must be non-negative.
    qps : int, default is Undefined, required
        Qps (queries per second) is the rate at which tokens are added to the bucket.
        This defines the sustained rate limit for operations. Must be non-negative.
    """


    bucket: int

    qps: int


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0ExponentialFailure:
    r"""
    ExponentialFailure rate limiter increases delay exponentially with each failure.
    Standard approach for backing off when operations fail repeatedly.

    Attributes
    ----------
    baseDelay : str, default is Undefined, required
        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
    maxDelay : str, default is Undefined, required
        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
        this value, all subsequent retries will use this delay.
        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
    """


    baseDelay: str

    maxDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecCommitStatusWorkQueueRateLimiterMaxOfItems0FastSlow:
    r"""
    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
    Useful for quickly retrying transient errors while backing off for persistent failures.

    Attributes
    ----------
    fastDelay : str, default is Undefined, required
        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
    maxFastAttempts : int, default is Undefined, required
        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
        Must be at least 1.
    slowDelay : str, default is Undefined, required
        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
    """


    fastDelay: str

    maxFastAttempts: int

    slowDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategy:
    r"""
    PromotionStrategy contains the configuration for the PromotionStrategy controller,
    including WorkQueue settings that control reconciliation behavior.

    Attributes
    ----------
    workQueue : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueue, default is Undefined, required
        work queue
    """


    workQueue: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueue


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueue:
    r"""
    WorkQueue contains the work queue configuration for the PromotionStrategy controller.
    This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.

    Attributes
    ----------
    maxConcurrentReconciles : int, default is Undefined, required
        MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
        that can run for this controller. Higher values increase throughput but consume more
        resources. Must be at least 1.
    rateLimiter : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiter, default is Undefined, required
        rate limiter
    requeueDuration : str, default is Undefined, required
        RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
        This creates a periodic reconciliation loop that ensures the desired state is maintained even
        without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
    """


    maxConcurrentReconciles: int

    rateLimiter: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiter

    requeueDuration: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiter:
    r"""
    RateLimiter defines the rate limiting strategy for the controller's work queue.
    Rate limiting controls how quickly failed reconciliations are retried and helps
    prevent overwhelming external APIs or systems.

    Attributes
    ----------
    bucket : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterBucket, default is Undefined, optional
        bucket
    exponentialFailure : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterExponentialFailure, default is Undefined, optional
        exponential failure
    fastSlow : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterFastSlow, default is Undefined, optional
        fast slow
    maxOf : [PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0], default is Undefined, optional
        MaxOf allows combining multiple rate limiters, where the maximum delay from all
        limiters is used. This enables sophisticated rate limiting that respects multiple
        constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
    """


    bucket?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterBucket

    exponentialFailure?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterExponentialFailure

    fastSlow?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterFastSlow

    maxOf?: [PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0]


    check:
        len(maxOf) <= 3 if maxOf


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterBucket:
    r"""
    Bucket rate limiter uses a token bucket algorithm to control request rate.
    Allows bursts while maintaining an average rate limit.

    Attributes
    ----------
    bucket : int, default is Undefined, required
        Bucket is the maximum number of tokens that can be accumulated in the bucket.
        This defines the maximum burst size - how many operations can occur in rapid
        succession before rate limiting takes effect. Must be non-negative.
    qps : int, default is Undefined, required
        Qps (queries per second) is the rate at which tokens are added to the bucket.
        This defines the sustained rate limit for operations. Must be non-negative.
    """


    bucket: int

    qps: int


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterExponentialFailure:
    r"""
    ExponentialFailure rate limiter increases delay exponentially with each failure.
    Standard approach for backing off when operations fail repeatedly.

    Attributes
    ----------
    baseDelay : str, default is Undefined, required
        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
    maxDelay : str, default is Undefined, required
        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
        this value, all subsequent retries will use this delay.
        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
    """


    baseDelay: str

    maxDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterFastSlow:
    r"""
    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
    Useful for quickly retrying transient errors while backing off for persistent failures.

    Attributes
    ----------
    fastDelay : str, default is Undefined, required
        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
    maxFastAttempts : int, default is Undefined, required
        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
        Must be at least 1.
    slowDelay : str, default is Undefined, required
        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
    """


    fastDelay: str

    maxFastAttempts: int

    slowDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0:
    r"""
    RateLimiterTypes defines the different algorithms available for rate limiting.

    Exactly one of the three rate limiter types must be specified:
      - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
      - ExponentialFailure: Standard exponential backoff for repeated failures
      - Bucket: Token bucket algorithm for controlling overall request rate

    See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.

    Attributes
    ----------
    bucket : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0Bucket, default is Undefined, optional
        bucket
    exponentialFailure : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0ExponentialFailure, default is Undefined, optional
        exponential failure
    fastSlow : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0FastSlow, default is Undefined, optional
        fast slow
    """


    bucket?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0Bucket

    exponentialFailure?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0ExponentialFailure

    fastSlow?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0FastSlow


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0Bucket:
    r"""
    Bucket rate limiter uses a token bucket algorithm to control request rate.
    Allows bursts while maintaining an average rate limit.

    Attributes
    ----------
    bucket : int, default is Undefined, required
        Bucket is the maximum number of tokens that can be accumulated in the bucket.
        This defines the maximum burst size - how many operations can occur in rapid
        succession before rate limiting takes effect. Must be non-negative.
    qps : int, default is Undefined, required
        Qps (queries per second) is the rate at which tokens are added to the bucket.
        This defines the sustained rate limit for operations. Must be non-negative.
    """


    bucket: int

    qps: int


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0ExponentialFailure:
    r"""
    ExponentialFailure rate limiter increases delay exponentially with each failure.
    Standard approach for backing off when operations fail repeatedly.

    Attributes
    ----------
    baseDelay : str, default is Undefined, required
        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
    maxDelay : str, default is Undefined, required
        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
        this value, all subsequent retries will use this delay.
        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
    """


    baseDelay: str

    maxDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPromotionStrategyWorkQueueRateLimiterMaxOfItems0FastSlow:
    r"""
    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
    Useful for quickly retrying transient errors while backing off for persistent failures.

    Attributes
    ----------
    fastDelay : str, default is Undefined, required
        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
    maxFastAttempts : int, default is Undefined, required
        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
        Must be at least 1.
    slowDelay : str, default is Undefined, required
        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
    """


    fastDelay: str

    maxFastAttempts: int

    slowDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequest:
    r"""
    PullRequest contains the configuration for the PullRequest controller,
    including WorkQueue settings and pull request template configuration.

    Attributes
    ----------
    template : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestTemplate, default is Undefined, required
        template
    workQueue : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueue, default is Undefined, required
        work queue
    """


    template: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestTemplate

    workQueue: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueue


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestTemplate:
    r"""
    Template is the template configuration used to generate pull request titles and descriptions.
    Uses Go template syntax with Sprig functions available.

    Attributes
    ----------
    description : str, default is Undefined, required
        Description is the template used to generate the body/description of the pull request.
        Uses Go template syntax with Sprig functions available for string manipulation.
    title : str, default is Undefined, required
        Title is the template used to generate the title of the pull request.
        Uses Go template syntax with Sprig functions available for string manipulation.
    """


    description: str

    title: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueue:
    r"""
    WorkQueue contains the work queue configuration for the PullRequest controller.
    This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.

    Attributes
    ----------
    maxConcurrentReconciles : int, default is Undefined, required
        MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
        that can run for this controller. Higher values increase throughput but consume more
        resources. Must be at least 1.
    rateLimiter : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiter, default is Undefined, required
        rate limiter
    requeueDuration : str, default is Undefined, required
        RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
        This creates a periodic reconciliation loop that ensures the desired state is maintained even
        without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
    """


    maxConcurrentReconciles: int

    rateLimiter: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiter

    requeueDuration: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiter:
    r"""
    RateLimiter defines the rate limiting strategy for the controller's work queue.
    Rate limiting controls how quickly failed reconciliations are retried and helps
    prevent overwhelming external APIs or systems.

    Attributes
    ----------
    bucket : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterBucket, default is Undefined, optional
        bucket
    exponentialFailure : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterExponentialFailure, default is Undefined, optional
        exponential failure
    fastSlow : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterFastSlow, default is Undefined, optional
        fast slow
    maxOf : [PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0], default is Undefined, optional
        MaxOf allows combining multiple rate limiters, where the maximum delay from all
        limiters is used. This enables sophisticated rate limiting that respects multiple
        constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
    """


    bucket?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterBucket

    exponentialFailure?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterExponentialFailure

    fastSlow?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterFastSlow

    maxOf?: [PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0]


    check:
        len(maxOf) <= 3 if maxOf


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterBucket:
    r"""
    Bucket rate limiter uses a token bucket algorithm to control request rate.
    Allows bursts while maintaining an average rate limit.

    Attributes
    ----------
    bucket : int, default is Undefined, required
        Bucket is the maximum number of tokens that can be accumulated in the bucket.
        This defines the maximum burst size - how many operations can occur in rapid
        succession before rate limiting takes effect. Must be non-negative.
    qps : int, default is Undefined, required
        Qps (queries per second) is the rate at which tokens are added to the bucket.
        This defines the sustained rate limit for operations. Must be non-negative.
    """


    bucket: int

    qps: int


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterExponentialFailure:
    r"""
    ExponentialFailure rate limiter increases delay exponentially with each failure.
    Standard approach for backing off when operations fail repeatedly.

    Attributes
    ----------
    baseDelay : str, default is Undefined, required
        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
    maxDelay : str, default is Undefined, required
        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
        this value, all subsequent retries will use this delay.
        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
    """


    baseDelay: str

    maxDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterFastSlow:
    r"""
    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
    Useful for quickly retrying transient errors while backing off for persistent failures.

    Attributes
    ----------
    fastDelay : str, default is Undefined, required
        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
    maxFastAttempts : int, default is Undefined, required
        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
        Must be at least 1.
    slowDelay : str, default is Undefined, required
        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
    """


    fastDelay: str

    maxFastAttempts: int

    slowDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0:
    r"""
    RateLimiterTypes defines the different algorithms available for rate limiting.

    Exactly one of the three rate limiter types must be specified:
      - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
      - ExponentialFailure: Standard exponential backoff for repeated failures
      - Bucket: Token bucket algorithm for controlling overall request rate

    See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.

    Attributes
    ----------
    bucket : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0Bucket, default is Undefined, optional
        bucket
    exponentialFailure : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0ExponentialFailure, default is Undefined, optional
        exponential failure
    fastSlow : PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0FastSlow, default is Undefined, optional
        fast slow
    """


    bucket?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0Bucket

    exponentialFailure?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0ExponentialFailure

    fastSlow?: PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0FastSlow


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0Bucket:
    r"""
    Bucket rate limiter uses a token bucket algorithm to control request rate.
    Allows bursts while maintaining an average rate limit.

    Attributes
    ----------
    bucket : int, default is Undefined, required
        Bucket is the maximum number of tokens that can be accumulated in the bucket.
        This defines the maximum burst size - how many operations can occur in rapid
        succession before rate limiting takes effect. Must be non-negative.
    qps : int, default is Undefined, required
        Qps (queries per second) is the rate at which tokens are added to the bucket.
        This defines the sustained rate limit for operations. Must be non-negative.
    """


    bucket: int

    qps: int


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0ExponentialFailure:
    r"""
    ExponentialFailure rate limiter increases delay exponentially with each failure.
    Standard approach for backing off when operations fail repeatedly.

    Attributes
    ----------
    baseDelay : str, default is Undefined, required
        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
    maxDelay : str, default is Undefined, required
        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
        this value, all subsequent retries will use this delay.
        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
    """


    baseDelay: str

    maxDelay: str


schema PromoterArgoprojIoV1alpha1ControllerConfigurationSpecPullRequestWorkQueueRateLimiterMaxOfItems0FastSlow:
    r"""
    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
    Useful for quickly retrying transient errors while backing off for persistent failures.

    Attributes
    ----------
    fastDelay : str, default is Undefined, required
        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
    maxFastAttempts : int, default is Undefined, required
        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
        Must be at least 1.
    slowDelay : str, default is Undefined, required
        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
    """


    fastDelay: str

    maxFastAttempts: int

    slowDelay: str


