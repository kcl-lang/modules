"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Role:
    r"""
    Role is the Schema for the Roles API.

    Attributes
    ----------
    apiVersion : str, default is "role.keycloak.m.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Role", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : RoleKeycloakmCrossplaneIoV1alpha1RoleSpec, default is Undefined, required
        spec
    status : RoleKeycloakmCrossplaneIoV1alpha1RoleStatus, default is Undefined, optional
        status
    """


    apiVersion: "role.keycloak.m.crossplane.io/v1alpha1" = "role.keycloak.m.crossplane.io/v1alpha1"

    kind: "Role" = "Role"

    metadata?: v1.ObjectMeta

    spec: RoleKeycloakmCrossplaneIoV1alpha1RoleSpec

    status?: RoleKeycloakmCrossplaneIoV1alpha1RoleStatus


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpec:
    r"""
    RoleSpec defines the desired state of Role

    Attributes
    ----------
    forProvider : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProvider, default is Undefined, required
        for provider
    initProvider : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    writeConnectionSecretToRef : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    forProvider: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProvider

    initProvider?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecProviderConfigRef

    writeConnectionSecretToRef?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecWriteConnectionSecretToRef


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProvider:
    r"""
    role keycloakm crossplane io v1alpha1 role spec for provider

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        A map representing attributes for the role. In order to add multivalue attributes, use ## to seperate the values. Max length for each value is 255 chars
    clientId : str, default is Undefined, optional
        When specified, this role will be created as a client role attached to the client with the provided ID
    clientIdRef : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDRef, default is Undefined, optional
        client Id ref
    clientIdSelector : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDSelector, default is Undefined, optional
        client Id selector
    compositeRoles : [str], default is Undefined, optional
        When specified, this role will be a composite role, composed of all roles that have an ID present within this list.
    compositeRolesRefs : [RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesRefsItems0], default is Undefined, optional
        References to Role in role to populate compositeRoles.
    compositeRolesSelector : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesSelector, default is Undefined, optional
        composite roles selector
    description : str, default is Undefined, optional
        The description of the role
    $import : bool, default is Undefined, optional
        When true, the role with the specified name is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with roles that Keycloak creates automatically during realm creation, such as the client roles create-client, view-realm, ... for the client realm-management created per realm. Note, that the role will not be removed during destruction if import is true.
    name : str, default is Undefined, optional
        The name of the role
    realmId : str, default is Undefined, optional
        The realm this role exists within.
    realmIdRef : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDRef, default is Undefined, optional
        realm Id ref
    realmIdSelector : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDSelector, default is Undefined, optional
        realm Id selector
    """


    attributes?: {str:str}

    clientId?: str

    clientIdRef?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDRef

    clientIdSelector?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDSelector

    compositeRoles?: [str]

    compositeRolesRefs?: [RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesRefsItems0]

    compositeRolesSelector?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesSelector

    description?: str

    $import?: bool

    name?: str

    realmId?: str

    realmIdRef?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDRef

    realmIdSelector?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDSelector


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDRef:
    r"""
    Reference to a Client in openidclient to populate clientId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDRefPolicy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDSelector:
    r"""
    Selector for a Client in openidclient to populate clientId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDSelectorPolicy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderClientIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesRefsItems0:
    r"""
    A NamespacedReference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesRefsItems0Policy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesSelector:
    r"""
    Selector for a list of Role in role to populate compositeRoles.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesSelectorPolicy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderCompositeRolesSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDRef:
    r"""
    Reference to a Realm in realm to populate realmId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDRefPolicy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDSelector:
    r"""
    Selector for a Realm in realm to populate realmId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDSelectorPolicy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecForProviderRealmIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        A map representing attributes for the role. In order to add multivalue attributes, use ## to seperate the values. Max length for each value is 255 chars
    clientId : str, default is Undefined, optional
        When specified, this role will be created as a client role attached to the client with the provided ID
    clientIdRef : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDRef, default is Undefined, optional
        client Id ref
    clientIdSelector : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDSelector, default is Undefined, optional
        client Id selector
    compositeRoles : [str], default is Undefined, optional
        When specified, this role will be a composite role, composed of all roles that have an ID present within this list.
    compositeRolesRefs : [RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesRefsItems0], default is Undefined, optional
        References to Role in role to populate compositeRoles.
    compositeRolesSelector : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesSelector, default is Undefined, optional
        composite roles selector
    description : str, default is Undefined, optional
        The description of the role
    $import : bool, default is Undefined, optional
        When true, the role with the specified name is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with roles that Keycloak creates automatically during realm creation, such as the client roles create-client, view-realm, ... for the client realm-management created per realm. Note, that the role will not be removed during destruction if import is true.
    name : str, default is Undefined, optional
        The name of the role
    realmId : str, default is Undefined, optional
        The realm this role exists within.
    realmIdRef : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDRef, default is Undefined, optional
        realm Id ref
    realmIdSelector : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDSelector, default is Undefined, optional
        realm Id selector
    """


    attributes?: {str:str}

    clientId?: str

    clientIdRef?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDRef

    clientIdSelector?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDSelector

    compositeRoles?: [str]

    compositeRolesRefs?: [RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesRefsItems0]

    compositeRolesSelector?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesSelector

    description?: str

    $import?: bool

    name?: str

    realmId?: str

    realmIdRef?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDRef

    realmIdSelector?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDSelector


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDRef:
    r"""
    Reference to a Client in openidclient to populate clientId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDRefPolicy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDSelector:
    r"""
    Selector for a Client in openidclient to populate clientId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDSelectorPolicy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderClientIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesRefsItems0:
    r"""
    A NamespacedReference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesRefsItems0Policy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesSelector:
    r"""
    Selector for a list of Role in role to populate compositeRoles.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesSelectorPolicy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderCompositeRolesSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDRef:
    r"""
    Reference to a Realm in realm to populate realmId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    namespace : str, default is Undefined, optional
        Namespace of the referenced object
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDRefPolicy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDSelector:
    r"""
    Selector for a Realm in realm to populate realmId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    namespace : str, default is Undefined, optional
        Namespace for the selector
    policy : RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    namespace?: str

    policy?: RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDSelectorPolicy


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecInitProviderRealmIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    kind : str, default is Undefined, required
        Kind of the referenced object.
    name : str, default is Undefined, required
        Name of the referenced object.
    """


    kind: str

    name: str


schema RoleKeycloakmCrossplaneIoV1alpha1RoleSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    """


    name: str


schema RoleKeycloakmCrossplaneIoV1alpha1RoleStatus:
    r"""
    RoleStatus defines the observed state of Role.

    Attributes
    ----------
    atProvider : RoleKeycloakmCrossplaneIoV1alpha1RoleStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [RoleKeycloakmCrossplaneIoV1alpha1RoleStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: RoleKeycloakmCrossplaneIoV1alpha1RoleStatusAtProvider

    conditions?: [RoleKeycloakmCrossplaneIoV1alpha1RoleStatusConditionsItems0]

    observedGeneration?: int


schema RoleKeycloakmCrossplaneIoV1alpha1RoleStatusAtProvider:
    r"""
    role keycloakm crossplane io v1alpha1 role status at provider

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        A map representing attributes for the role. In order to add multivalue attributes, use ## to seperate the values. Max length for each value is 255 chars
    clientId : str, default is Undefined, optional
        When specified, this role will be created as a client role attached to the client with the provided ID
    compositeRoles : [str], default is Undefined, optional
        When specified, this role will be a composite role, composed of all roles that have an ID present within this list.
    description : str, default is Undefined, optional
        The description of the role
    id : str, default is Undefined, optional
        id
    $import : bool, default is Undefined, optional
        When true, the role with the specified name is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with roles that Keycloak creates automatically during realm creation, such as the client roles create-client, view-realm, ... for the client realm-management created per realm. Note, that the role will not be removed during destruction if import is true.
    name : str, default is Undefined, optional
        The name of the role
    realmId : str, default is Undefined, optional
        The realm this role exists within.
    """


    attributes?: {str:str}

    clientId?: str

    compositeRoles?: [str]

    description?: str

    id?: str

    $import?: bool

    name?: str

    realmId?: str


schema RoleKeycloakmCrossplaneIoV1alpha1RoleStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


