"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema SecurityGroupRule:
    r"""
    SecurityGroupRule is the Schema for the SecurityGroupRules API. Provides an security group rule resource.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "SecurityGroupRule", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1SecurityGroupRuleStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "SecurityGroupRule" = "SecurityGroupRule"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpec

    status?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleStatus


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpec:
    r"""
    SecurityGroupRuleSpec defines the desired state of SecurityGroupRule

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 security group rule spec for provider

    Attributes
    ----------
    cidrBlocks : [str], default is Undefined, optional
        List of CIDR blocks. Cannot be specified with source_security_group_id or self.
    cidrBlocksRefs : [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksRefsItems0], default is Undefined, optional
        References to VPC in ec2 to populate cidrBlocks.
    cidrBlocksSelector : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksSelector, default is Undefined, optional
        cidr blocks selector
    description : str, default is Undefined, optional
        Description of the rule.
    fromPort : float, default is Undefined, optional
        Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
    ipv6CidrBlocks : [str], default is Undefined, optional
        List of IPv6 CIDR blocks. Cannot be specified with source_security_group_id or self.
    ipv6CidrBlocksRefs : [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksRefsItems0], default is Undefined, optional
        References to VPC in ec2 to populate ipv6CidrBlocks.
    ipv6CidrBlocksSelector : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksSelector, default is Undefined, optional
        ipv6 cidr blocks selector
    prefixListIdRefs : [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDRefsItems0], default is Undefined, optional
        References to ManagedPrefixList in ec2 to populate prefixListIds.
    prefixListIdSelector : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDSelector, default is Undefined, optional
        prefix list Id selector
    prefixListIds : [str], default is Undefined, optional
        List of Prefix List IDs.
    $protocol : str, default is Undefined, optional
        Protocol. If not icmp, icmpv6, tcp, udp, or all use the protocol number
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    securityGroupId : str, default is Undefined, optional
        Security group to apply this rule to.
    securityGroupIdRef : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDRef, default is Undefined, optional
        security group Id ref
    securityGroupIdSelector : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDSelector, default is Undefined, optional
        security group Id selector
    self : bool, default is Undefined, optional
        Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or source_security_group_id.
    sourceSecurityGroupId : str, default is Undefined, optional
        Security group id to allow access to/from, depending on the type. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or self.
    sourceSecurityGroupIdRef : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDRef, default is Undefined, optional
        source security group Id ref
    sourceSecurityGroupIdSelector : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDSelector, default is Undefined, optional
        source security group Id selector
    toPort : float, default is Undefined, optional
        End port (or ICMP code if protocol is "icmp").
    $type : str, default is Undefined, optional
        Type of rule being created. Valid options are ingress (inbound)
        or egress (outbound).
    """


    cidrBlocks?: [str]

    cidrBlocksRefs?: [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksRefsItems0]

    cidrBlocksSelector?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksSelector

    description?: str

    fromPort?: float

    ipv6CidrBlocks?: [str]

    ipv6CidrBlocksRefs?: [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksRefsItems0]

    ipv6CidrBlocksSelector?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksSelector

    prefixListIdRefs?: [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDRefsItems0]

    prefixListIdSelector?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDSelector

    prefixListIds?: [str]

    $protocol?: str

    region: str

    securityGroupId?: str

    securityGroupIdRef?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDRef

    securityGroupIdSelector?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDSelector

    self?: bool

    sourceSecurityGroupId?: str

    sourceSecurityGroupIdRef?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDRef

    sourceSecurityGroupIdSelector?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDSelector

    toPort?: float

    $type?: str


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksSelector:
    r"""
    Selector for a list of VPC in ec2 to populate cidrBlocks.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderCidrBlocksSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksSelector:
    r"""
    Selector for a list of VPC in ec2 to populate ipv6CidrBlocks.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderIPV6CidrBlocksSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDSelector:
    r"""
    Selector for a list of ManagedPrefixList in ec2 to populate prefixListIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderPrefixListIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDRef:
    r"""
    Reference to a SecurityGroup in ec2 to populate securityGroupId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDRefPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDSelector:
    r"""
    Selector for a SecurityGroup in ec2 to populate securityGroupId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSecurityGroupIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDRef:
    r"""
    Reference to a SecurityGroup in ec2 to populate sourceSecurityGroupId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDRefPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDSelector:
    r"""
    Selector for a SecurityGroup in ec2 to populate sourceSecurityGroupId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProviderSourceSecurityGroupIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    cidrBlocks : [str], default is Undefined, optional
        List of CIDR blocks. Cannot be specified with source_security_group_id or self.
    cidrBlocksRefs : [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksRefsItems0], default is Undefined, optional
        References to VPC in ec2 to populate cidrBlocks.
    cidrBlocksSelector : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksSelector, default is Undefined, optional
        cidr blocks selector
    description : str, default is Undefined, optional
        Description of the rule.
    fromPort : float, default is Undefined, optional
        Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
    ipv6CidrBlocks : [str], default is Undefined, optional
        List of IPv6 CIDR blocks. Cannot be specified with source_security_group_id or self.
    ipv6CidrBlocksRefs : [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksRefsItems0], default is Undefined, optional
        References to VPC in ec2 to populate ipv6CidrBlocks.
    ipv6CidrBlocksSelector : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksSelector, default is Undefined, optional
        ipv6 cidr blocks selector
    prefixListIdRefs : [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDRefsItems0], default is Undefined, optional
        References to ManagedPrefixList in ec2 to populate prefixListIds.
    prefixListIdSelector : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDSelector, default is Undefined, optional
        prefix list Id selector
    prefixListIds : [str], default is Undefined, optional
        List of Prefix List IDs.
    $protocol : str, default is Undefined, optional
        Protocol. If not icmp, icmpv6, tcp, udp, or all use the protocol number
    securityGroupId : str, default is Undefined, optional
        Security group to apply this rule to.
    securityGroupIdRef : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDRef, default is Undefined, optional
        security group Id ref
    securityGroupIdSelector : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDSelector, default is Undefined, optional
        security group Id selector
    self : bool, default is Undefined, optional
        Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or source_security_group_id.
    sourceSecurityGroupId : str, default is Undefined, optional
        Security group id to allow access to/from, depending on the type. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or self.
    sourceSecurityGroupIdRef : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDRef, default is Undefined, optional
        source security group Id ref
    sourceSecurityGroupIdSelector : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDSelector, default is Undefined, optional
        source security group Id selector
    toPort : float, default is Undefined, optional
        End port (or ICMP code if protocol is "icmp").
    $type : str, default is Undefined, optional
        Type of rule being created. Valid options are ingress (inbound)
        or egress (outbound).
    """


    cidrBlocks?: [str]

    cidrBlocksRefs?: [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksRefsItems0]

    cidrBlocksSelector?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksSelector

    description?: str

    fromPort?: float

    ipv6CidrBlocks?: [str]

    ipv6CidrBlocksRefs?: [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksRefsItems0]

    ipv6CidrBlocksSelector?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksSelector

    prefixListIdRefs?: [Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDRefsItems0]

    prefixListIdSelector?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDSelector

    prefixListIds?: [str]

    $protocol?: str

    securityGroupId?: str

    securityGroupIdRef?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDRef

    securityGroupIdSelector?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDSelector

    self?: bool

    sourceSecurityGroupId?: str

    sourceSecurityGroupIdRef?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDRef

    sourceSecurityGroupIdSelector?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDSelector

    toPort?: float

    $type?: str


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksSelector:
    r"""
    Selector for a list of VPC in ec2 to populate cidrBlocks.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderCidrBlocksSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksSelector:
    r"""
    Selector for a list of VPC in ec2 to populate ipv6CidrBlocks.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderIPV6CidrBlocksSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDRefsItems0:
    r"""
    A Reference to a named object.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDRefsItems0Policy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDRefsItems0Policy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDRefsItems0Policy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDSelector:
    r"""
    Selector for a list of ManagedPrefixList in ec2 to populate prefixListIds.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderPrefixListIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDRef:
    r"""
    Reference to a SecurityGroup in ec2 to populate securityGroupId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDRefPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDSelector:
    r"""
    Selector for a SecurityGroup in ec2 to populate securityGroupId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSecurityGroupIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDRef:
    r"""
    Reference to a SecurityGroup in ec2 to populate sourceSecurityGroupId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDRefPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDSelector:
    r"""
    Selector for a SecurityGroup in ec2 to populate sourceSecurityGroupId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecInitProviderSourceSecurityGroupIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleStatus:
    r"""
    SecurityGroupRuleStatus defines the observed state of SecurityGroupRule.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1SecurityGroupRuleStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1SecurityGroupRuleStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1SecurityGroupRuleStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1SecurityGroupRuleStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 security group rule status at provider

    Attributes
    ----------
    cidrBlocks : [str], default is Undefined, optional
        List of CIDR blocks. Cannot be specified with source_security_group_id or self.
    description : str, default is Undefined, optional
        Description of the rule.
    fromPort : float, default is Undefined, optional
        Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
    id : str, default is Undefined, optional
        ID of the security group rule.
    ipv6CidrBlocks : [str], default is Undefined, optional
        List of IPv6 CIDR blocks. Cannot be specified with source_security_group_id or self.
    prefixListIds : [str], default is Undefined, optional
        List of Prefix List IDs.
    $protocol : str, default is Undefined, optional
        Protocol. If not icmp, icmpv6, tcp, udp, or all use the protocol number
    securityGroupId : str, default is Undefined, optional
        Security group to apply this rule to.
    securityGroupRuleId : str, default is Undefined, optional
        If the aws_security_group_rule resource has a single source or destination then this is the AWS Security Group Rule resource ID. Otherwise it is empty.
    self : bool, default is Undefined, optional
        Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or source_security_group_id.
    sourceSecurityGroupId : str, default is Undefined, optional
        Security group id to allow access to/from, depending on the type. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or self.
    toPort : float, default is Undefined, optional
        End port (or ICMP code if protocol is "icmp").
    $type : str, default is Undefined, optional
        Type of rule being created. Valid options are ingress (inbound)
        or egress (outbound).
    """


    cidrBlocks?: [str]

    description?: str

    fromPort?: float

    id?: str

    ipv6CidrBlocks?: [str]

    prefixListIds?: [str]

    $protocol?: str

    securityGroupId?: str

    securityGroupRuleId?: str

    self?: bool

    sourceSecurityGroupId?: str

    toPort?: float

    $type?: str


schema Ec2AwsUpboundIoV1beta1SecurityGroupRuleStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


