"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VPC:
    r"""
    VPC is the Schema for the VPCs API. Provides a VPC resource.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VPC", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsUpboundIoV1beta1VPCSpec, default is Undefined, required
        spec
    status : Ec2AwsUpboundIoV1beta1VPCStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.upbound.io/v1beta1" = "ec2.aws.upbound.io/v1beta1"

    kind: "VPC" = "VPC"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsUpboundIoV1beta1VPCSpec

    status?: Ec2AwsUpboundIoV1beta1VPCStatus


schema Ec2AwsUpboundIoV1beta1VPCSpec:
    r"""
    VPCSpec defines the desired state of VPC

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Ec2AwsUpboundIoV1beta1VPCSpecForProvider, default is Undefined, required
        for provider
    initProvider : Ec2AwsUpboundIoV1beta1VPCSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Ec2AwsUpboundIoV1beta1VPCSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsUpboundIoV1beta1VPCSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsUpboundIoV1beta1VPCSpecForProvider

    initProvider?: Ec2AwsUpboundIoV1beta1VPCSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Ec2AwsUpboundIoV1beta1VPCSpecProviderConfigRef

    publishConnectionDetailsTo?: Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsUpboundIoV1beta1VPCSpecWriteConnectionSecretToRef


schema Ec2AwsUpboundIoV1beta1VPCSpecForProvider:
    r"""
    ec2 aws upbound io v1beta1 v p c spec for provider

    Attributes
    ----------
    assignGeneratedIpv6CidrBlock : bool, default is Undefined, optional
        Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is false. Conflicts with ipv6_ipam_pool_id
    cidrBlock : str, default is Undefined, optional
        The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using ipv4_netmask_length.
    enableDnsHostnames : bool, default is Undefined, optional
        A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
    enableDnsSupport : bool, default is Undefined, optional
        A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
    enableNetworkAddressUsageMetrics : bool, default is Undefined, optional
        Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
    instanceTenancy : str, default is Undefined, optional
        A tenancy option for instances launched into the VPC. Default is default, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is dedicated, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
    ipv4IpamPoolId : str, default is Undefined, optional
        The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
    ipv4IpamPoolIdRef : Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDRef, default is Undefined, optional
        ipv4 ipam pool Id ref
    ipv4IpamPoolIdSelector : Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDSelector, default is Undefined, optional
        ipv4 ipam pool Id selector
    ipv4NetmaskLength : float, default is Undefined, optional
        The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id.
    ipv6CidrBlock : str, default is Undefined, optional
        IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using ipv6_netmask_length.
    ipv6CidrBlockNetworkBorderGroup : str, default is Undefined, optional
        By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
    ipv6IpamPoolId : str, default is Undefined, optional
        IPAM Pool ID for a IPv6 pool. Conflicts with assign_generated_ipv6_cidr_block.
    ipv6NetmaskLength : float, default is Undefined, optional
        Netmask length to request from IPAM Pool. Conflicts with ipv6_cidr_block. This can be omitted if IPAM pool as a allocation_default_netmask_length set. Valid values are from 44 to 60 in increments of 4.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    assignGeneratedIpv6CidrBlock?: bool

    cidrBlock?: str

    enableDnsHostnames?: bool

    enableDnsSupport?: bool

    enableNetworkAddressUsageMetrics?: bool

    instanceTenancy?: str

    ipv4IpamPoolId?: str

    ipv4IpamPoolIdRef?: Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDRef

    ipv4IpamPoolIdSelector?: Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDSelector

    ipv4NetmaskLength?: float

    ipv6CidrBlock?: str

    ipv6CidrBlockNetworkBorderGroup?: str

    ipv6IpamPoolId?: str

    ipv6NetmaskLength?: float

    region: str

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDRef:
    r"""
    Reference to a VPCIpamPool in ec2 to populate ipv4IpamPoolId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDSelector:
    r"""
    Selector for a VPCIpamPool in ec2 to populate ipv4IpamPoolId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPCSpecForProviderIPV4IpamPoolIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    assignGeneratedIpv6CidrBlock : bool, default is Undefined, optional
        Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is false. Conflicts with ipv6_ipam_pool_id
    cidrBlock : str, default is Undefined, optional
        The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using ipv4_netmask_length.
    enableDnsHostnames : bool, default is Undefined, optional
        A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
    enableDnsSupport : bool, default is Undefined, optional
        A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
    enableNetworkAddressUsageMetrics : bool, default is Undefined, optional
        Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
    instanceTenancy : str, default is Undefined, optional
        A tenancy option for instances launched into the VPC. Default is default, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is dedicated, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
    ipv4IpamPoolId : str, default is Undefined, optional
        The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
    ipv4IpamPoolIdRef : Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDRef, default is Undefined, optional
        ipv4 ipam pool Id ref
    ipv4IpamPoolIdSelector : Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDSelector, default is Undefined, optional
        ipv4 ipam pool Id selector
    ipv4NetmaskLength : float, default is Undefined, optional
        The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id.
    ipv6CidrBlock : str, default is Undefined, optional
        IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using ipv6_netmask_length.
    ipv6CidrBlockNetworkBorderGroup : str, default is Undefined, optional
        By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
    ipv6IpamPoolId : str, default is Undefined, optional
        IPAM Pool ID for a IPv6 pool. Conflicts with assign_generated_ipv6_cidr_block.
    ipv6NetmaskLength : float, default is Undefined, optional
        Netmask length to request from IPAM Pool. Conflicts with ipv6_cidr_block. This can be omitted if IPAM pool as a allocation_default_netmask_length set. Valid values are from 44 to 60 in increments of 4.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    assignGeneratedIpv6CidrBlock?: bool

    cidrBlock?: str

    enableDnsHostnames?: bool

    enableDnsSupport?: bool

    enableNetworkAddressUsageMetrics?: bool

    instanceTenancy?: str

    ipv4IpamPoolId?: str

    ipv4IpamPoolIdRef?: Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDRef

    ipv4IpamPoolIdSelector?: Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDSelector

    ipv4NetmaskLength?: float

    ipv6CidrBlock?: str

    ipv6CidrBlockNetworkBorderGroup?: str

    ipv6IpamPoolId?: str

    ipv6NetmaskLength?: float

    tags?: {str:str}


schema Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDRef:
    r"""
    Reference to a VPCIpamPool in ec2 to populate ipv4IpamPoolId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDSelector:
    r"""
    Selector for a VPCIpamPool in ec2 to populate ipv4IpamPoolId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDSelectorPolicy


schema Ec2AwsUpboundIoV1beta1VPCSpecInitProviderIPV4IpamPoolIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCSpecProviderConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsUpboundIoV1beta1VPCSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsUpboundIoV1beta1VPCSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsUpboundIoV1beta1VPCStatus:
    r"""
    VPCStatus defines the observed state of VPC.

    Attributes
    ----------
    atProvider : Ec2AwsUpboundIoV1beta1VPCStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsUpboundIoV1beta1VPCStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Ec2AwsUpboundIoV1beta1VPCStatusAtProvider

    conditions?: [Ec2AwsUpboundIoV1beta1VPCStatusConditionsItems0]

    observedGeneration?: int


schema Ec2AwsUpboundIoV1beta1VPCStatusAtProvider:
    r"""
    ec2 aws upbound io v1beta1 v p c status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        Amazon Resource Name (ARN) of VPC
    assignGeneratedIpv6CidrBlock : bool, default is Undefined, optional
        Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is false. Conflicts with ipv6_ipam_pool_id
    cidrBlock : str, default is Undefined, optional
        The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using ipv4_netmask_length.
    defaultNetworkAclId : str, default is Undefined, optional
        The ID of the network ACL created by default on VPC creation
    defaultRouteTableId : str, default is Undefined, optional
        The ID of the route table created by default on VPC creation
    defaultSecurityGroupId : str, default is Undefined, optional
        The ID of the security group created by default on VPC creation
    dhcpOptionsId : str, default is Undefined, optional
        DHCP options id of the desired VPC.
    enableDnsHostnames : bool, default is Undefined, optional
        A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
    enableDnsSupport : bool, default is Undefined, optional
        A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
    enableNetworkAddressUsageMetrics : bool, default is Undefined, optional
        Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
    id : str, default is Undefined, optional
        The ID of the VPC
    instanceTenancy : str, default is Undefined, optional
        A tenancy option for instances launched into the VPC. Default is default, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is dedicated, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
    ipv4IpamPoolId : str, default is Undefined, optional
        The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
    ipv4NetmaskLength : float, default is Undefined, optional
        The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id.
    ipv6AssociationId : str, default is Undefined, optional
        The association ID for the IPv6 CIDR block.
    ipv6CidrBlock : str, default is Undefined, optional
        IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using ipv6_netmask_length.
    ipv6CidrBlockNetworkBorderGroup : str, default is Undefined, optional
        By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
    ipv6IpamPoolId : str, default is Undefined, optional
        IPAM Pool ID for a IPv6 pool. Conflicts with assign_generated_ipv6_cidr_block.
    ipv6NetmaskLength : float, default is Undefined, optional
        Netmask length to request from IPAM Pool. Conflicts with ipv6_cidr_block. This can be omitted if IPAM pool as a allocation_default_netmask_length set. Valid values are from 44 to 60 in increments of 4.
    mainRouteTableId : str, default is Undefined, optional
        The ID of the main route table associated with
        this VPC. Note that you can change a VPC's main route table by using an
        aws_main_route_table_association.
    ownerId : str, default is Undefined, optional
        The ID of the AWS account that owns the VPC.
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    """


    arn?: str

    assignGeneratedIpv6CidrBlock?: bool

    cidrBlock?: str

    defaultNetworkAclId?: str

    defaultRouteTableId?: str

    defaultSecurityGroupId?: str

    dhcpOptionsId?: str

    enableDnsHostnames?: bool

    enableDnsSupport?: bool

    enableNetworkAddressUsageMetrics?: bool

    id?: str

    instanceTenancy?: str

    ipv4IpamPoolId?: str

    ipv4NetmaskLength?: float

    ipv6AssociationId?: str

    ipv6CidrBlock?: str

    ipv6CidrBlockNetworkBorderGroup?: str

    ipv6IpamPoolId?: str

    ipv6NetmaskLength?: float

    mainRouteTableId?: str

    ownerId?: str

    tags?: {str:str}

    tagsAll?: {str:str}


schema Ec2AwsUpboundIoV1beta1VPCStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


