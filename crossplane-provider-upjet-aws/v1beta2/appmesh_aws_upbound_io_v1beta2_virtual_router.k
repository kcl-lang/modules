"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VirtualRouter:
    r"""
    VirtualRouter is the Schema for the VirtualRouters API. Provides an AWS App Mesh virtual router resource.

    Attributes
    ----------
    apiVersion : str, default is "appmesh.aws.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VirtualRouter", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AppmeshAwsUpboundIoV1beta2VirtualRouterSpec, default is Undefined, required
        spec
    status : AppmeshAwsUpboundIoV1beta2VirtualRouterStatus, default is Undefined, optional
        status
    """


    apiVersion: "appmesh.aws.upbound.io/v1beta2" = "appmesh.aws.upbound.io/v1beta2"

    kind: "VirtualRouter" = "VirtualRouter"

    metadata?: v1.ObjectMeta

    spec: AppmeshAwsUpboundIoV1beta2VirtualRouterSpec

    status?: AppmeshAwsUpboundIoV1beta2VirtualRouterStatus


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpec:
    r"""
    VirtualRouterSpec defines the desired state of VirtualRouter

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProvider, default is Undefined, required
        for provider
    initProvider : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProvider

    initProvider?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecProviderConfigRef

    publishConnectionDetailsTo?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecWriteConnectionSecretToRef


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProvider:
    r"""
    appmesh aws upbound io v1beta2 virtual router spec for provider

    Attributes
    ----------
    meshName : str, default is Undefined, optional
        Name of the service mesh in which to create the virtual router. Must be between 1 and 255 characters in length.
    meshNameRef : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameRef, default is Undefined, optional
        mesh name ref
    meshNameSelector : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameSelector, default is Undefined, optional
        mesh name selector
    meshOwner : str, default is Undefined, optional
        AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    name : str, default is Undefined, optional
        Name to use for the virtual router. Must be between 1 and 255 characters in length.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    spec : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderSpec, default is Undefined, optional
        spec
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    meshName?: str

    meshNameRef?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameRef

    meshNameSelector?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameSelector

    meshOwner?: str

    name?: str

    region: str

    spec?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderSpec

    tags?: {str:str}


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameRef:
    r"""
    Reference to a Mesh in appmesh to populate meshName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameSelector:
    r"""
    Selector for a Mesh in appmesh to populate meshName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameSelectorPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderMeshNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderSpec:
    r"""
    Virtual router specification to apply.

    Attributes
    ----------
    listener : [AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderSpecListenerItems0], default is Undefined, optional
        configuration block to the spec argument.
    """


    listener?: [AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderSpecListenerItems0]


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderSpecListenerItems0:
    r"""
    appmesh aws upbound io v1beta2 virtual router spec for provider spec listener items0

    Attributes
    ----------
    portMapping : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderSpecListenerItems0PortMapping, default is Undefined, optional
        port mapping
    """


    portMapping?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderSpecListenerItems0PortMapping


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecForProviderSpecListenerItems0PortMapping:
    r"""
    Port mapping information for the listener.

    Attributes
    ----------
    port : float, default is Undefined, optional
        Port used for the port mapping.
    $protocol : str, default is Undefined, optional
        Protocol used for the port mapping. Valid values are http,http2, tcp and grpc.
    """


    port?: float

    $protocol?: str


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    meshName : str, default is Undefined, optional
        Name of the service mesh in which to create the virtual router. Must be between 1 and 255 characters in length.
    meshNameRef : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameRef, default is Undefined, optional
        mesh name ref
    meshNameSelector : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameSelector, default is Undefined, optional
        mesh name selector
    meshOwner : str, default is Undefined, optional
        AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    name : str, default is Undefined, optional
        Name to use for the virtual router. Must be between 1 and 255 characters in length.
    spec : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderSpec, default is Undefined, optional
        spec
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    meshName?: str

    meshNameRef?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameRef

    meshNameSelector?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameSelector

    meshOwner?: str

    name?: str

    spec?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderSpec

    tags?: {str:str}


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameRef:
    r"""
    Reference to a Mesh in appmesh to populate meshName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameSelector:
    r"""
    Selector for a Mesh in appmesh to populate meshName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameSelectorPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderMeshNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderSpec:
    r"""
    Virtual router specification to apply.

    Attributes
    ----------
    listener : [AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderSpecListenerItems0], default is Undefined, optional
        configuration block to the spec argument.
    """


    listener?: [AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderSpecListenerItems0]


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderSpecListenerItems0:
    r"""
    appmesh aws upbound io v1beta2 virtual router spec init provider spec listener items0

    Attributes
    ----------
    portMapping : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderSpecListenerItems0PortMapping, default is Undefined, optional
        port mapping
    """


    portMapping?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderSpecListenerItems0PortMapping


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecInitProviderSpecListenerItems0PortMapping:
    r"""
    Port mapping information for the listener.

    Attributes
    ----------
    port : float, default is Undefined, optional
        Port used for the port mapping.
    $protocol : str, default is Undefined, optional
        Protocol used for the port mapping. Valid values are http,http2, tcp and grpc.
    """


    port?: float

    $protocol?: str


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecProviderConfigRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsToConfigRef

    metadata?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsToMetadata

    name: str


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsToConfigRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema AppmeshAwsUpboundIoV1beta2VirtualRouterSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema AppmeshAwsUpboundIoV1beta2VirtualRouterStatus:
    r"""
    VirtualRouterStatus defines the observed state of VirtualRouter.

    Attributes
    ----------
    atProvider : AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [AppmeshAwsUpboundIoV1beta2VirtualRouterStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProvider

    conditions?: [AppmeshAwsUpboundIoV1beta2VirtualRouterStatusConditionsItems0]

    observedGeneration?: int


schema AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProvider:
    r"""
    appmesh aws upbound io v1beta2 virtual router status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN of the virtual router.
    createdDate : str, default is Undefined, optional
        Creation date of the virtual router.
    id : str, default is Undefined, optional
        ID of the virtual router.
    lastUpdatedDate : str, default is Undefined, optional
        Last update date of the virtual router.
    meshName : str, default is Undefined, optional
        Name of the service mesh in which to create the virtual router. Must be between 1 and 255 characters in length.
    meshOwner : str, default is Undefined, optional
        AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    name : str, default is Undefined, optional
        Name to use for the virtual router. Must be between 1 and 255 characters in length.
    resourceOwner : str, default is Undefined, optional
        Resource owner's AWS account ID.
    spec : AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProviderSpec, default is Undefined, optional
        spec
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    """


    arn?: str

    createdDate?: str

    id?: str

    lastUpdatedDate?: str

    meshName?: str

    meshOwner?: str

    name?: str

    resourceOwner?: str

    spec?: AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProviderSpec

    tags?: {str:str}

    tagsAll?: {str:str}


schema AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProviderSpec:
    r"""
    Virtual router specification to apply.

    Attributes
    ----------
    listener : [AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProviderSpecListenerItems0], default is Undefined, optional
        configuration block to the spec argument.
    """


    listener?: [AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProviderSpecListenerItems0]


schema AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProviderSpecListenerItems0:
    r"""
    appmesh aws upbound io v1beta2 virtual router status at provider spec listener items0

    Attributes
    ----------
    portMapping : AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProviderSpecListenerItems0PortMapping, default is Undefined, optional
        port mapping
    """


    portMapping?: AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProviderSpecListenerItems0PortMapping


schema AppmeshAwsUpboundIoV1beta2VirtualRouterStatusAtProviderSpecListenerItems0PortMapping:
    r"""
    Port mapping information for the listener.

    Attributes
    ----------
    port : float, default is Undefined, optional
        Port used for the port mapping.
    $protocol : str, default is Undefined, optional
        Protocol used for the port mapping. Valid values are http,http2, tcp and grpc.
    """


    port?: float

    $protocol?: str


schema AppmeshAwsUpboundIoV1beta2VirtualRouterStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


