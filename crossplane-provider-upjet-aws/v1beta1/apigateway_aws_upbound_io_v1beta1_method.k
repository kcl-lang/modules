"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Method:
    r"""
    Method is the Schema for the Methods API. Provides a HTTP Method for an API Gateway Resource.

    Attributes
    ----------
    apiVersion : str, default is "apigateway.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Method", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ApigatewayAwsUpboundIoV1beta1MethodSpec, default is Undefined, required
        spec
    status : ApigatewayAwsUpboundIoV1beta1MethodStatus, default is Undefined, optional
        status
    """


    apiVersion: "apigateway.aws.upbound.io/v1beta1" = "apigateway.aws.upbound.io/v1beta1"

    kind: "Method" = "Method"

    metadata?: v1.ObjectMeta

    spec: ApigatewayAwsUpboundIoV1beta1MethodSpec

    status?: ApigatewayAwsUpboundIoV1beta1MethodStatus


schema ApigatewayAwsUpboundIoV1beta1MethodSpec:
    r"""
    MethodSpec defines the desired state of Method

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ApigatewayAwsUpboundIoV1beta1MethodSpecForProvider, default is Undefined, required
        for provider
    initProvider : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ApigatewayAwsUpboundIoV1beta1MethodSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ApigatewayAwsUpboundIoV1beta1MethodSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ApigatewayAwsUpboundIoV1beta1MethodSpecForProvider

    initProvider?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ApigatewayAwsUpboundIoV1beta1MethodSpecProviderConfigRef

    publishConnectionDetailsTo?: ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ApigatewayAwsUpboundIoV1beta1MethodSpecWriteConnectionSecretToRef


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProvider:
    r"""
    apigateway aws upbound io v1beta1 method spec for provider

    Attributes
    ----------
    apiKeyRequired : bool, default is Undefined, optional
        Specify if the method requires an API key
    authorization : str, default is Undefined, optional
        Type of authorization used for the method (NONE, CUSTOM, AWS_IAM, COGNITO_USER_POOLS)
    authorizationScopes : [str], default is Undefined, optional
        Authorization scopes used when the authorization is COGNITO_USER_POOLS
    authorizerId : str, default is Undefined, optional
        Authorizer id to be used when the authorization is CUSTOM or COGNITO_USER_POOLS
    authorizerIdRef : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDRef, default is Undefined, optional
        authorizer Id ref
    authorizerIdSelector : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDSelector, default is Undefined, optional
        authorizer Id selector
    httpMethod : str, default is Undefined, optional
        HTTP Method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY)
    operationName : str, default is Undefined, optional
        Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    requestModels : {str:str}, default is Undefined, optional
        Map of the API models used for the request's content type
        where key is the content type (e.g., application/json)
        and value is either Error, Empty (built-in models) or aws_api_gateway_model's name.
    requestParameters : {str:bool}, default is Undefined, optional
        Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (true) or optional (false).
        For example: request_parameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true} would define that the header X-Some-Header and the query string some-query-param must be provided in the request.
    requestValidatorId : str, default is Undefined, optional
        ID of a aws_api_gateway_request_validator
    resourceId : str, default is Undefined, optional
        API resource ID
    resourceIdRef : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDRef, default is Undefined, optional
        resource Id ref
    resourceIdSelector : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDSelector, default is Undefined, optional
        resource Id selector
    restApiId : str, default is Undefined, optional
        ID of the associated REST API
    restApiIdRef : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDRef, default is Undefined, optional
        rest Api Id ref
    restApiIdSelector : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDSelector, default is Undefined, optional
        rest Api Id selector
    """


    apiKeyRequired?: bool

    authorization?: str

    authorizationScopes?: [str]

    authorizerId?: str

    authorizerIdRef?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDRef

    authorizerIdSelector?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDSelector

    httpMethod?: str

    operationName?: str

    region: str

    requestModels?: {str:str}

    requestParameters?: {str:bool}

    requestValidatorId?: str

    resourceId?: str

    resourceIdRef?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDRef

    resourceIdSelector?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDSelector

    restApiId?: str

    restApiIdRef?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDRef

    restApiIdSelector?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDSelector


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDRef:
    r"""
    Reference to a Authorizer in apigateway to populate authorizerId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDSelector:
    r"""
    Selector for a Authorizer in apigateway to populate authorizerId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderAuthorizerIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDRef:
    r"""
    Reference to a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDSelector:
    r"""
    Selector for a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderResourceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDRef:
    r"""
    Reference to a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDSelector:
    r"""
    Selector for a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecForProviderRestAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    apiKeyRequired : bool, default is Undefined, optional
        Specify if the method requires an API key
    authorization : str, default is Undefined, optional
        Type of authorization used for the method (NONE, CUSTOM, AWS_IAM, COGNITO_USER_POOLS)
    authorizationScopes : [str], default is Undefined, optional
        Authorization scopes used when the authorization is COGNITO_USER_POOLS
    authorizerId : str, default is Undefined, optional
        Authorizer id to be used when the authorization is CUSTOM or COGNITO_USER_POOLS
    authorizerIdRef : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDRef, default is Undefined, optional
        authorizer Id ref
    authorizerIdSelector : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDSelector, default is Undefined, optional
        authorizer Id selector
    httpMethod : str, default is Undefined, optional
        HTTP Method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY)
    operationName : str, default is Undefined, optional
        Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
    requestModels : {str:str}, default is Undefined, optional
        Map of the API models used for the request's content type
        where key is the content type (e.g., application/json)
        and value is either Error, Empty (built-in models) or aws_api_gateway_model's name.
    requestParameters : {str:bool}, default is Undefined, optional
        Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (true) or optional (false).
        For example: request_parameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true} would define that the header X-Some-Header and the query string some-query-param must be provided in the request.
    requestValidatorId : str, default is Undefined, optional
        ID of a aws_api_gateway_request_validator
    resourceId : str, default is Undefined, optional
        API resource ID
    resourceIdRef : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDRef, default is Undefined, optional
        resource Id ref
    resourceIdSelector : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDSelector, default is Undefined, optional
        resource Id selector
    restApiId : str, default is Undefined, optional
        ID of the associated REST API
    restApiIdRef : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDRef, default is Undefined, optional
        rest Api Id ref
    restApiIdSelector : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDSelector, default is Undefined, optional
        rest Api Id selector
    """


    apiKeyRequired?: bool

    authorization?: str

    authorizationScopes?: [str]

    authorizerId?: str

    authorizerIdRef?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDRef

    authorizerIdSelector?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDSelector

    httpMethod?: str

    operationName?: str

    requestModels?: {str:str}

    requestParameters?: {str:bool}

    requestValidatorId?: str

    resourceId?: str

    resourceIdRef?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDRef

    resourceIdSelector?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDSelector

    restApiId?: str

    restApiIdRef?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDRef

    restApiIdSelector?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDSelector


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDRef:
    r"""
    Reference to a Authorizer in apigateway to populate authorizerId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDSelector:
    r"""
    Selector for a Authorizer in apigateway to populate authorizerId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderAuthorizerIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDRef:
    r"""
    Reference to a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDSelector:
    r"""
    Selector for a Resource in apigateway to populate resourceId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderResourceIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDRef:
    r"""
    Reference to a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDRefPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDSelector:
    r"""
    Selector for a RestAPI in apigateway to populate restApiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDSelectorPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecInitProviderRestAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecProviderConfigRefPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsToConfigRef

    metadata?: ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsToMetadata

    name: str


schema ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsToConfigRefPolicy


schema ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApigatewayAwsUpboundIoV1beta1MethodSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ApigatewayAwsUpboundIoV1beta1MethodSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ApigatewayAwsUpboundIoV1beta1MethodStatus:
    r"""
    MethodStatus defines the observed state of Method.

    Attributes
    ----------
    atProvider : ApigatewayAwsUpboundIoV1beta1MethodStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ApigatewayAwsUpboundIoV1beta1MethodStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ApigatewayAwsUpboundIoV1beta1MethodStatusAtProvider

    conditions?: [ApigatewayAwsUpboundIoV1beta1MethodStatusConditionsItems0]

    observedGeneration?: int


schema ApigatewayAwsUpboundIoV1beta1MethodStatusAtProvider:
    r"""
    apigateway aws upbound io v1beta1 method status at provider

    Attributes
    ----------
    apiKeyRequired : bool, default is Undefined, optional
        Specify if the method requires an API key
    authorization : str, default is Undefined, optional
        Type of authorization used for the method (NONE, CUSTOM, AWS_IAM, COGNITO_USER_POOLS)
    authorizationScopes : [str], default is Undefined, optional
        Authorization scopes used when the authorization is COGNITO_USER_POOLS
    authorizerId : str, default is Undefined, optional
        Authorizer id to be used when the authorization is CUSTOM or COGNITO_USER_POOLS
    httpMethod : str, default is Undefined, optional
        HTTP Method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY)
    id : str, default is Undefined, optional
        id
    operationName : str, default is Undefined, optional
        Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
    requestModels : {str:str}, default is Undefined, optional
        Map of the API models used for the request's content type
        where key is the content type (e.g., application/json)
        and value is either Error, Empty (built-in models) or aws_api_gateway_model's name.
    requestParameters : {str:bool}, default is Undefined, optional
        Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (true) or optional (false).
        For example: request_parameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true} would define that the header X-Some-Header and the query string some-query-param must be provided in the request.
    requestValidatorId : str, default is Undefined, optional
        ID of a aws_api_gateway_request_validator
    resourceId : str, default is Undefined, optional
        API resource ID
    restApiId : str, default is Undefined, optional
        ID of the associated REST API
    """


    apiKeyRequired?: bool

    authorization?: str

    authorizationScopes?: [str]

    authorizerId?: str

    httpMethod?: str

    id?: str

    operationName?: str

    requestModels?: {str:str}

    requestParameters?: {str:bool}

    requestValidatorId?: str

    resourceId?: str

    restApiId?: str


schema ApigatewayAwsUpboundIoV1beta1MethodStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


