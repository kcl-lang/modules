"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Client:
    r"""
    Client is the Schema for the Clients API.

    Attributes
    ----------
    apiVersion : str, default is "samlclient.keycloak.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Client", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpec, default is Undefined, required
        spec
    status : SamlclientKeycloakCrossplaneIoV1alpha1ClientStatus, default is Undefined, optional
        status
    """


    apiVersion: "samlclient.keycloak.crossplane.io/v1alpha1" = "samlclient.keycloak.crossplane.io/v1alpha1"

    kind: "Client" = "Client"

    metadata?: v1.ObjectMeta

    spec: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpec

    status?: SamlclientKeycloakCrossplaneIoV1alpha1ClientStatus


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpec:
    r"""
    ClientSpec defines the desired state of Client

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProvider, default is Undefined, required
        for provider
    initProvider : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    writeConnectionSecretToRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProvider

    initProvider?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecProviderConfigRef

    writeConnectionSecretToRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecWriteConnectionSecretToRef


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProvider:
    r"""
    samlclient keycloak crossplane io v1alpha1 client spec for provider

    Attributes
    ----------
    alwaysDisplayInConsole : bool, default is Undefined, optional
        Always list this client in the Account UI, even if the user does not have an active session.
    assertionConsumerPostUrl : str, default is Undefined, optional
        SAML POST Binding URL for the client's assertion consumer service (login responses).
    assertionConsumerRedirectUrl : str, default is Undefined, optional
        SAML Redirect Binding URL for the client's assertion consumer service (login responses).
    authenticationFlowBindingOverrides : [SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0], default is Undefined, optional
        Override realm authentication flow bindings
    baseUrl : str, default is Undefined, optional
        When specified, this URL will be used whenever Keycloak needs to link to this client.
    canonicalizationMethod : str, default is Undefined, optional
        The Canonicalization Method for XML signatures. Should be one of "EXCLUSIVE", "EXCLUSIVE_WITH_COMMENTS", "INCLUSIVE", or "INCLUSIVE_WITH_COMMENTS". Defaults to "EXCLUSIVE".
    clientId : str, default is Undefined, optional
        The unique ID of this client, referenced in the URI during authentication and in issued tokens.
    clientIdRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDRef, default is Undefined, optional
        client Id ref
    clientIdSelector : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDSelector, default is Undefined, optional
        client Id selector
    clientSignatureRequired : bool, default is Undefined, optional
        When true, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via signing_certificate and signing_private_key. Defaults to true.
    consentRequired : bool, default is Undefined, optional
        When true, users have to consent to client access. Defaults to false.
    description : str, default is Undefined, optional
        The description of this client in the GUI.
    enabled : bool, default is Undefined, optional
        When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
    encryptAssertions : bool, default is Undefined, optional
        When true, the SAML assertions will be encrypted by Keycloak using the client's public key. Defaults to false.
    encryptionCertificateSecretRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderEncryptionCertificateSecretRef, default is Undefined, optional
        encryption certificate secret ref
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as s may conflict with top-level configuration attributes in future provider updates.
    forceNameIdFormat : bool, default is Undefined, optional
        Ignore requested NameID subject format and use the one defined in name_id_format instead. Defaults to false.
    forcePostBinding : bool, default is Undefined, optional
        When true, Keycloak will always respond to an authentication request via the SAML POST Binding. Defaults to true.
    frontChannelLogout : bool, default is Undefined, optional
        When true, this client will require a browser redirect in order to perform a logout. Defaults to true.
    fullScopeAllowed : bool, default is Undefined, optional
        - Allow to include all roles mappings in the access token
    idpInitiatedSsoRelayState : str, default is Undefined, optional
        Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
    idpInitiatedSsoUrlName : str, default is Undefined, optional
        URL fragment name to reference client when you want to do IDP Initiated SSO.
    includeAuthnStatement : bool, default is Undefined, optional
        When true, an AuthnStatement will be included in the SAML response. Defaults to true.
    loginTheme : str, default is Undefined, optional
        The login theme of this client.
    logoutServicePostBindingUrl : str, default is Undefined, optional
        SAML POST Binding URL for the client's single logout service.
    logoutServiceRedirectBindingUrl : str, default is Undefined, optional
        SAML Redirect Binding URL for the client's single logout service.
    masterSamlProcessingUrl : str, default is Undefined, optional
        When specified, this URL will be used for all SAML requests.
    name : str, default is Undefined, optional
        The display name of this client in the GUI.
    nameIdFormat : str, default is Undefined, optional
        Sets the Name ID format for the subject.
    realmId : str, default is Undefined, optional
        The realm this client is attached to.
    realmIdRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRef, default is Undefined, optional
        realm Id ref
    realmIdSelector : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelector, default is Undefined, optional
        realm Id selector
    rootUrl : str, default is Undefined, optional
        When specified, this value is prepended to all relative URLs.
    signAssertions : bool, default is Undefined, optional
        When true, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. Defaults to false.
    signDocuments : bool, default is Undefined, optional
        When true, the SAML document will be signed by Keycloak using the realm's private key. Defaults to true.
    signatureAlgorithm : str, default is Undefined, optional
        The signature algorithm used to sign documents. Should be one of "RSA_SHA1", "RSA_SHA256", "RSA_SHA256_MGF1, "RSA_SHA512", "RSA_SHA512_MGF1" or "DSA_SHA1".
    signatureKeyName : str, default is Undefined, optional
        The value of the KeyName element within the signed SAML document. Should be one of "NONE", "KEY_ID", or "CERT_SUBJECT". Defaults to "KEY_ID".
    signingCertificateSecretRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderSigningCertificateSecretRef, default is Undefined, optional
        signing certificate secret ref
    signingPrivateKeySecretRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderSigningPrivateKeySecretRef, default is Undefined, optional
        signing private key secret ref
    validRedirectUris : [str], default is Undefined, optional
        When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
    """


    alwaysDisplayInConsole?: bool

    assertionConsumerPostUrl?: str

    assertionConsumerRedirectUrl?: str

    authenticationFlowBindingOverrides?: [SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0]

    baseUrl?: str

    canonicalizationMethod?: str

    clientId?: str

    clientIdRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDRef

    clientIdSelector?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDSelector

    clientSignatureRequired?: bool

    consentRequired?: bool

    description?: str

    enabled?: bool

    encryptAssertions?: bool

    encryptionCertificateSecretRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderEncryptionCertificateSecretRef

    extraConfig?: {str:str}

    forceNameIdFormat?: bool

    forcePostBinding?: bool

    frontChannelLogout?: bool

    fullScopeAllowed?: bool

    idpInitiatedSsoRelayState?: str

    idpInitiatedSsoUrlName?: str

    includeAuthnStatement?: bool

    loginTheme?: str

    logoutServicePostBindingUrl?: str

    logoutServiceRedirectBindingUrl?: str

    masterSamlProcessingUrl?: str

    name?: str

    nameIdFormat?: str

    realmId?: str

    realmIdRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRef

    realmIdSelector?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelector

    rootUrl?: str

    signAssertions?: bool

    signDocuments?: bool

    signatureAlgorithm?: str

    signatureKeyName?: str

    signingCertificateSecretRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderSigningCertificateSecretRef

    signingPrivateKeySecretRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderSigningPrivateKeySecretRef

    validRedirectUris?: [str]


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderAuthenticationFlowBindingOverridesItems0:
    r"""
    samlclient keycloak crossplane io v1alpha1 client spec for provider authentication flow binding overrides items0

    Attributes
    ----------
    browserId : str, default is Undefined, optional
        Browser flow id, (flow needs to exist)
    directGrantId : str, default is Undefined, optional
        Direct grant flow id (flow needs to exist)
    """


    browserId?: str

    directGrantId?: str


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDRef:
    r"""
    Reference to a Client in openidclient to populate clientId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDRefPolicy


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDSelector:
    r"""
    Selector for a Client in openidclient to populate clientId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDSelectorPolicy


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderClientIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderEncryptionCertificateSecretRef:
    r"""
    If assertions for the client are encrypted, this certificate will be used for encryption.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRef:
    r"""
    Reference to a Realm in realm to populate realmId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRefPolicy


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelector:
    r"""
    Selector for a Realm in realm to populate realmId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelectorPolicy


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderRealmIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderSigningCertificateSecretRef:
    r"""
    If documents or assertions from the client are signed, this certificate will be used to verify the signature.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecForProviderSigningPrivateKeySecretRef:
    r"""
    If documents or assertions from the client are signed, this private key will be used to verify the signature.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    alwaysDisplayInConsole : bool, default is Undefined, optional
        Always list this client in the Account UI, even if the user does not have an active session.
    assertionConsumerPostUrl : str, default is Undefined, optional
        SAML POST Binding URL for the client's assertion consumer service (login responses).
    assertionConsumerRedirectUrl : str, default is Undefined, optional
        SAML Redirect Binding URL for the client's assertion consumer service (login responses).
    authenticationFlowBindingOverrides : [SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0], default is Undefined, optional
        Override realm authentication flow bindings
    baseUrl : str, default is Undefined, optional
        When specified, this URL will be used whenever Keycloak needs to link to this client.
    canonicalizationMethod : str, default is Undefined, optional
        The Canonicalization Method for XML signatures. Should be one of "EXCLUSIVE", "EXCLUSIVE_WITH_COMMENTS", "INCLUSIVE", or "INCLUSIVE_WITH_COMMENTS". Defaults to "EXCLUSIVE".
    clientId : str, default is Undefined, optional
        The unique ID of this client, referenced in the URI during authentication and in issued tokens.
    clientIdRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDRef, default is Undefined, optional
        client Id ref
    clientIdSelector : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDSelector, default is Undefined, optional
        client Id selector
    clientSignatureRequired : bool, default is Undefined, optional
        When true, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via signing_certificate and signing_private_key. Defaults to true.
    consentRequired : bool, default is Undefined, optional
        When true, users have to consent to client access. Defaults to false.
    description : str, default is Undefined, optional
        The description of this client in the GUI.
    enabled : bool, default is Undefined, optional
        When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
    encryptAssertions : bool, default is Undefined, optional
        When true, the SAML assertions will be encrypted by Keycloak using the client's public key. Defaults to false.
    encryptionCertificateSecretRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderEncryptionCertificateSecretRef, default is Undefined, optional
        encryption certificate secret ref
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as s may conflict with top-level configuration attributes in future provider updates.
    forceNameIdFormat : bool, default is Undefined, optional
        Ignore requested NameID subject format and use the one defined in name_id_format instead. Defaults to false.
    forcePostBinding : bool, default is Undefined, optional
        When true, Keycloak will always respond to an authentication request via the SAML POST Binding. Defaults to true.
    frontChannelLogout : bool, default is Undefined, optional
        When true, this client will require a browser redirect in order to perform a logout. Defaults to true.
    fullScopeAllowed : bool, default is Undefined, optional
        - Allow to include all roles mappings in the access token
    idpInitiatedSsoRelayState : str, default is Undefined, optional
        Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
    idpInitiatedSsoUrlName : str, default is Undefined, optional
        URL fragment name to reference client when you want to do IDP Initiated SSO.
    includeAuthnStatement : bool, default is Undefined, optional
        When true, an AuthnStatement will be included in the SAML response. Defaults to true.
    loginTheme : str, default is Undefined, optional
        The login theme of this client.
    logoutServicePostBindingUrl : str, default is Undefined, optional
        SAML POST Binding URL for the client's single logout service.
    logoutServiceRedirectBindingUrl : str, default is Undefined, optional
        SAML Redirect Binding URL for the client's single logout service.
    masterSamlProcessingUrl : str, default is Undefined, optional
        When specified, this URL will be used for all SAML requests.
    name : str, default is Undefined, optional
        The display name of this client in the GUI.
    nameIdFormat : str, default is Undefined, optional
        Sets the Name ID format for the subject.
    realmId : str, default is Undefined, optional
        The realm this client is attached to.
    realmIdRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRef, default is Undefined, optional
        realm Id ref
    realmIdSelector : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelector, default is Undefined, optional
        realm Id selector
    rootUrl : str, default is Undefined, optional
        When specified, this value is prepended to all relative URLs.
    signAssertions : bool, default is Undefined, optional
        When true, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. Defaults to false.
    signDocuments : bool, default is Undefined, optional
        When true, the SAML document will be signed by Keycloak using the realm's private key. Defaults to true.
    signatureAlgorithm : str, default is Undefined, optional
        The signature algorithm used to sign documents. Should be one of "RSA_SHA1", "RSA_SHA256", "RSA_SHA256_MGF1, "RSA_SHA512", "RSA_SHA512_MGF1" or "DSA_SHA1".
    signatureKeyName : str, default is Undefined, optional
        The value of the KeyName element within the signed SAML document. Should be one of "NONE", "KEY_ID", or "CERT_SUBJECT". Defaults to "KEY_ID".
    signingCertificateSecretRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderSigningCertificateSecretRef, default is Undefined, optional
        signing certificate secret ref
    signingPrivateKeySecretRef : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderSigningPrivateKeySecretRef, default is Undefined, optional
        signing private key secret ref
    validRedirectUris : [str], default is Undefined, optional
        When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
    """


    alwaysDisplayInConsole?: bool

    assertionConsumerPostUrl?: str

    assertionConsumerRedirectUrl?: str

    authenticationFlowBindingOverrides?: [SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0]

    baseUrl?: str

    canonicalizationMethod?: str

    clientId?: str

    clientIdRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDRef

    clientIdSelector?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDSelector

    clientSignatureRequired?: bool

    consentRequired?: bool

    description?: str

    enabled?: bool

    encryptAssertions?: bool

    encryptionCertificateSecretRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderEncryptionCertificateSecretRef

    extraConfig?: {str:str}

    forceNameIdFormat?: bool

    forcePostBinding?: bool

    frontChannelLogout?: bool

    fullScopeAllowed?: bool

    idpInitiatedSsoRelayState?: str

    idpInitiatedSsoUrlName?: str

    includeAuthnStatement?: bool

    loginTheme?: str

    logoutServicePostBindingUrl?: str

    logoutServiceRedirectBindingUrl?: str

    masterSamlProcessingUrl?: str

    name?: str

    nameIdFormat?: str

    realmId?: str

    realmIdRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRef

    realmIdSelector?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelector

    rootUrl?: str

    signAssertions?: bool

    signDocuments?: bool

    signatureAlgorithm?: str

    signatureKeyName?: str

    signingCertificateSecretRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderSigningCertificateSecretRef

    signingPrivateKeySecretRef?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderSigningPrivateKeySecretRef

    validRedirectUris?: [str]


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderAuthenticationFlowBindingOverridesItems0:
    r"""
    samlclient keycloak crossplane io v1alpha1 client spec init provider authentication flow binding overrides items0

    Attributes
    ----------
    browserId : str, default is Undefined, optional
        Browser flow id, (flow needs to exist)
    directGrantId : str, default is Undefined, optional
        Direct grant flow id (flow needs to exist)
    """


    browserId?: str

    directGrantId?: str


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDRef:
    r"""
    Reference to a Client in openidclient to populate clientId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDRefPolicy


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDSelector:
    r"""
    Selector for a Client in openidclient to populate clientId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDSelectorPolicy


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderClientIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderEncryptionCertificateSecretRef:
    r"""
    If assertions for the client are encrypted, this certificate will be used for encryption.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRef:
    r"""
    Reference to a Realm in realm to populate realmId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRefPolicy


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelector:
    r"""
    Selector for a Realm in realm to populate realmId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelectorPolicy


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderRealmIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderSigningCertificateSecretRef:
    r"""
    If documents or assertions from the client are signed, this certificate will be used to verify the signature.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecInitProviderSigningPrivateKeySecretRef:
    r"""
    If documents or assertions from the client are signed, this private key will be used to verify the signature.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecProviderConfigRefPolicy


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientStatus:
    r"""
    ClientStatus defines the observed state of Client.

    Attributes
    ----------
    atProvider : SamlclientKeycloakCrossplaneIoV1alpha1ClientStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [SamlclientKeycloakCrossplaneIoV1alpha1ClientStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: SamlclientKeycloakCrossplaneIoV1alpha1ClientStatusAtProvider

    conditions?: [SamlclientKeycloakCrossplaneIoV1alpha1ClientStatusConditionsItems0]

    observedGeneration?: int


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientStatusAtProvider:
    r"""
    samlclient keycloak crossplane io v1alpha1 client status at provider

    Attributes
    ----------
    alwaysDisplayInConsole : bool, default is Undefined, optional
        Always list this client in the Account UI, even if the user does not have an active session.
    assertionConsumerPostUrl : str, default is Undefined, optional
        SAML POST Binding URL for the client's assertion consumer service (login responses).
    assertionConsumerRedirectUrl : str, default is Undefined, optional
        SAML Redirect Binding URL for the client's assertion consumer service (login responses).
    authenticationFlowBindingOverrides : [SamlclientKeycloakCrossplaneIoV1alpha1ClientStatusAtProviderAuthenticationFlowBindingOverridesItems0], default is Undefined, optional
        Override realm authentication flow bindings
    baseUrl : str, default is Undefined, optional
        When specified, this URL will be used whenever Keycloak needs to link to this client.
    canonicalizationMethod : str, default is Undefined, optional
        The Canonicalization Method for XML signatures. Should be one of "EXCLUSIVE", "EXCLUSIVE_WITH_COMMENTS", "INCLUSIVE", or "INCLUSIVE_WITH_COMMENTS". Defaults to "EXCLUSIVE".
    clientId : str, default is Undefined, optional
        The unique ID of this client, referenced in the URI during authentication and in issued tokens.
    clientSignatureRequired : bool, default is Undefined, optional
        When true, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via signing_certificate and signing_private_key. Defaults to true.
    consentRequired : bool, default is Undefined, optional
        When true, users have to consent to client access. Defaults to false.
    description : str, default is Undefined, optional
        The description of this client in the GUI.
    enabled : bool, default is Undefined, optional
        When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
    encryptAssertions : bool, default is Undefined, optional
        When true, the SAML assertions will be encrypted by Keycloak using the client's public key. Defaults to false.
    encryptionCertificateSha1 : str, default is Undefined, optional
        (Computed) The sha1sum fingerprint of the encryption certificate. If the encryption certificate is not in correct base64 format, this will be left empty.
    extraConfig : {str:str}, default is Undefined, optional
        A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as s may conflict with top-level configuration attributes in future provider updates.
    forceNameIdFormat : bool, default is Undefined, optional
        Ignore requested NameID subject format and use the one defined in name_id_format instead. Defaults to false.
    forcePostBinding : bool, default is Undefined, optional
        When true, Keycloak will always respond to an authentication request via the SAML POST Binding. Defaults to true.
    frontChannelLogout : bool, default is Undefined, optional
        When true, this client will require a browser redirect in order to perform a logout. Defaults to true.
    fullScopeAllowed : bool, default is Undefined, optional
        - Allow to include all roles mappings in the access token
    id : str, default is Undefined, optional
        id
    idpInitiatedSsoRelayState : str, default is Undefined, optional
        Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
    idpInitiatedSsoUrlName : str, default is Undefined, optional
        URL fragment name to reference client when you want to do IDP Initiated SSO.
    includeAuthnStatement : bool, default is Undefined, optional
        When true, an AuthnStatement will be included in the SAML response. Defaults to true.
    loginTheme : str, default is Undefined, optional
        The login theme of this client.
    logoutServicePostBindingUrl : str, default is Undefined, optional
        SAML POST Binding URL for the client's single logout service.
    logoutServiceRedirectBindingUrl : str, default is Undefined, optional
        SAML Redirect Binding URL for the client's single logout service.
    masterSamlProcessingUrl : str, default is Undefined, optional
        When specified, this URL will be used for all SAML requests.
    name : str, default is Undefined, optional
        The display name of this client in the GUI.
    nameIdFormat : str, default is Undefined, optional
        Sets the Name ID format for the subject.
    realmId : str, default is Undefined, optional
        The realm this client is attached to.
    rootUrl : str, default is Undefined, optional
        When specified, this value is prepended to all relative URLs.
    signAssertions : bool, default is Undefined, optional
        When true, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. Defaults to false.
    signDocuments : bool, default is Undefined, optional
        When true, the SAML document will be signed by Keycloak using the realm's private key. Defaults to true.
    signatureAlgorithm : str, default is Undefined, optional
        The signature algorithm used to sign documents. Should be one of "RSA_SHA1", "RSA_SHA256", "RSA_SHA256_MGF1, "RSA_SHA512", "RSA_SHA512_MGF1" or "DSA_SHA1".
    signatureKeyName : str, default is Undefined, optional
        The value of the KeyName element within the signed SAML document. Should be one of "NONE", "KEY_ID", or "CERT_SUBJECT". Defaults to "KEY_ID".
    signingCertificateSha1 : str, default is Undefined, optional
        (Computed) The sha1sum fingerprint of the signing certificate. If the signing certificate is not in correct base64 format, this will be left empty.
    signingPrivateKeySha1 : str, default is Undefined, optional
        (Computed) The sha1sum fingerprint of the signing private key. If the signing private key is not in correct base64 format, this will be left empty.
    validRedirectUris : [str], default is Undefined, optional
        When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
    """


    alwaysDisplayInConsole?: bool

    assertionConsumerPostUrl?: str

    assertionConsumerRedirectUrl?: str

    authenticationFlowBindingOverrides?: [SamlclientKeycloakCrossplaneIoV1alpha1ClientStatusAtProviderAuthenticationFlowBindingOverridesItems0]

    baseUrl?: str

    canonicalizationMethod?: str

    clientId?: str

    clientSignatureRequired?: bool

    consentRequired?: bool

    description?: str

    enabled?: bool

    encryptAssertions?: bool

    encryptionCertificateSha1?: str

    extraConfig?: {str:str}

    forceNameIdFormat?: bool

    forcePostBinding?: bool

    frontChannelLogout?: bool

    fullScopeAllowed?: bool

    id?: str

    idpInitiatedSsoRelayState?: str

    idpInitiatedSsoUrlName?: str

    includeAuthnStatement?: bool

    loginTheme?: str

    logoutServicePostBindingUrl?: str

    logoutServiceRedirectBindingUrl?: str

    masterSamlProcessingUrl?: str

    name?: str

    nameIdFormat?: str

    realmId?: str

    rootUrl?: str

    signAssertions?: bool

    signDocuments?: bool

    signatureAlgorithm?: str

    signatureKeyName?: str

    signingCertificateSha1?: str

    signingPrivateKeySha1?: str

    validRedirectUris?: [str]


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientStatusAtProviderAuthenticationFlowBindingOverridesItems0:
    r"""
    samlclient keycloak crossplane io v1alpha1 client status at provider authentication flow binding overrides items0

    Attributes
    ----------
    browserId : str, default is Undefined, optional
        Browser flow id, (flow needs to exist)
    directGrantId : str, default is Undefined, optional
        Direct grant flow id (flow needs to exist)
    """


    browserId?: str

    directGrantId?: str


schema SamlclientKeycloakCrossplaneIoV1alpha1ClientStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


