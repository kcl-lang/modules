"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Route:
    r"""
    Route is the Schema for the Routes API. Manages an Amazon API Gateway Version 2 route.

    Attributes
    ----------
    apiVersion : str, default is "apigatewayv2.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Route", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Apigatewayv2AwsUpboundIoV1beta1RouteSpec, default is Undefined, required
        spec
    status : Apigatewayv2AwsUpboundIoV1beta1RouteStatus, default is Undefined, optional
        status
    """


    apiVersion: "apigatewayv2.aws.upbound.io/v1beta1" = "apigatewayv2.aws.upbound.io/v1beta1"

    kind: "Route" = "Route"

    metadata?: v1.ObjectMeta

    spec: Apigatewayv2AwsUpboundIoV1beta1RouteSpec

    status?: Apigatewayv2AwsUpboundIoV1beta1RouteStatus


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpec:
    r"""
    RouteSpec defines the desired state of Route

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProvider, default is Undefined, required
        for provider
    initProvider : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : Apigatewayv2AwsUpboundIoV1beta1RouteSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Apigatewayv2AwsUpboundIoV1beta1RouteSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProvider

    initProvider?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecProviderConfigRef

    publishConnectionDetailsTo?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecWriteConnectionSecretToRef


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProvider:
    r"""
    apigatewayv2 aws upbound io v1beta1 route spec for provider

    Attributes
    ----------
    apiId : str, default is Undefined, optional
        API identifier.
    apiIdRef : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDRef, default is Undefined, optional
        api Id ref
    apiIdSelector : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDSelector, default is Undefined, optional
        api Id selector
    apiKeyRequired : bool, default is Undefined, optional
        Boolean whether an API key is required for the route. Defaults to false. Supported only for WebSocket APIs.
    authorizationScopes : [str], default is Undefined, optional
        Authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
    authorizationType : str, default is Undefined, optional
        Authorization type for the route.
        For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        Defaults to NONE.
    authorizerId : str, default is Undefined, optional
        Identifier of the aws_apigatewayv2_authorizer resource to be associated with this route.
    authorizerIdRef : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDRef, default is Undefined, optional
        authorizer Id ref
    authorizerIdSelector : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDSelector, default is Undefined, optional
        authorizer Id selector
    modelSelectionExpression : str, default is Undefined, optional
        The model selection expression for the route. Supported only for WebSocket APIs.
    operationName : str, default is Undefined, optional
        Operation name for the route. Must be between 1 and 64 characters in length.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    requestModels : {str:str}, default is Undefined, optional
        Request models for the route. Supported only for WebSocket APIs.
    requestParameter : [Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderRequestParameterItems0], default is Undefined, optional
        Request parameters for the route. Supported only for WebSocket APIs.
    routeKey : str, default is Undefined, optional
        Route key for the route. For HTTP APIs, the route key can be either $default, or a combination of an HTTP method and resource path, for example, GET /pets.
    routeResponseSelectionExpression : str, default is Undefined, optional
        The route response selection expression for the route. Supported only for WebSocket APIs.
    target : str, default is Undefined, optional
        Target for the route, of the form integrations/IntegrationID, where IntegrationID is the identifier of an aws_apigatewayv2_integration resource.
    targetRef : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetRef, default is Undefined, optional
        target ref
    targetSelector : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetSelector, default is Undefined, optional
        target selector
    """


    apiId?: str

    apiIdRef?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDRef

    apiIdSelector?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDSelector

    apiKeyRequired?: bool

    authorizationScopes?: [str]

    authorizationType?: str

    authorizerId?: str

    authorizerIdRef?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDRef

    authorizerIdSelector?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDSelector

    modelSelectionExpression?: str

    operationName?: str

    region: str

    requestModels?: {str:str}

    requestParameter?: [Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderRequestParameterItems0]

    routeKey?: str

    routeResponseSelectionExpression?: str

    target?: str

    targetRef?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetRef

    targetSelector?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetSelector


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDRef:
    r"""
    Reference to a API in apigatewayv2 to populate apiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDSelector:
    r"""
    Selector for a API in apigatewayv2 to populate apiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDSelectorPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDRef:
    r"""
    Reference to a Authorizer in apigatewayv2 to populate authorizerId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDSelector:
    r"""
    Selector for a Authorizer in apigatewayv2 to populate authorizerId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDSelectorPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderAuthorizerIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderRequestParameterItems0:
    r"""
    apigatewayv2 aws upbound io v1beta1 route spec for provider request parameter items0

    Attributes
    ----------
    requestParameterKey : str, default is Undefined, optional
        Request parameter key. This is a request data mapping parameter.
    required : bool, default is Undefined, optional
        Boolean whether or not the parameter is required.
    """


    requestParameterKey?: str

    required?: bool


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetRef:
    r"""
    Reference to a Integration in apigatewayv2 to populate target.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetSelector:
    r"""
    Selector for a Integration in apigatewayv2 to populate target.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetSelectorPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecForProviderTargetSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    apiId : str, default is Undefined, optional
        API identifier.
    apiIdRef : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDRef, default is Undefined, optional
        api Id ref
    apiIdSelector : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDSelector, default is Undefined, optional
        api Id selector
    apiKeyRequired : bool, default is Undefined, optional
        Boolean whether an API key is required for the route. Defaults to false. Supported only for WebSocket APIs.
    authorizationScopes : [str], default is Undefined, optional
        Authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
    authorizationType : str, default is Undefined, optional
        Authorization type for the route.
        For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        Defaults to NONE.
    authorizerId : str, default is Undefined, optional
        Identifier of the aws_apigatewayv2_authorizer resource to be associated with this route.
    authorizerIdRef : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDRef, default is Undefined, optional
        authorizer Id ref
    authorizerIdSelector : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDSelector, default is Undefined, optional
        authorizer Id selector
    modelSelectionExpression : str, default is Undefined, optional
        The model selection expression for the route. Supported only for WebSocket APIs.
    operationName : str, default is Undefined, optional
        Operation name for the route. Must be between 1 and 64 characters in length.
    requestModels : {str:str}, default is Undefined, optional
        Request models for the route. Supported only for WebSocket APIs.
    requestParameter : [Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderRequestParameterItems0], default is Undefined, optional
        Request parameters for the route. Supported only for WebSocket APIs.
    routeKey : str, default is Undefined, optional
        Route key for the route. For HTTP APIs, the route key can be either $default, or a combination of an HTTP method and resource path, for example, GET /pets.
    routeResponseSelectionExpression : str, default is Undefined, optional
        The route response selection expression for the route. Supported only for WebSocket APIs.
    target : str, default is Undefined, optional
        Target for the route, of the form integrations/IntegrationID, where IntegrationID is the identifier of an aws_apigatewayv2_integration resource.
    targetRef : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetRef, default is Undefined, optional
        target ref
    targetSelector : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetSelector, default is Undefined, optional
        target selector
    """


    apiId?: str

    apiIdRef?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDRef

    apiIdSelector?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDSelector

    apiKeyRequired?: bool

    authorizationScopes?: [str]

    authorizationType?: str

    authorizerId?: str

    authorizerIdRef?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDRef

    authorizerIdSelector?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDSelector

    modelSelectionExpression?: str

    operationName?: str

    requestModels?: {str:str}

    requestParameter?: [Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderRequestParameterItems0]

    routeKey?: str

    routeResponseSelectionExpression?: str

    target?: str

    targetRef?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetRef

    targetSelector?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetSelector


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDRef:
    r"""
    Reference to a API in apigatewayv2 to populate apiId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDSelector:
    r"""
    Selector for a API in apigatewayv2 to populate apiId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDSelectorPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAPIIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDRef:
    r"""
    Reference to a Authorizer in apigatewayv2 to populate authorizerId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDSelector:
    r"""
    Selector for a Authorizer in apigatewayv2 to populate authorizerId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDSelectorPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderAuthorizerIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderRequestParameterItems0:
    r"""
    apigatewayv2 aws upbound io v1beta1 route spec init provider request parameter items0

    Attributes
    ----------
    requestParameterKey : str, default is Undefined, optional
        Request parameter key. This is a request data mapping parameter.
    required : bool, default is Undefined, optional
        Boolean whether or not the parameter is required.
    """


    requestParameterKey?: str

    required?: bool


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetRef:
    r"""
    Reference to a Integration in apigatewayv2 to populate target.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetSelector:
    r"""
    Selector for a Integration in apigatewayv2 to populate target.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetSelectorPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecInitProviderTargetSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecProviderConfigRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRef

    metadata?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToMetadata

    name: str


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRefPolicy


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Apigatewayv2AwsUpboundIoV1beta1RouteSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Apigatewayv2AwsUpboundIoV1beta1RouteStatus:
    r"""
    RouteStatus defines the observed state of Route.

    Attributes
    ----------
    atProvider : Apigatewayv2AwsUpboundIoV1beta1RouteStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Apigatewayv2AwsUpboundIoV1beta1RouteStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: Apigatewayv2AwsUpboundIoV1beta1RouteStatusAtProvider

    conditions?: [Apigatewayv2AwsUpboundIoV1beta1RouteStatusConditionsItems0]

    observedGeneration?: int


schema Apigatewayv2AwsUpboundIoV1beta1RouteStatusAtProvider:
    r"""
    apigatewayv2 aws upbound io v1beta1 route status at provider

    Attributes
    ----------
    apiId : str, default is Undefined, optional
        API identifier.
    apiKeyRequired : bool, default is Undefined, optional
        Boolean whether an API key is required for the route. Defaults to false. Supported only for WebSocket APIs.
    authorizationScopes : [str], default is Undefined, optional
        Authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
    authorizationType : str, default is Undefined, optional
        Authorization type for the route.
        For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        Defaults to NONE.
    authorizerId : str, default is Undefined, optional
        Identifier of the aws_apigatewayv2_authorizer resource to be associated with this route.
    id : str, default is Undefined, optional
        Route identifier.
    modelSelectionExpression : str, default is Undefined, optional
        The model selection expression for the route. Supported only for WebSocket APIs.
    operationName : str, default is Undefined, optional
        Operation name for the route. Must be between 1 and 64 characters in length.
    requestModels : {str:str}, default is Undefined, optional
        Request models for the route. Supported only for WebSocket APIs.
    requestParameter : [Apigatewayv2AwsUpboundIoV1beta1RouteStatusAtProviderRequestParameterItems0], default is Undefined, optional
        Request parameters for the route. Supported only for WebSocket APIs.
    routeKey : str, default is Undefined, optional
        Route key for the route. For HTTP APIs, the route key can be either $default, or a combination of an HTTP method and resource path, for example, GET /pets.
    routeResponseSelectionExpression : str, default is Undefined, optional
        The route response selection expression for the route. Supported only for WebSocket APIs.
    target : str, default is Undefined, optional
        Target for the route, of the form integrations/IntegrationID, where IntegrationID is the identifier of an aws_apigatewayv2_integration resource.
    """


    apiId?: str

    apiKeyRequired?: bool

    authorizationScopes?: [str]

    authorizationType?: str

    authorizerId?: str

    id?: str

    modelSelectionExpression?: str

    operationName?: str

    requestModels?: {str:str}

    requestParameter?: [Apigatewayv2AwsUpboundIoV1beta1RouteStatusAtProviderRequestParameterItems0]

    routeKey?: str

    routeResponseSelectionExpression?: str

    target?: str


schema Apigatewayv2AwsUpboundIoV1beta1RouteStatusAtProviderRequestParameterItems0:
    r"""
    apigatewayv2 aws upbound io v1beta1 route status at provider request parameter items0

    Attributes
    ----------
    requestParameterKey : str, default is Undefined, optional
        Request parameter key. This is a request data mapping parameter.
    required : bool, default is Undefined, optional
        Boolean whether or not the parameter is required.
    """


    requestParameterKey?: str

    required?: bool


schema Apigatewayv2AwsUpboundIoV1beta1RouteStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


