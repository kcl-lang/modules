"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema User:
    r"""
    User is the Schema for the Users API. Provides a Cognito User resource.

    Attributes
    ----------
    apiVersion : str, default is "cognitoidp.aws.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "User", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : CognitoidpAwsUpboundIoV1beta1UserSpec, default is Undefined, required
        spec
    status : CognitoidpAwsUpboundIoV1beta1UserStatus, default is Undefined, optional
        status
    """


    apiVersion: "cognitoidp.aws.upbound.io/v1beta1" = "cognitoidp.aws.upbound.io/v1beta1"

    kind: "User" = "User"

    metadata?: v1.ObjectMeta

    spec: CognitoidpAwsUpboundIoV1beta1UserSpec

    status?: CognitoidpAwsUpboundIoV1beta1UserStatus


schema CognitoidpAwsUpboundIoV1beta1UserSpec:
    r"""
    UserSpec defines the desired state of User

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : CognitoidpAwsUpboundIoV1beta1UserSpecForProvider, default is Undefined, required
        for provider
    initProvider : CognitoidpAwsUpboundIoV1beta1UserSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : CognitoidpAwsUpboundIoV1beta1UserSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : CognitoidpAwsUpboundIoV1beta1UserSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: CognitoidpAwsUpboundIoV1beta1UserSpecForProvider

    initProvider?: CognitoidpAwsUpboundIoV1beta1UserSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: CognitoidpAwsUpboundIoV1beta1UserSpecProviderConfigRef

    publishConnectionDetailsTo?: CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: CognitoidpAwsUpboundIoV1beta1UserSpecWriteConnectionSecretToRef


schema CognitoidpAwsUpboundIoV1beta1UserSpecForProvider:
    r"""
    cognitoidp aws upbound io v1beta1 user spec for provider

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        A map that contains user attributes and attribute values to be set for the user.
    clientMetadata : {str:str}, default is Undefined, optional
        A map of custom key-value pairs that you can provide as input for any custom workflows that user creation triggers. Amazon Cognito does not store the client_metadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose. For more information, see Customizing User Pool Workflows with Lambda Triggers.
    desiredDeliveryMediums : [str], default is Undefined, optional
        A list of mediums to the welcome message will be sent through. Allowed values are EMAIL and SMS. If it's provided, make sure you have also specified email attribute for the EMAIL medium and phone_number for the SMS. More than one value can be specified. Amazon Cognito does not store the desired_delivery_mediums value. Defaults to ["SMS"].
    enabled : bool, default is Undefined, optional
        Specifies whether the user should be enabled after creation. The welcome message will be sent regardless of the enabled value. The behavior can be changed with message_action argument. Defaults to true.
    forceAliasCreation : bool, default is Undefined, optional
        If this parameter is set to True and the phone_number or email address specified in the attributes parameter already exists as an alias with a different user, Amazon Cognito will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. Amazon Cognito does not store the force_alias_creation value. Defaults to false.
    messageAction : str, default is Undefined, optional
        Set to RESEND to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to SUPPRESS to suppress sending the message. Only one value can be specified. Amazon Cognito does not store the message_action value.
    passwordSecretRef : CognitoidpAwsUpboundIoV1beta1UserSpecForProviderPasswordSecretRef, default is Undefined, optional
        password secret ref
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    temporaryPasswordSecretRef : CognitoidpAwsUpboundIoV1beta1UserSpecForProviderTemporaryPasswordSecretRef, default is Undefined, optional
        temporary password secret ref
    userPoolId : str, default is Undefined, optional
        The user pool ID for the user pool where the user will be created.
    userPoolIdRef : CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDRef, default is Undefined, optional
        user pool Id ref
    userPoolIdSelector : CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDSelector, default is Undefined, optional
        user pool Id selector
    validationData : {str:str}, default is Undefined, optional
        The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. Amazon Cognito does not store the validation_data value. For more information, see Customizing User Pool Workflows with Lambda Triggers.
    """


    attributes?: {str:str}

    clientMetadata?: {str:str}

    desiredDeliveryMediums?: [str]

    enabled?: bool

    forceAliasCreation?: bool

    messageAction?: str

    passwordSecretRef?: CognitoidpAwsUpboundIoV1beta1UserSpecForProviderPasswordSecretRef

    region: str

    temporaryPasswordSecretRef?: CognitoidpAwsUpboundIoV1beta1UserSpecForProviderTemporaryPasswordSecretRef

    userPoolId?: str

    userPoolIdRef?: CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDRef

    userPoolIdSelector?: CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDSelector

    validationData?: {str:str}


schema CognitoidpAwsUpboundIoV1beta1UserSpecForProviderPasswordSecretRef:
    r"""
    The user's permanent password. This password must conform to the password policy specified by user pool the user belongs to. The welcome message always contains only temporary_password value. You can suppress sending the welcome message with the message_action argument. Amazon Cognito does not store the password value. Conflicts with temporary_password.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema CognitoidpAwsUpboundIoV1beta1UserSpecForProviderTemporaryPasswordSecretRef:
    r"""
    The user's temporary password. Conflicts with password.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDRef:
    r"""
    Reference to a UserPool in cognitoidp to populate userPoolId.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDSelector:
    r"""
    Selector for a UserPool in cognitoidp to populate userPoolId.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDSelectorPolicy


schema CognitoidpAwsUpboundIoV1beta1UserSpecForProviderUserPoolIDSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        A map that contains user attributes and attribute values to be set for the user.
    clientMetadata : {str:str}, default is Undefined, optional
        A map of custom key-value pairs that you can provide as input for any custom workflows that user creation triggers. Amazon Cognito does not store the client_metadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose. For more information, see Customizing User Pool Workflows with Lambda Triggers.
    desiredDeliveryMediums : [str], default is Undefined, optional
        A list of mediums to the welcome message will be sent through. Allowed values are EMAIL and SMS. If it's provided, make sure you have also specified email attribute for the EMAIL medium and phone_number for the SMS. More than one value can be specified. Amazon Cognito does not store the desired_delivery_mediums value. Defaults to ["SMS"].
    enabled : bool, default is Undefined, optional
        Specifies whether the user should be enabled after creation. The welcome message will be sent regardless of the enabled value. The behavior can be changed with message_action argument. Defaults to true.
    forceAliasCreation : bool, default is Undefined, optional
        If this parameter is set to True and the phone_number or email address specified in the attributes parameter already exists as an alias with a different user, Amazon Cognito will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. Amazon Cognito does not store the force_alias_creation value. Defaults to false.
    messageAction : str, default is Undefined, optional
        Set to RESEND to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to SUPPRESS to suppress sending the message. Only one value can be specified. Amazon Cognito does not store the message_action value.
    passwordSecretRef : CognitoidpAwsUpboundIoV1beta1UserSpecInitProviderPasswordSecretRef, default is Undefined, optional
        password secret ref
    temporaryPasswordSecretRef : CognitoidpAwsUpboundIoV1beta1UserSpecInitProviderTemporaryPasswordSecretRef, default is Undefined, optional
        temporary password secret ref
    validationData : {str:str}, default is Undefined, optional
        The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. Amazon Cognito does not store the validation_data value. For more information, see Customizing User Pool Workflows with Lambda Triggers.
    """


    attributes?: {str:str}

    clientMetadata?: {str:str}

    desiredDeliveryMediums?: [str]

    enabled?: bool

    forceAliasCreation?: bool

    messageAction?: str

    passwordSecretRef?: CognitoidpAwsUpboundIoV1beta1UserSpecInitProviderPasswordSecretRef

    temporaryPasswordSecretRef?: CognitoidpAwsUpboundIoV1beta1UserSpecInitProviderTemporaryPasswordSecretRef

    validationData?: {str:str}


schema CognitoidpAwsUpboundIoV1beta1UserSpecInitProviderPasswordSecretRef:
    r"""
    The user's permanent password. This password must conform to the password policy specified by user pool the user belongs to. The welcome message always contains only temporary_password value. You can suppress sending the welcome message with the message_action argument. Amazon Cognito does not store the password value. Conflicts with temporary_password.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema CognitoidpAwsUpboundIoV1beta1UserSpecInitProviderTemporaryPasswordSecretRef:
    r"""
    The user's temporary password. Conflicts with password.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema CognitoidpAwsUpboundIoV1beta1UserSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserSpecProviderConfigRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRef

    metadata?: CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToMetadata

    name: str


schema CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRefPolicy


schema CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CognitoidpAwsUpboundIoV1beta1UserSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema CognitoidpAwsUpboundIoV1beta1UserSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema CognitoidpAwsUpboundIoV1beta1UserStatus:
    r"""
    UserStatus defines the observed state of User.

    Attributes
    ----------
    atProvider : CognitoidpAwsUpboundIoV1beta1UserStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [CognitoidpAwsUpboundIoV1beta1UserStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: CognitoidpAwsUpboundIoV1beta1UserStatusAtProvider

    conditions?: [CognitoidpAwsUpboundIoV1beta1UserStatusConditionsItems0]

    observedGeneration?: int


schema CognitoidpAwsUpboundIoV1beta1UserStatusAtProvider:
    r"""
    cognitoidp aws upbound io v1beta1 user status at provider

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        A map that contains user attributes and attribute values to be set for the user.
    clientMetadata : {str:str}, default is Undefined, optional
        A map of custom key-value pairs that you can provide as input for any custom workflows that user creation triggers. Amazon Cognito does not store the client_metadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration does not include triggers, the ClientMetadata parameter serves no purpose. For more information, see Customizing User Pool Workflows with Lambda Triggers.
    creationDate : str, default is Undefined, optional
        creation date
    desiredDeliveryMediums : [str], default is Undefined, optional
        A list of mediums to the welcome message will be sent through. Allowed values are EMAIL and SMS. If it's provided, make sure you have also specified email attribute for the EMAIL medium and phone_number for the SMS. More than one value can be specified. Amazon Cognito does not store the desired_delivery_mediums value. Defaults to ["SMS"].
    enabled : bool, default is Undefined, optional
        Specifies whether the user should be enabled after creation. The welcome message will be sent regardless of the enabled value. The behavior can be changed with message_action argument. Defaults to true.
    forceAliasCreation : bool, default is Undefined, optional
        If this parameter is set to True and the phone_number or email address specified in the attributes parameter already exists as an alias with a different user, Amazon Cognito will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias. Amazon Cognito does not store the force_alias_creation value. Defaults to false.
    id : str, default is Undefined, optional
        id
    lastModifiedDate : str, default is Undefined, optional
        last modified date
    messageAction : str, default is Undefined, optional
        Set to RESEND to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to SUPPRESS to suppress sending the message. Only one value can be specified. Amazon Cognito does not store the message_action value.
    mfaSettingList : [str], default is Undefined, optional
        mfa setting list
    preferredMfaSetting : str, default is Undefined, optional
        preferred mfa setting
    status : str, default is Undefined, optional
        current user status.
    sub : str, default is Undefined, optional
        unique user id that is never reassignable to another user.
    userPoolId : str, default is Undefined, optional
        The user pool ID for the user pool where the user will be created.
    validationData : {str:str}, default is Undefined, optional
        The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. Amazon Cognito does not store the validation_data value. For more information, see Customizing User Pool Workflows with Lambda Triggers.
    """


    attributes?: {str:str}

    clientMetadata?: {str:str}

    creationDate?: str

    desiredDeliveryMediums?: [str]

    enabled?: bool

    forceAliasCreation?: bool

    id?: str

    lastModifiedDate?: str

    messageAction?: str

    mfaSettingList?: [str]

    preferredMfaSetting?: str

    status?: str

    sub?: str

    userPoolId?: str

    validationData?: {str:str}


schema CognitoidpAwsUpboundIoV1beta1UserStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


