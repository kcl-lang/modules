"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VirtualService:
    r"""
    VirtualService is the Schema for the VirtualServices API. Provides an AWS App Mesh virtual service resource.

    Attributes
    ----------
    apiVersion : str, default is "appmesh.aws.upbound.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VirtualService", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AppmeshAwsUpboundIoV1beta2VirtualServiceSpec, default is Undefined, required
        spec
    status : AppmeshAwsUpboundIoV1beta2VirtualServiceStatus, default is Undefined, optional
        status
    """


    apiVersion: "appmesh.aws.upbound.io/v1beta2" = "appmesh.aws.upbound.io/v1beta2"

    kind: "VirtualService" = "VirtualService"

    metadata?: v1.ObjectMeta

    spec: AppmeshAwsUpboundIoV1beta2VirtualServiceSpec

    status?: AppmeshAwsUpboundIoV1beta2VirtualServiceStatus


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpec:
    r"""
    VirtualServiceSpec defines the desired state of VirtualService

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProvider, default is Undefined, required
        for provider
    initProvider : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProvider

    initProvider?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecProviderConfigRef

    publishConnectionDetailsTo?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecWriteConnectionSecretToRef


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProvider:
    r"""
    appmesh aws upbound io v1beta2 virtual service spec for provider

    Attributes
    ----------
    meshName : str, default is Undefined, optional
        Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
    meshNameRef : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameRef, default is Undefined, optional
        mesh name ref
    meshNameSelector : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameSelector, default is Undefined, optional
        mesh name selector
    meshOwner : str, default is Undefined, optional
        AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    name : str, default is Undefined, optional
        Name to use for the virtual service. Must be between 1 and 255 characters in length.
    region : str, default is Undefined, required
        Region is the region you'd like your resource to be created in.
    spec : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpec, default is Undefined, optional
        spec
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    meshName?: str

    meshNameRef?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameRef

    meshNameSelector?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameSelector

    meshOwner?: str

    name?: str

    region: str

    spec?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpec

    tags?: {str:str}


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameRef:
    r"""
    Reference to a Mesh in appmesh to populate meshName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameSelector:
    r"""
    Selector for a Mesh in appmesh to populate meshName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameSelectorPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderMeshNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpec:
    r"""
    Virtual service specification to apply.

    Attributes
    ----------
    provider : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProvider, default is Undefined, optional
        provider
    """


    provider?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProvider


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProvider:
    r"""
    App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.

    Attributes
    ----------
    virtualNode : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNode, default is Undefined, optional
        virtual node
    virtualRouter : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouter, default is Undefined, optional
        virtual router
    """


    virtualNode?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNode

    virtualRouter?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouter


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNode:
    r"""
    Virtual node associated with a virtual service.

    Attributes
    ----------
    virtualNodeName : str, default is Undefined, optional
        Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
    virtualNodeNameRef : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameRef, default is Undefined, optional
        virtual node name ref
    virtualNodeNameSelector : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameSelector, default is Undefined, optional
        virtual node name selector
    """


    virtualNodeName?: str

    virtualNodeNameRef?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameRef

    virtualNodeNameSelector?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameSelector


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameRef:
    r"""
    Reference to a VirtualNode in appmesh to populate virtualNodeName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameSelector:
    r"""
    Selector for a VirtualNode in appmesh to populate virtualNodeName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouter:
    r"""
    Virtual router associated with a virtual service.

    Attributes
    ----------
    virtualRouterName : str, default is Undefined, optional
        Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
    virtualRouterNameRef : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameRef, default is Undefined, optional
        virtual router name ref
    virtualRouterNameSelector : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameSelector, default is Undefined, optional
        virtual router name selector
    """


    virtualRouterName?: str

    virtualRouterNameRef?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameRef

    virtualRouterNameSelector?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameSelector


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameRef:
    r"""
    Reference to a VirtualRouter in appmesh to populate virtualRouterName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameSelector:
    r"""
    Selector for a VirtualRouter in appmesh to populate virtualRouterName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecForProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    meshName : str, default is Undefined, optional
        Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
    meshNameRef : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameRef, default is Undefined, optional
        mesh name ref
    meshNameSelector : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameSelector, default is Undefined, optional
        mesh name selector
    meshOwner : str, default is Undefined, optional
        AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    name : str, default is Undefined, optional
        Name to use for the virtual service. Must be between 1 and 255 characters in length.
    spec : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpec, default is Undefined, optional
        spec
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    """


    meshName?: str

    meshNameRef?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameRef

    meshNameSelector?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameSelector

    meshOwner?: str

    name?: str

    spec?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpec

    tags?: {str:str}


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameRef:
    r"""
    Reference to a Mesh in appmesh to populate meshName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameSelector:
    r"""
    Selector for a Mesh in appmesh to populate meshName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameSelectorPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderMeshNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpec:
    r"""
    Virtual service specification to apply.

    Attributes
    ----------
    provider : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProvider, default is Undefined, optional
        provider
    """


    provider?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProvider


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProvider:
    r"""
    App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.

    Attributes
    ----------
    virtualNode : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNode, default is Undefined, optional
        virtual node
    virtualRouter : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouter, default is Undefined, optional
        virtual router
    """


    virtualNode?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNode

    virtualRouter?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouter


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNode:
    r"""
    Virtual node associated with a virtual service.

    Attributes
    ----------
    virtualNodeName : str, default is Undefined, optional
        Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
    virtualNodeNameRef : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameRef, default is Undefined, optional
        virtual node name ref
    virtualNodeNameSelector : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameSelector, default is Undefined, optional
        virtual node name selector
    """


    virtualNodeName?: str

    virtualNodeNameRef?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameRef

    virtualNodeNameSelector?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameSelector


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameRef:
    r"""
    Reference to a VirtualNode in appmesh to populate virtualNodeName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameSelector:
    r"""
    Selector for a VirtualNode in appmesh to populate virtualNodeName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouter:
    r"""
    Virtual router associated with a virtual service.

    Attributes
    ----------
    virtualRouterName : str, default is Undefined, optional
        Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
    virtualRouterNameRef : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameRef, default is Undefined, optional
        virtual router name ref
    virtualRouterNameSelector : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameSelector, default is Undefined, optional
        virtual router name selector
    """


    virtualRouterName?: str

    virtualRouterNameRef?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameRef

    virtualRouterNameSelector?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameSelector


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameRef:
    r"""
    Reference to a VirtualRouter in appmesh to populate virtualRouterName.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameSelector:
    r"""
    Selector for a VirtualRouter in appmesh to populate virtualRouterName.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecInitProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicy:
    r"""
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecProviderConfigRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsToConfigRef

    metadata?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsToMetadata

    name: str


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsToConfigRefPolicy


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema AppmeshAwsUpboundIoV1beta2VirtualServiceSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema AppmeshAwsUpboundIoV1beta2VirtualServiceStatus:
    r"""
    VirtualServiceStatus defines the observed state of VirtualService.

    Attributes
    ----------
    atProvider : AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [AppmeshAwsUpboundIoV1beta2VirtualServiceStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProvider

    conditions?: [AppmeshAwsUpboundIoV1beta2VirtualServiceStatusConditionsItems0]

    observedGeneration?: int


schema AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProvider:
    r"""
    appmesh aws upbound io v1beta2 virtual service status at provider

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN of the virtual service.
    createdDate : str, default is Undefined, optional
        Creation date of the virtual service.
    id : str, default is Undefined, optional
        ID of the virtual service.
    lastUpdatedDate : str, default is Undefined, optional
        Last update date of the virtual service.
    meshName : str, default is Undefined, optional
        Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
    meshOwner : str, default is Undefined, optional
        AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    name : str, default is Undefined, optional
        Name to use for the virtual service. Must be between 1 and 255 characters in length.
    resourceOwner : str, default is Undefined, optional
        Resource owner's AWS account ID.
    spec : AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpec, default is Undefined, optional
        spec
    tags : {str:str}, default is Undefined, optional
        Key-value map of resource tags.
    tagsAll : {str:str}, default is Undefined, optional
        Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    """


    arn?: str

    createdDate?: str

    id?: str

    lastUpdatedDate?: str

    meshName?: str

    meshOwner?: str

    name?: str

    resourceOwner?: str

    spec?: AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpec

    tags?: {str:str}

    tagsAll?: {str:str}


schema AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpec:
    r"""
    Virtual service specification to apply.

    Attributes
    ----------
    provider : AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpecProvider, default is Undefined, optional
        provider
    """


    provider?: AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpecProvider


schema AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpecProvider:
    r"""
    App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.

    Attributes
    ----------
    virtualNode : AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpecProviderVirtualNode, default is Undefined, optional
        virtual node
    virtualRouter : AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpecProviderVirtualRouter, default is Undefined, optional
        virtual router
    """


    virtualNode?: AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpecProviderVirtualNode

    virtualRouter?: AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpecProviderVirtualRouter


schema AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpecProviderVirtualNode:
    r"""
    Virtual node associated with a virtual service.

    Attributes
    ----------
    virtualNodeName : str, default is Undefined, optional
        Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
    """


    virtualNodeName?: str


schema AppmeshAwsUpboundIoV1beta2VirtualServiceStatusAtProviderSpecProviderVirtualRouter:
    r"""
    Virtual router associated with a virtual service.

    Attributes
    ----------
    virtualRouterName : str, default is Undefined, optional
        Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
    """


    virtualRouterName?: str


schema AppmeshAwsUpboundIoV1beta2VirtualServiceStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


